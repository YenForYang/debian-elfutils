This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by elfutils configure 0.175, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ ./configure --build=x86_64-linux-gnu --enable-maintainer-mode --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --program-prefix=eu- --disable-silent-rules

## --------- ##
## Platform. ##
## --------- ##

hostname = server
uname -m = x86_64
uname -r = 4.18.0-2-amd64
uname -s = Linux
uname -v = #1 SMP Debian 4.18.10-2 (2018-11-02)

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /opt/intel/compilers_and_libraries/linux/pkg_bin/intel64
PATH: /opt/intel/parallel_studio_xe_2019/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin
PATH: /usr/bin/X11


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2403: loading site script /usr/share/config.site
| [[ -z $LD_LIBRARY_PATH || -z $CPATH || -z $NLSPATH || -z $LIBRARY_PATH || -z $TBBROOT || -z $PSTLROOT ]] && . /opt/intel/parallel_studio_xe_2019/psxevars.sh
| 	
| : ${CC:=icc} ${LTCC:=icc} ${CXX:=icpc} ${LANGUAGE:=C} ${LC_ALL:=C} "${CPP:=icc -E}" "${CXXCPP:=icpc -E}"
| : ${INSTALL:=/usr/bin/install} "${MKDIR_P:=/bin/mkdir -p}" ${AWK:=/usr/bin/gawk} ${AS:=/usr/bin/x86_64-linux-gnu-as} ${RANLIB:=/usr/bin/x86_64-linux-gnu-ranlib} 
| : ${MAGIC_CMD:=/usr/bin/file}
| CONFIG_SHELL=/bin/bash
| ECHO='/usr/bin/printf %s\n'
| ECHO_T='	' # assuming shell if BASH! if zsh we define ECHO_C=\c
| EGREP='/bin/grep -E'
| FGREP='/bin/grep -F'
| GCC=yes
| GCC_CXX=yes
| GREP=/bin/grep
| LD='xild -m elf_x86_64'
| LN_S='ln -s'
| LTCC=icc
| NM='/usr/bin/x86_64-linux-gnu-nm -B'
| OBJDUMP=/usr/bin/x86_64-linux-gnu-objdump
| PERL=/usr/bin/perl
| PKG_CONFIG=/usr/bin/pkg-config
| SED=/bin/sed
| SHELL=/bin/bash
| STRIP=/usr/bin/x86_64-linux-gnu-strip
| Xsed='/bin/sed -e 1s/^X//'
| YACC='/usr/bin/bison -y'
| #am_cv_ar_interface=ar
| #am_cv_CXX_dependencies_compiler_type=none
| #am_cv_func_iconv_works=yes
| 
| #ac_cv_path_PYTHON=/usr/bin/python
| #ac_cv_path_PYTHON=/usr/bin/python3
| #ac_cv_path_shell=/bin/sh
| #ac_cv_prog_ac_ct_FC=f95
| #ac_cv_prog_ac_ct_FC=gfortran
| #ac_cv_use_ipc=sysv
| #ac_cv_use_ipc=tcp
| gl_cv_func_utimensat_works='needs runtime check'
| gl_cv_next_arpa_inet_h='<arpa/inet.h>'
| gl_cv_next_ctype_h='<ctype.h>'
| ac_cr=`/usr/bin/printf '\r'`
| ac_cs_awk_cr=`/usr/bin/printf 'a\rb'`
| ac_cv_AM_TEST_RUNNER_SHELL=/bin/bash
| ac_cv_build=x86_64-pc-linux-gnu
| ac_cv_build_alias=x86_64-linux-gnu
| ac_cv_build_prog_cc_g=yes
| ac_cv_build_prog_CPP='icc -E'
| ac_cv_c_bigendian=no	# MAY NEED TO CHANGE THIS IN FUTURE
| ac_cv_c_compiler_gnu=yes
| ac_cv_c_const=yes
| ac_cv_c_inline=inline
| ac_cv_c_long_double=yes
| ac_cv_c_restrict=__restrict
| ac_cv_c_stack_direction=-1
| ac_cv_c_stringize=yes
| ac_cv_c_volatile=yes
| ac_cv_cflags_warn_all=-Wall
| ac_cv_computed_gotos=yes
| ac_cv_cxx_compiler_gnu=yes
| ac_cv_cxx_have_class_strstream=yes
| ac_cv_cxx_thread=yes
| ac_cv_dbformat=inode
| ac_cv_decl_map_anon=yes
| ac_cv_dir_trailing_space=yes
| ac_cv_disable_cast_function_type=yes
| ac_cv_disable_missing_field_initializers=yes
| ac_cv_disable_unused_parameter_warning=yes
| ac_cv_disable_unused_result_warning=yes
| ac_cv_enable_implicit_function_declaration_error=yes
| ac_cv_enable_nls=yes
| ac_cv_enable_sign_compare_warning=yes
| ac_cv_extra_warnings=yes
| ac_cv_fc_compiler_gnu=yes
| ac_cv_file__dev_ptmx=yes
| ac_cv_file__dev_urandom=yes
| ac_cv_flock_decl=yes
| ac_cv_func___argz_count=yes
| ac_cv_func___argz_next=yes
| ac_cv_func___argz_stringify=yes
| ac_cv_func___cxa_pure_virtual=yes
| ac_cv_func___fpending=yes
| ac_cv_func___fpu_control=yes
| ac_cv_func___fpurge=yes
| ac_cv_func___freading=yes
| ac_cv_func___fsetlocking=yes
| ac_cv_func___fwriting=yes
| ac_cv_func___fxstat=yes
| ac_cv_func___fxstatat=yes
| ac_cv_func___gmpz_powm_sec=yes
| ac_cv_func___lxstat=yes
| ac_cv_func___xmknod=yes
| ac_cv_func___xmknodat=yes
| ac_cv_func___xpg_strerror_r=yes
| ac_cv_func___xstat=yes
| ac_cv_func__setjmp=yes
| ac_cv_func_acl_delete_def_file=yes
| ac_cv_func_acl_entries=yes
| ac_cv_func_acl_extended_file=yes
| ac_cv_func_acl_free=yes
| ac_cv_func_acl_from_mode=yes
| ac_cv_func_acl_from_text=yes
| ac_cv_func_acl_get_fd=yes
| ac_cv_func_acl_get_file=yes
| ac_cv_func_acl_set_fd=yes
| ac_cv_func_acl_set_file=yes
| ac_cv_func_acosh=yes
| ac_cv_func_alarm=yes
| ac_cv_func_alloca_works=yes
| ac_cv_func_alphasort=yes
| ac_cv_func_ares_set_servers=yes
| ac_cv_func_argz_add=yes
| ac_cv_func_argz_append=yes
| ac_cv_func_argz_count=yes
| ac_cv_func_argz_create_sep=yes
| ac_cv_func_argz_insert=yes
| ac_cv_func_argz_next=yes
| ac_cv_func_argz_replace=yes
| ac_cv_func_argz_stringify=yes
| ac_cv_func_asctime_r=yes
| ac_cv_func_asinh=yes
| ac_cv_func_asprintf=yes
| ac_cv_func_atanh=yes
| ac_cv_func_atexit=yes
| ac_cv_func_attr_copy_file=yes
| ac_cv_func_basename=yes
| ac_cv_func_bcmp=yes
| ac_cv_func_bcopy=yes
| ac_cv_func_brk=yes
| ac_cv_func_bsearch=yes
| ac_cv_func_btowc=yes
| ac_cv_func_bzero=yes
| ac_cv_func_calloc=yes
| ac_cv_func_canonicalize_file_name=yes
| ac_cv_func_cap_get_proc=yes
| ac_cv_func_capset=yes
| ac_cv_func_catgets=yes
| ac_cv_func_cfmakeraw=yes
| ac_cv_func_chdir=yes
| ac_cv_func_chmod=yes
| ac_cv_func_chown=yes
| ac_cv_func_chown_works=yes
| ac_cv_func_chroot=yes
| ac_cv_func_clearenv=yes
| ac_cv_func_clock=yes
| ac_cv_func_clock_getres=yes
| ac_cv_func_clock_gettime=yes
| ac_cv_func_clock_settime=yes
| ac_cv_func_close=yes
| ac_cv_func_closedir=yes
| ac_cv_func_confstr=yes
| ac_cv_func_connect=yes
| ac_cv_func_copysign=yes
| ac_cv_func_ctermid=yes
| ac_cv_func_ctime_r=yes
| ac_cv_func_daemon=yes
| ac_cv_func_dcgettext=yes
| ac_cv_func_difftime=yes
| ac_cv_func_dirfd=yes
| ac_cv_func_dlclose=yes
| ac_cv_func_dlerror=yes
| ac_cv_func_dlopen=yes
| ac_cv_func_dlsym=yes
| ac_cv_func_dprintf=yes
| ac_cv_func_dup=yes
| ac_cv_func_eaccess=yes
| ac_cv_func_endgrent=yes
| ac_cv_func_endpwent=yes
| ac_cv_func_endutxent=yes
| ac_cv_func_epoll_create=yes
| ac_cv_func_erf=yes
| ac_cv_func_erfc=yes
| ac_cv_func_err=yes
| ac_cv_func_errx=yes
| ac_cv_func_euidaccess=yes
| ac_cv_func_execv=yes
| ac_cv_func_explicit_bzero=yes
| ac_cv_func_fabs=yes
| ac_cv_func_faccessat=yes
| ac_cv_func_fallocate=yes
| ac_cv_func_fchdir=yes
| ac_cv_func_fchmod=yes
| ac_cv_func_fchmodat=yes
| ac_cv_func_fchown=yes
| ac_cv_func_fchownat=yes
| ac_cv_func_fcntl=yes
| ac_cv_func_fdatasync=yes
| ac_cv_func_fdopen=yes
| ac_cv_func_fdopendir=yes
| ac_cv_func_feof_unlocked=yes
| ac_cv_func_fexecve=yes
| ac_cv_func_ffs=yes
| ac_cv_func_ffsll=yes
| ac_cv_func_fgets_unlocked=yes
| ac_cv_func_fgetxattr=yes
| ac_cv_func_fileno=yes
| ac_cv_func_finite=yes
| ac_cv_func_flistxattr=yes
| ac_cv_func_flock=yes
| ac_cv_func_flockfile=yes
| ac_cv_func_floor=yes
| ac_cv_func_fmemopen=yes
| ac_cv_func_fmod=yes
| ac_cv_func_fnmatch=yes
| ac_cv_func_fork=yes
| ac_cv_func_fork_works=yes
| ac_cv_func_forkpty=yes
| ac_cv_func_fpathconf=yes
| ac_cv_func_fprintf=yes
| ac_cv_func_freelocale=yes
| ac_cv_func_fremovexattr=yes
| ac_cv_func_fseeko=yes
| ac_cv_func_fsetxattr=yes
| ac_cv_func_fstat=yes
| ac_cv_func_fstatat=yes
| ac_cv_func_fstatfs=yes
| ac_cv_func_fstatvfs=yes
| ac_cv_func_fsync=yes
| ac_cv_func_ftello=yes
| ac_cv_func_ftime=yes
| ac_cv_func_ftruncate=yes
| ac_cv_func_fts_children=yes
| ac_cv_func_fts_read=yes
| ac_cv_func_funlockfile=yes
| ac_cv_func_futimens=yes
| ac_cv_func_futimes=yes
| ac_cv_func_futimesat=yes
| ac_cv_func_gai_strerror=yes
| ac_cv_func_gamma=yes
| ac_cv_func_gdbm_open=yes
| ac_cv_func_getaddrinfo=yes
| ac_cv_func_getc_unlocked=yes
| ac_cv_func_getcchar=yes
| ac_cv_func_getcwd=yes
| ac_cv_func_getdelim=yes
| ac_cv_func_getdomainname=yes
| ac_cv_func_getdtablesize=yes
| ac_cv_func_getegid=yes
| ac_cv_func_getentropy=yes
| ac_cv_func_getenv=yes
| ac_cv_func_geteuid=yes
| ac_cv_func_getgid=yes
| ac_cv_func_getgrgid=yes
| ac_cv_func_getgrnam=yes
| ac_cv_func_getgrouplist=yes
| ac_cv_func_getgroups=yes
| ac_cv_func_getgroups_works=yes
| ac_cv_func_gethostbyaddr=yes
| ac_cv_func_gethostbyname=yes
| ac_cv_func_gethostbyname_r=yes
| ac_cv_func_gethostid=yes
| ac_cv_func_gethostname=yes
| ac_cv_func_getifaddrs=yes
| ac_cv_func_getitimer=yes
| ac_cv_func_getline=yes
| ac_cv_func_getloadavg=yes
| ac_cv_func_getlogin=yes
| ac_cv_func_getlogin_r=yes
| ac_cv_func_getmntent=yes
| ac_cv_func_getnameinfo=yes
| ac_cv_func_getopt=yes
| ac_cv_func_getopt_long=yes
| ac_cv_func_getopt_long_only=yes
| ac_cv_func_getpagesize=yes
| ac_cv_func_getpass=yes
| ac_cv_func_getpeername=yes
| ac_cv_func_getpgid=yes
| ac_cv_func_getpgrp=yes
| ac_cv_func_getpid=yes
| ac_cv_func_getppid=yes
| ac_cv_func_getpriority=yes
| ac_cv_func_getpwent=yes
| ac_cv_func_getpwnam=yes
| ac_cv_func_getpwnam_r=yes
| ac_cv_func_getpwuid=yes
| ac_cv_func_getpwuid_r=yes
| ac_cv_func_getresgid=yes
| ac_cv_func_getresuid=yes
| ac_cv_func_getrlimit=yes
| ac_cv_func_getrusage=yes
| ac_cv_func_getservbyname=yes
| ac_cv_func_getservent=yes
| ac_cv_func_getsgnam=yes
| ac_cv_func_getsid=yes
| ac_cv_func_getspent=yes
| ac_cv_func_getspnam=yes
| ac_cv_func_gettimeofday=yes
| ac_cv_func_getttynam=yes
| ac_cv_func_getuid=yes
| ac_cv_func_getusershell=yes
| ac_cv_func_getutent=yes
| ac_cv_func_getutxent=yes
| ac_cv_func_getwd=yes
| ac_cv_func_getxattr=yes
| ac_cv_func_glob=yes
| ac_cv_func_glob_pattern_p=yes
| ac_cv_func_gmtime=yes
| ac_cv_func_gmtime_r=yes
| ac_cv_func_gnutls_alpn_set_protocols=yes
| ac_cv_func_gnutls_ocsp_req_init=yes
| ac_cv_func_gnutls_priority_set_direct=yes
| ac_cv_func_grantpt=yes
| ac_cv_func_group_member=yes
| ac_cv_func_gzbuffer=yes
| ac_cv_func_gzsetparams=yes
| ac_cv_func_hasmntopt=yes
| ac_cv_func_htons=yes
| ac_cv_func_hypot=yes
| ac_cv_func_iconv=yes
| ac_cv_func_iconv_open=yes
| ac_cv_func_if_nameindex=yes
| ac_cv_func_if_nametoindex=yes
| ac_cv_func_imaxdiv=yes
| ac_cv_func_index=yes
| ac_cv_func_inet_aton=yes
| ac_cv_func_inet_ntop=yes
| ac_cv_func_inet_pton=yes
| ac_cv_func_initgroups=yes
| ac_cv_func_initscr=yes
| ac_cv_func_inotify_init=yes
| ac_cv_func_insque=yes
| ac_cv_func_ioctl=yes
| ac_cv_func_ioperm=yes
| ac_cv_func_iopl=yes
| ac_cv_func_isalpha=yes
| ac_cv_func_isascii=yes
| ac_cv_func_isatty=yes
| ac_cv_func_isblank=yes
| ac_cv_func_isgraph=yes
| ac_cv_func_isinf=yes
| ac_cv_func_isnan=yes
| ac_cv_func_isnand=yes
| ac_cv_func_isprint=yes
| ac_cv_func_isspace=yes
| ac_cv_func_iswalnum=yes
| ac_cv_func_iswblank=yes
| ac_cv_func_iswcntrl=yes
| ac_cv_func_iswctype=yes
| ac_cv_func_iswdigit=yes
| ac_cv_func_iswgraph=yes
| ac_cv_func_iswlower=yes
| ac_cv_func_iswprint=yes
| ac_cv_func_iswpunct=yes
| ac_cv_func_iswspace=yes
| ac_cv_func_iswupper=yes
| ac_cv_func_iswxdigit=yes
| ac_cv_func_isxdigit=yes
| ac_cv_func_kill=yes
| ac_cv_func_killpg=yes
| ac_cv_func_lchown=yes
| ac_cv_func_ldap_init_fd=yes
| ac_cv_func_ldap_url_parse=yes
| ac_cv_func_lgamma=yes
| ac_cv_func_lgetxattr=yes
| ac_cv_func_link=yes
| ac_cv_func_linkat=yes
| ac_cv_func_listxattr=yes
| ac_cv_func_llistxattr=yes
| ac_cv_func_llseek=yes
| ac_cv_func_localeconv=yes
| ac_cv_func_localtime=yes
| ac_cv_func_localtime_r=yes
| ac_cv_func_lockf=yes
| ac_cv_func_lremovexattr=yes
| ac_cv_func_lseek=yes
| ac_cv_func_lsetxattr=yes
| ac_cv_func_lstat=yes
| ac_cv_func_lstat_dereferences_slashed_symlink=yes
| ac_cv_func_lutimes=yes
| ac_cv_func_madvise=yes
| ac_cv_func_mallinfo=yes
| ac_cv_func_matchpathcon_init_prefix=yes
| ac_cv_func_matherr=yes
| ac_cv_func_mblen=yes
| ac_cv_func_mbrlen=yes
| ac_cv_func_mbrtowc=yes
| ac_cv_func_mbsinit=yes
| ac_cv_func_mbsnrtowcs=yes
| ac_cv_func_mbsrtowcs=yes
| ac_cv_func_mbstowcs=yes
| ac_cv_func_mbtowc=yes
| ac_cv_func_memchr=yes
| ac_cv_func_memcmp=yes
| ac_cv_func_memcmp_working=yes
| ac_cv_func_memcpy=yes
| ac_cv_func_memmem=yes
| ac_cv_func_memmove=yes
| ac_cv_func_mempcpy=yes
| ac_cv_func_memrchr=yes
| ac_cv_func_memset=yes
| ac_cv_func_mkdir=yes
| ac_cv_func_mkdirat=yes
| ac_cv_func_mkdtemp=yes
| ac_cv_func_mkfifo=yes
| ac_cv_func_mkfifoat=yes
| ac_cv_func_mknod=yes
| ac_cv_func_mknodat=yes
| ac_cv_func_mkostemp=yes
| ac_cv_func_mkstemp=yes
| ac_cv_func_mkstemps=yes
| ac_cv_func_mktemp=yes
| ac_cv_func_mktime=yes
| ac_cv_func_mmap=yes
| ac_cv_func_mmap_anon=yes
| ac_cv_func_mmap_dev_zero=yes
| ac_cv_func_mmap_file=yes
| ac_cv_func_mmap_fixed_mapped=yes
| ac_cv_func_mode_to_security_class=yes
| ac_cv_func_mprotect=yes
| ac_cv_func_mremap=yes
| ac_cv_func_msync=yes
| ac_cv_func_mtrace=yes
| ac_cv_func_munmap=yes
| ac_cv_func_nanosleep=yes
| ac_cv_func_newlocale=yes
| ac_cv_func_nice=yes
| ac_cv_func_nl_langinfo=yes
| ac_cv_func_ntohl=yes
| ac_cv_func_ntohs=yes
| ac_cv_func_ntp_gettime=yes
| ac_cv_func_obstack=yes
| ac_cv_func_obstack_free=yes
| ac_cv_func_obstack_printf=yes
| ac_cv_func_on_exit=yes
| ac_cv_func_open=yes
| ac_cv_func_open_memstream=yes
| ac_cv_func_openat=yes
| ac_cv_func_opendir=yes
| ac_cv_func_pathconf=yes
| ac_cv_func_pause=yes
| ac_cv_func_pcre_compile=yes
| ac_cv_func_pcre_exec=yes
| ac_cv_func_pcre_study=yes
| ac_cv_func_personality=yes
| ac_cv_func_pipe=yes
| ac_cv_func_poll=yes
| ac_cv_func_popen=yes
| ac_cv_func_posix_fadvise=yes
| ac_cv_func_posix_fallocate=yes
| ac_cv_func_posix_memalign=yes
| ac_cv_func_posix_openpt=yes
| ac_cv_func_posix_spawn=yes
| ac_cv_func_pow=yes
| ac_cv_func_prctl=yes
| ac_cv_func_pread=yes
| ac_cv_func_preadv=yes
| ac_cv_func_printf=yes
| ac_cv_func_prlimit=yes
| ac_cv_func_pselect=yes
| ac_cv_func_psignal=yes
| ac_cv_func_psl_latest=yes
| ac_cv_func_pthread_atfork=yes
| ac_cv_func_pthread_condattr_setclock=yes
| ac_cv_func_pthread_create=yes
| ac_cv_func_pthread_getcpuclockid=yes
| ac_cv_func_pthread_kill=yes
| ac_cv_func_pthread_sigmask=yes
| ac_cv_func_ptsname=yes
| ac_cv_func_putenv=yes
| ac_cv_func_putwc=yes
| ac_cv_func_pwrite=yes
| ac_cv_func_pwritev=yes
| ac_cv_func_qsort=yes
| ac_cv_func_qsort_r=yes
| ac_cv_func_raise=yes
| ac_cv_func_rand=yes
| ac_cv_func_rand_r=yes
| ac_cv_func_random=yes
| ac_cv_func_rawmemchr=yes
| ac_cv_func_readdir=yes
| ac_cv_func_readlink=yes
| ac_cv_func_readlinkat=yes
| ac_cv_func_readv=yes
| ac_cv_func_reallocarray=yes
| ac_cv_func_realpath=yes
| ac_cv_func_reboot=yes
| ac_cv_func_regcomp=yes
| ac_cv_func_regerror=yes
| ac_cv_func_regexec=yes
| ac_cv_func_regfree=yes
| ac_cv_func_remove=yes
| ac_cv_func_removexattr=yes
| ac_cv_func_rename=yes
| ac_cv_func_renameat=yes
| ac_cv_func_resize_term=yes
| ac_cv_func_rewinddir=yes
| ac_cv_func_rindex=yes
| ac_cv_func_rl_completion_matches=yes
| ac_cv_func_rmdir=yes
| ac_cv_func_round=yes
| ac_cv_func_rpmatch=yes
| ac_cv_func_sbrk=yes
| ac_cv_func_scalbn=yes
| ac_cv_func_scandir=yes
| ac_cv_func_scandirat=yes
| ac_cv_func_sched_get_priority_max=yes
| ac_cv_func_sched_getaffinity=yes
| ac_cv_func_sched_rr_get_interval=yes
| ac_cv_func_sched_setaffinity=yes
| ac_cv_func_sched_setparam=yes
| ac_cv_func_sched_setscheduler=yes
| ac_cv_func_secure_getenv=yes
| ac_cv_func_select=yes
| ac_cv_func_sem_getvalue=yes
| ac_cv_func_sem_open=yes
| ac_cv_func_sem_timedwait=yes
| ac_cv_func_sem_unlink=yes
| ac_cv_func_sendfile=yes
| ac_cv_func_setbuf=yes
| ac_cv_func_setbuffer=yes
| ac_cv_func_setcchar=yes
| ac_cv_func_setegid=yes
| ac_cv_func_setenv=yes
| ac_cv_func_seteuid=yes
| ac_cv_func_setfsgid=yes
| ac_cv_func_setfsuid=yes
| ac_cv_func_setgid=yes
| ac_cv_func_setgroups=yes
| ac_cv_func_sethostname=yes
| ac_cv_func_setitimer=yes
| ac_cv_func_setlinebuf=yes
| ac_cv_func_setlocale=yes
| ac_cv_func_setns=yes
| ac_cv_func_setpgid=yes
| ac_cv_func_setpgrp=yes
| ac_cv_func_setpriority=yes
| ac_cv_func_setregid=yes
| ac_cv_func_setresgid=yes
| ac_cv_func_setresuid=yes
| ac_cv_func_setreuid=yes
| ac_cv_func_setrlimit=yes
| ac_cv_func_setsid=yes
| ac_cv_func_settimeofday=yes
| ac_cv_func_setuid=yes
| ac_cv_func_setupterm=yes
| ac_cv_func_setutxent=yes
| ac_cv_func_setvbuf=yes
| ac_cv_func_setxattr=yes
| ac_cv_func_shmat=yes
| ac_cv_func_shutdown=yes
| ac_cv_func_sigaction=yes
| ac_cv_func_sigaltstack=yes
| ac_cv_func_sigblock=yes
| ac_cv_func_sighold=yes
| ac_cv_func_siginterrupt=yes
| ac_cv_func_signal=yes
| ac_cv_func_signgam=yes
| ac_cv_func_sigpending=yes
| ac_cv_func_sigprocmask=yes
| ac_cv_func_sigqueue=yes
| ac_cv_func_sigrelse=yes
| ac_cv_func_sigset=yes
| ac_cv_func_sigsetmask=yes
| ac_cv_func_sigstack=yes
| ac_cv_func_sigsuspend=yes
| ac_cv_func_sigtimedwait=yes
| ac_cv_func_sigwait=yes
| ac_cv_func_sigwaitinfo=yes
| ac_cv_func_sleep=yes
| ac_cv_func_snprintf=yes
| ac_cv_func_socket=yes
| ac_cv_func_sprintf=yes
| ac_cv_func_srand=yes
| ac_cv_func_srandom=yes
| ac_cv_func_sscanf=yes
| ac_cv_func_SSL_get_shutdown=yes
| ac_cv_func_stat=yes
| ac_cv_func_statvfs=yes
| ac_cv_func_stime=yes
| ac_cv_func_stpcpy=yes
| ac_cv_func_stpncpy=yes
| ac_cv_func_strcasecmp=yes
| ac_cv_func_strcasestr=yes
| ac_cv_func_strchr=yes
| ac_cv_func_strchrnul=yes
| ac_cv_func_strcoll=yes
| ac_cv_func_strcoll_works=yes
| ac_cv_func_strcspn=yes
| ac_cv_func_strdup=yes
| ac_cv_func_strerror=yes
| ac_cv_func_strerror_r=yes
| ac_cv_func_strerror_r_char_p=yes
| ac_cv_func_strftime=yes
| ac_cv_func_strncasecmp=yes
| ac_cv_func_strncmp_works=yes
| ac_cv_func_strndup=yes
| ac_cv_func_strnlen=yes
| ac_cv_func_strnlen_working=yes
| ac_cv_func_strpbrk=yes
| ac_cv_func_strptime=yes
| ac_cv_func_strrchr=yes
| ac_cv_func_strsep=yes
| ac_cv_func_strsignal=yes
| ac_cv_func_strstr=yes
| ac_cv_func_strtod=yes
| ac_cv_func_strtof=yes
| ac_cv_func_strtoimax=yes
| ac_cv_func_strtok_r=yes
| ac_cv_func_strtol=yes
| ac_cv_func_strtold_l=yes
| ac_cv_func_strtoll=yes
| ac_cv_func_strtoul=yes
| ac_cv_func_strtoull=yes
| ac_cv_func_strtoumax=yes
| ac_cv_func_strverscmp=yes
| ac_cv_func_strxfrm_l=yes
| ac_cv_func_swapoff=yes
| ac_cv_func_swapon=yes
| ac_cv_func_symlink=yes
| ac_cv_func_symlinkat=yes
| ac_cv_func_sync=yes
| ac_cv_func_syncfs=yes
| ac_cv_func_sysconf=yes
| ac_cv_func_sysctl=yes
| ac_cv_func_sysinfo=yes
| ac_cv_func_syslog=yes
| ac_cv_func_system=yes
| ac_cv_func_tcgetattr=yes
| ac_cv_func_tcgetpgrp=yes
| ac_cv_func_tcsetattr=yes
| ac_cv_func_tcsetpgrp=yes
| ac_cv_func_tdestroy=yes
| ac_cv_func_tempnam=yes
| ac_cv_func_tgamma=yes
| ac_cv_func_tgetent=yes
| ac_cv_func_tigetflag=yes
| ac_cv_func_tigetnum=yes
| ac_cv_func_tigetstr=yes
| ac_cv_func_time=yes
| ac_cv_func_timegm=yes
| ac_cv_func_timelocal=yes
| ac_cv_func_timer_settime=yes
| ac_cv_func_times=yes
| ac_cv_func_tmpfile=yes
| ac_cv_func_tmpnam=yes
| ac_cv_func_tmpnam_r=yes
| ac_cv_func_towlower=yes
| ac_cv_func_towupper=yes
| ac_cv_func_truncate=yes
| ac_cv_func_tsearch=yes
| ac_cv_func_ttyname=yes
| ac_cv_func_tzset=yes
| ac_cv_func_ulimit=yes
| ac_cv_func_umask=yes
| ac_cv_func_uname=yes
| ac_cv_func_unlink=yes
| ac_cv_func_unlinkat=yes
| ac_cv_func_unlockpt=yes
| ac_cv_func_unsetenv=yes
| ac_cv_func_unshare=yes
| ac_cv_func_updwtmp=yes
| ac_cv_func_updwtmpx=yes
| ac_cv_func_use_default_colors=yes
| ac_cv_func_uselocale=yes
| ac_cv_func_usleep=yes
| ac_cv_func_utime=yes
| ac_cv_func_utime_null=yes
| ac_cv_func_utimensat=yes
| ac_cv_func_utimes=yes
| ac_cv_func_utmpname=yes
| ac_cv_func_utmpxname=yes
| ac_cv_func_vasprintf=yes
| ac_cv_func_vfork=yes
| ac_cv_func_vfork_works=yes
| ac_cv_func_vfprintf=yes
| ac_cv_func_vprintf=yes
| ac_cv_func_vsnprintf=yes
| ac_cv_func_vsprintf=yes
| ac_cv_func_vwarnx=yes
| ac_cv_func_waddwstr=yes
| ac_cv_func_waitid=yes
| ac_cv_func_waitpid=yes
| ac_cv_func_warn=yes
| ac_cv_func_warnx=yes
| ac_cv_func_wcrtomb=yes
| ac_cv_func_wcschr=yes
| ac_cv_func_wcscoll=yes
| ac_cv_func_wcscpy=yes
| ac_cv_func_wcsdup=yes
| ac_cv_func_wcsftime=yes
| ac_cv_func_wcslen=yes
| ac_cv_func_wcsncmp=yes
| ac_cv_func_wcsncpy=yes
| ac_cv_func_wcsnlen=yes
| ac_cv_func_wcsrtombs=yes
| ac_cv_func_wcstombs=yes
| ac_cv_func_wcswidth=yes
| ac_cv_func_wcsxfrm=yes
| ac_cv_func_wctob=yes
| ac_cv_func_wctomb=yes
| ac_cv_func_wctype=yes
| ac_cv_func_wcwidth=yes
| ac_cv_func_wget_wch=yes
| ac_cv_func_win_wch=yes
| ac_cv_func_wmemchr=yes
| ac_cv_func_wmemcmp=yes
| ac_cv_func_wmemcpy=yes
| ac_cv_func_wmemmove=yes
| ac_cv_func_wmempcpy=yes
| ac_cv_func_wmemset=yes
| ac_cv_func_working_mktime=yes
| ac_cv_func_writev=yes
| ac_cv_has_makedev=yes
| ac_cv_have_decl___fpending=yes
| ac_cv_have_decl___fsetlocking=yes
| ac_cv_have_decl__Exit=yes
| ac_cv_have_decl__PATH_BSHELL=yes
| ac_cv_have_decl__PATH_DEVNULL=yes
| ac_cv_have_decl__PATH_TTY=yes
| ac_cv_have_decl__sys_siglist=yes
| ac_cv_have_decl_accept=yes
| ac_cv_have_decl_alarm=yes
| ac_cv_have_decl_alphasort=yes
| ac_cv_have_decl_asprintf=yes
| ac_cv_have_decl_atoi=yes
| ac_cv_have_decl_atoll=yes
| ac_cv_have_decl_AUDIT_USER_TTY=yes
| ac_cv_have_decl_basename=yes
| ac_cv_have_decl_basename_char_p_=yes
| ac_cv_have_decl_bind=yes
| ac_cv_have_decl_btowc=yes
| ac_cv_have_decl_calloc=yes
| ac_cv_have_decl_canonicalize_file_name=yes
| ac_cv_have_decl_chdir=yes
| ac_cv_have_decl_chown=yes
| ac_cv_have_decl_clearerr_unlocked=yes
| ac_cv_have_decl_CLOCK_MONOTONIC=yes
| ac_cv_have_decl_closedir=yes
| ac_cv_have_decl_confstr=yes
| ac_cv_have_decl_connect=yes
| ac_cv_have_decl_CPU_ALLOC=yes
| ac_cv_have_decl_daemon=yes
| ac_cv_have_decl_daylight=yes
| ac_cv_have_decl_dirfd=yes
| ac_cv_have_decl_dlerror=yes
| ac_cv_have_decl_dlopen=yes
| ac_cv_have_decl_dlsym=yes
| ac_cv_have_decl_dprintf=yes
| ac_cv_have_decl_dup=yes
| ac_cv_have_decl_duplocale=yes
| ac_cv_have_decl_endusershell=yes
| ac_cv_have_decl_environ=yes
| ac_cv_have_decl_errno=yes
| ac_cv_have_decl_euidaccess=yes
| ac_cv_have_decl_exit=yes
| ac_cv_have_decl_faccessat=yes
| ac_cv_have_decl_fchdir=yes
| ac_cv_have_decl_fchmodat=yes
| ac_cv_have_decl_fchownat=yes
| ac_cv_have_decl_fcntl=yes
| ac_cv_have_decl_fdatasync=yes
| ac_cv_have_decl_fdopendir=yes
| ac_cv_have_decl_feof_unlocked=yes
| ac_cv_have_decl_ferror_unlocked=yes
| ac_cv_have_decl_fflush_unlocked=yes
| ac_cv_have_decl_ffs=yes
| ac_cv_have_decl_ffsl=yes
| ac_cv_have_decl_ffsll=yes
| ac_cv_have_decl_fgets_unlocked=yes
| ac_cv_have_decl_flockfile=yes
| ac_cv_have_decl_fprintf=yes
| ac_cv_have_decl_fputc_unlocked=yes
| ac_cv_have_decl_fputs_unlocked=yes
| ac_cv_have_decl_fread_unlocked=yes
| ac_cv_have_decl_free=yes
| ac_cv_have_decl_freeaddrinfo=yes
| ac_cv_have_decl_frexpl=yes
| ac_cv_have_decl_fseeko=yes
| ac_cv_have_decl_fstat=yes
| ac_cv_have_decl_fstatat=yes
| ac_cv_have_decl_fsync=yes
| ac_cv_have_decl_ftello=yes
| ac_cv_have_decl_ftruncate=yes
| ac_cv_have_decl_funlockfile=yes
| ac_cv_have_decl_futimens=yes
| ac_cv_have_decl_fwrite_unlocked=yes
| ac_cv_have_decl_gai_strerror=yes
| ac_cv_have_decl_getaddrinfo=yes
| ac_cv_have_decl_getc_unlocked=yes
| ac_cv_have_decl_getchar_unlocked=yes
| ac_cv_have_decl_getcwd=yes
| ac_cv_have_decl_getdelim=yes
| ac_cv_have_decl_getdomainname=yes
| ac_cv_have_decl_getdtablesize=yes
| ac_cv_have_decl_getenv=yes
| ac_cv_have_decl_geteuid=yes
| ac_cv_have_decl_getgrgid=yes
| ac_cv_have_decl_getgrnam=yes
| ac_cv_have_decl_getgroups=yes
| ac_cv_have_decl_gethostname=yes
| ac_cv_have_decl_getline=yes
| ac_cv_have_decl_getloadavg=yes
| ac_cv_have_decl_getlogin=yes
| ac_cv_have_decl_getlogin_r=yes
| ac_cv_have_decl_getnameinfo=yes
| ac_cv_have_decl_getopt=yes
| ac_cv_have_decl_getpagesize=yes
| ac_cv_have_decl_getpass=yes
| ac_cv_have_decl_getpeername=yes
| ac_cv_have_decl_getpwnam=yes
| ac_cv_have_decl_getpwuid=yes
| ac_cv_have_decl_getpwuid_r=yes
| ac_cv_have_decl_getrusage=yes
| ac_cv_have_decl_getsockname=yes
| ac_cv_have_decl_getsockopt=yes
| ac_cv_have_decl_getsubopt=yes
| ac_cv_have_decl_gettimeofday=yes
| ac_cv_have_decl_getuid=yes
| ac_cv_have_decl_getusershell=yes
| ac_cv_have_decl_getutent=yes
| ac_cv_have_decl_grantpt=yes
| ac_cv_have_decl_group_member=yes
| ac_cv_have_decl_h_errno=yes
| ac_cv_have_decl_imaxabs=yes
| ac_cv_have_decl_imaxdiv=yes
| ac_cv_have_decl_inet_ntop=yes
| ac_cv_have_decl_inet_pton=yes
| ac_cv_have_decl_initstate=yes
| ac_cv_have_decl_initstate_r=yes
| ac_cv_have_decl_ioctl=yes
| ac_cv_have_decl_isatty=yes
| ac_cv_have_decl_isblank=yes
| ac_cv_have_decl_isfinite=yes
| ac_cv_have_decl_isinf=yes
| ac_cv_have_decl_isnan=yes
| ac_cv_have_decl_iswblank=yes
| ac_cv_have_decl_iswctype=yes
| ac_cv_have_decl_lchmod=yes
| ac_cv_have_decl_lchown=yes
| ac_cv_have_decl_ldexpl=yes
| ac_cv_have_decl_link=yes
| ac_cv_have_decl_linkat=yes
| ac_cv_have_decl_listen=yes
| ac_cv_have_decl_localtime_r=yes
| ac_cv_have_decl_lseek=yes
| ac_cv_have_decl_lstat=yes
| ac_cv_have_decl_makedev=yes
| ac_cv_have_decl_malloc=yes
| ac_cv_have_decl_mbrlen=yes
| ac_cv_have_decl_mbrtowc=yes
| ac_cv_have_decl_mbsinit=yes
| ac_cv_have_decl_mbsnrtowcs=yes
| ac_cv_have_decl_mbsrtowcs=yes
| ac_cv_have_decl_memchr=yes
| ac_cv_have_decl_memmem=yes
| ac_cv_have_decl_mempcpy=yes
| ac_cv_have_decl_memrchr=yes
| ac_cv_have_decl_mkdirat=yes
| ac_cv_have_decl_mkdtemp=yes
| ac_cv_have_decl_mkfifo=yes
| ac_cv_have_decl_mkfifoat=yes
| ac_cv_have_decl_mknod=yes
| ac_cv_have_decl_mknodat=yes
| ac_cv_have_decl_mkostemp=yes
| ac_cv_have_decl_mkostemps=yes
| ac_cv_have_decl_mkstemp=yes
| ac_cv_have_decl_mkstemps=yes
| ac_cv_have_decl_mpz_inits=yes
| ac_cv_have_decl_nl_langinfo=yes
| ac_cv_have_decl_O_NOFOLLOW=yes
| ac_cv_have_decl_obstack_printf=yes
| ac_cv_have_decl_offsetof=yes
| ac_cv_have_decl_openat=yes
| ac_cv_have_decl_opendir=yes
| ac_cv_have_decl_P_tmpdir=yes
| ac_cv_have_decl_pclose=yes
| ac_cv_have_decl_pipe=yes
| ac_cv_have_decl_popen=yes
| ac_cv_have_decl_posix_openpt=yes
| ac_cv_have_decl_PR_SET_NAME=yes
| ac_cv_have_decl_pread=yes
| ac_cv_have_decl_PRIdMAX=yes
| ac_cv_have_decl_printf=yes
| ac_cv_have_decl_program_invocation_name=yes
| ac_cv_have_decl_program_invocation_short_name=yes
| ac_cv_have_decl_pselect=yes
| ac_cv_have_decl_pthread_sigmask=yes
| ac_cv_have_decl_ptsname=yes
| ac_cv_have_decl_ptsname_r=yes
| ac_cv_have_decl_putc_unlocked=yes
| ac_cv_have_decl_putchar_unlocked=yes
| ac_cv_have_decl_pwrite=yes
| ac_cv_have_decl_qsort_r=yes
| ac_cv_have_decl_random=yes
| ac_cv_have_decl_random_r=yes
| ac_cv_have_decl_rawmemchr=yes
| ac_cv_have_decl_readdir=yes
| ac_cv_have_decl_readlink=yes
| ac_cv_have_decl_readlinkat=yes
| ac_cv_have_decl_realloc=yes
| ac_cv_have_decl_reallocarray=yes
| ac_cv_have_decl_realpath=yes
| ac_cv_have_decl_recv=yes
| ac_cv_have_decl_recvfrom=yes
| ac_cv_have_decl_renameat=yes
| ac_cv_have_decl_rewinddir=yes
| ac_cv_have_decl_rmdir=yes
| ac_cv_have_decl_rpmatch=yes
| ac_cv_have_decl_RTLD_DEEPBIND=yes
| ac_cv_have_decl_RTLD_GLOBAL=yes
| ac_cv_have_decl_RTLD_LAZY=yes
| ac_cv_have_decl_RTLD_LOCAL=yes
| ac_cv_have_decl_RTLD_NODELETE=yes
| ac_cv_have_decl_RTLD_NOLOAD=yes
| ac_cv_have_decl_RTLD_NOW=yes
| ac_cv_have_decl_sbrk=yes
| ac_cv_have_decl_scandir=yes
| ac_cv_have_decl_secure_getenv=yes
| ac_cv_have_decl_select=yes
| ac_cv_have_decl_send=yes
| ac_cv_have_decl_sendto=yes
| ac_cv_have_decl_setenv=yes
| ac_cv_have_decl_sethostname=yes
| ac_cv_have_decl_setlocale=yes
| ac_cv_have_decl_setregid=yes
| ac_cv_have_decl_setsockopt=yes
| ac_cv_have_decl_setstate=yes
| ac_cv_have_decl_setstate_r=yes
| ac_cv_have_decl_setusershell=yes
| ac_cv_have_decl_shutdown=yes
| ac_cv_have_decl_sigaction=yes
| ac_cv_have_decl_sigaddset=yes
| ac_cv_have_decl_sigaltstack=yes
| ac_cv_have_decl_sigdelset=yes
| ac_cv_have_decl_sigemptyset=yes
| ac_cv_have_decl_sigfillset=yes
| ac_cv_have_decl_sigismember=yes
| ac_cv_have_decl_sigpending=yes
| ac_cv_have_decl_sigprocmask=yes
| ac_cv_have_decl_sleep=yes
| ac_cv_have_decl_snprintf=yes
| ac_cv_have_decl_SO_PASSCRED=yes
| ac_cv_have_decl_SOCK_CLOEXEC=yes
| ac_cv_have_decl_SOCK_NONBLOCK=yes
| ac_cv_have_decl_socket=yes
| ac_cv_have_decl_srandom=yes
| ac_cv_have_decl_srandom_r=yes
| ac_cv_have_decl_stat=yes
| ac_cv_have_decl_stpcpy=yes
| ac_cv_have_decl_stpncpy=yes
| ac_cv_have_decl_strcasecmp=yes
| ac_cv_have_decl_strcasestr=yes
| ac_cv_have_decl_strchrnul=yes
| ac_cv_have_decl_strcoll=yes
| ac_cv_have_decl_strcpy=yes
| ac_cv_have_decl_strdup=yes
| ac_cv_have_decl_strerror=yes
| ac_cv_have_decl_strerror_r=yes
| ac_cv_have_decl_strncasecmp=yes
| ac_cv_have_decl_strncat=yes
| ac_cv_have_decl_strndup=yes
| ac_cv_have_decl_strnlen=yes
| ac_cv_have_decl_strpbrk=yes
| ac_cv_have_decl_strsep=yes
| ac_cv_have_decl_strsignal=yes
| ac_cv_have_decl_strstr=yes
| ac_cv_have_decl_strtod=yes
| ac_cv_have_decl_strtoimax=yes
| ac_cv_have_decl_strtok_r=yes
| ac_cv_have_decl_strtol=yes
| ac_cv_have_decl_strtold=yes
| ac_cv_have_decl_strtoll=yes
| ac_cv_have_decl_strtoul=yes
| ac_cv_have_decl_strtoull=yes
| ac_cv_have_decl_strtoumax=yes
| ac_cv_have_decl_strverscmp=yes
| ac_cv_have_decl_symlink=yes
| ac_cv_have_decl_symlinkat=yes
| ac_cv_have_decl_sys_errlist=yes
| ac_cv_have_decl_sys_nerr=yes
| ac_cv_have_decl_sys_siglist=yes
| ac_cv_have_decl_TAILQ_CONCAT=yes
| ac_cv_have_decl_TAILQ_PREV=yes
| ac_cv_have_decl_time=yes
| ac_cv_have_decl_TIOCGLCKTRMIOS=yes
| ac_cv_have_decl_TIOCNOTTY=yes
| ac_cv_have_decl_tmpfile=yes
| ac_cv_have_decl_towctrans=yes
| ac_cv_have_decl_truncate=yes
| ac_cv_have_decl_ttyname=yes
| ac_cv_have_decl_ttyname_r=yes
| ac_cv_have_decl_tzname=yes
| ac_cv_have_decl_unlink=yes
| ac_cv_have_decl_unlinkat=yes
| ac_cv_have_decl_unlockpt=yes
| ac_cv_have_decl_unsetenv=yes
| ac_cv_have_decl_usleep=yes
| ac_cv_have_decl_utime=yes
| ac_cv_have_decl_utimensat=yes
| ac_cv_have_decl_vasprintf=yes
| ac_cv_have_decl_vdprintf=yes
| ac_cv_have_decl_vsnprintf=yes
| ac_cv_have_decl_waitpid=yes
| ac_cv_have_decl_WCOREDUMP=yes
| ac_cv_have_decl_wcpcpy=yes
| ac_cv_have_decl_wcpncpy=yes
| ac_cv_have_decl_wcrtomb=yes
| ac_cv_have_decl_wcscasecmp=yes
| ac_cv_have_decl_wcscat=yes
| ac_cv_have_decl_wcschr=yes
| ac_cv_have_decl_wcscmp=yes
| ac_cv_have_decl_wcscoll=yes
| ac_cv_have_decl_wcscpy=yes
| ac_cv_have_decl_wcscspn=yes
| ac_cv_have_decl_wcsdup=yes
| ac_cv_have_decl_wcsftime=yes
| ac_cv_have_decl_wcslen=yes
| ac_cv_have_decl_wcsncasecmp=yes
| ac_cv_have_decl_wcsncat=yes
| ac_cv_have_decl_wcsncmp=yes
| ac_cv_have_decl_wcsncpy=yes
| ac_cv_have_decl_wcsnlen=yes
| ac_cv_have_decl_wcsnrtombs=yes
| ac_cv_have_decl_wcspbrk=yes
| ac_cv_have_decl_wcsrchr=yes
| ac_cv_have_decl_wcsrtombs=yes
| ac_cv_have_decl_wcsspn=yes
| ac_cv_have_decl_wcsstr=yes
| ac_cv_have_decl_wcstok=yes
| ac_cv_have_decl_wcswidth=yes
| ac_cv_have_decl_wcsxfrm=yes
| ac_cv_have_decl_wctob=yes
| ac_cv_have_decl_wctrans=yes
| ac_cv_have_decl_wctype=yes
| ac_cv_have_decl_wcwidth=yes
| ac_cv_have_decl_wmemchr=yes
| ac_cv_have_decl_wmemcmp=yes
| ac_cv_have_decl_wmemcpy=yes
| ac_cv_have_decl_wmemmove=yes
| ac_cv_have_decl_wmemset=yes
| ac_cv_have_dev_ptmx=yes
| ac_cv_have_getc_unlocked=yes
| ac_cv_have_long_long_format=yes
| ac_cv_have_sig_atomic_t=yes
| ac_cv_have_size_t_format=yes
| ac_cv_header_acl_libacl_h=yes
| ac_cv_header_alloca_h=yes
| ac_cv_header_apr_memcache_h=yes
| ac_cv_header_argz_h=yes
| ac_cv_header_arpa_inet_h=yes
| ac_cv_header_arpa_nameser_h=yes
| ac_cv_header_arpa_tftp_h=yes
| ac_cv_header_asm_types_h=yes
| ac_cv_header_assert_h=yes
| ac_cv_header_attr_error_context_h=yes
| ac_cv_header_attr_libattr_h=yes
| ac_cv_header_attr_xattr_h=yes
| ac_cv_header_bluetooth_bluetooth_h=yes
| ac_cv_header_byteswap_h=yes
| ac_cv_header_bzlib_h=yes
| ac_cv_header_cmath=yes
| ac_cv_header_crypt_h=yes
| ac_cv_header_ctype_h=yes
| ac_cv_header_curses_h=yes
| ac_cv_header_curses_solaris=yes
| ac_cv_header_cxxabi_h=yes
| ac_cv_header_dirent_dirent_h=yes
| ac_cv_header_dirent_h=yes
| ac_cv_header_dlfcn_h=yes
| ac_cv_header_elf_h=yes
| ac_cv_header_endian_h=yes
| ac_cv_header_err_h=yes
| ac_cv_header_errno_h=yes
| ac_cv_header_error_h=yes
| ac_cv_header_event_h=yes
| ac_cv_header_ext_hash_map=yes
| ac_cv_header_ext_hash_set=yes
| ac_cv_header_fcntl_h=yes
| ac_cv_header_features_h=yes
| ac_cv_header_float_h=yes
| ac_cv_header_fnmatch_h=yes
| ac_cv_header_form_h=yes
| ac_cv_header_fts_h=yes
| ac_cv_header_gdbm_h=yes
| ac_cv_header_getopt_h=yes
| ac_cv_header_glob_h=yes
| ac_cv_header_gmp_h=yes
| ac_cv_header_gpm_h=yes
| ac_cv_header_grp_h=yes
| ac_cv_header_gssapi_gssapi_generic_h=yes
| ac_cv_header_gssapi_gssapi_h=yes
| ac_cv_header_iconv_h=yes
| ac_cv_header_ifaddrs_h=yes
| ac_cv_header_immintrin_h=yes
| ac_cv_header_inttypes_h=yes
| ac_cv_header_iostream=yes
| ac_cv_header_langinfo_h=yes
| ac_cv_header_lastlog_h=yes
| ac_cv_header_libgen_h=yes
| ac_cv_header_libintl_h=yes
| ac_cv_header_librtmp_rtmp_h=yes
| ac_cv_header_limits_h=yes
| ac_cv_header_linux_blkpg_h=yes
| ac_cv_header_linux_blkzoned_h=yes
| ac_cv_header_linux_btrfs_h=yes
| ac_cv_header_linux_can_bcm_h=yes
| ac_cv_header_linux_can_h=yes
| ac_cv_header_linux_can_raw_h=yes
| ac_cv_header_linux_cdrom_h=yes
| ac_cv_header_linux_falloc_h=yes
| ac_cv_header_linux_fd_h=yes
| ac_cv_header_linux_fiemap_h=yes
| ac_cv_header_linux_fs_h=yes
| ac_cv_header_linux_gsmmux_h=yes
| ac_cv_header_linux_major_h=yes
| ac_cv_header_linux_net_namespace_h=yes
| ac_cv_header_linux_netlink_h=yes
| ac_cv_header_linux_random_h=yes
| ac_cv_header_linux_raw_h=yes
| ac_cv_header_linux_securebits_h=yes
| ac_cv_header_linux_tcp_h=yes
| ac_cv_header_linux_tiocl_h=yes
| ac_cv_header_linux_tipc_h=yes
| ac_cv_header_linux_version_h=yes
| ac_cv_header_linux_vm_sockets_h=yes
| ac_cv_header_linux_watchdog_h=yes
| ac_cv_header_locale_h=yes
| ac_cv_header_lzma_h=yes
| ac_cv_header_magic_h=yes
| ac_cv_header_malloc_h=yes
| ac_cv_header_math_h=yes
| ac_cv_header_mcheck_h=yes
| ac_cv_header_memory_h=yes
| ac_cv_header_menu_h=yes
| ac_cv_header_mntent_h=yes
| ac_cv_header_ncurses_h=yes
| ac_cv_header_ncursesw_ncurses_h=yes
| ac_cv_header_ncursesw_term_h=yes
| ac_cv_header_net_if_h=yes
| ac_cv_header_netdb_h=yes
| ac_cv_header_netinet_in_h=yes
| ac_cv_header_netinet_in_systm_h=yes
| ac_cv_header_netinet_ip_h=yes
| ac_cv_header_netinet_tcp_h=yes
| ac_cv_header_netpacket_packet_h=yes
| ac_cv_header_nettle_sha_h=yes
| ac_cv_header_nl_types_h=yes
| ac_cv_header_openssl_crypto_h=yes
| ac_cv_header_openssl_err_h=yes
| ac_cv_header_openssl_pem_h=yes
| ac_cv_header_openssl_rsa_h=yes
| ac_cv_header_openssl_ssl_h=yes
| ac_cv_header_panel_h=yes
| ac_cv_header_paths_h=yes
| ac_cv_header_pcre_h=yes
| ac_cv_header_poll_h=yes
| ac_cv_header_popt_h=yes
| ac_cv_header_pthread_h=yes
| ac_cv_header_pty_h=yes
| ac_cv_header_pwd_h=yes
| ac_cv_header_readline_history_h=yes
| ac_cv_header_readline_readline_h=yes
| ac_cv_header_regex_h=yes
| ac_cv_header_resolv_h=yes
| ac_cv_header_sasl_sasl_h=yes
| ac_cv_header_sasl_saslutil_h=yes
| ac_cv_header_sched_h=yes
| ac_cv_header_search_h=yes
| ac_cv_header_security_pam_appl_h=yes
| ac_cv_header_security_pam_misc_h=yes
| ac_cv_header_selinux_context_h=yes
| ac_cv_header_selinux_flask_h=yes
| ac_cv_header_selinux_selinux_h=yes
| ac_cv_header_semaphore_h=yes
| ac_cv_header_serf_h=yes
| ac_cv_header_setjmp_h=yes
| ac_cv_header_sgtty_h=yes
| ac_cv_header_shadow_h=yes
| ac_cv_header_signal_h=yes
| ac_cv_header_slcurses_h=yes
| ac_cv_header_spawn_h=yes
| ac_cv_header_stdarg_h=yes
| ac_cv_header_stdbool_h=yes
| ac_cv_header_stdc=yes
| ac_cv_header_stddef_h=yes
| ac_cv_header_stdint_h=yes
| ac_cv_header_stdio_ext_h=yes
| ac_cv_header_stdio_h=yes
| ac_cv_header_stdlib_h=yes
| ac_cv_header_string_h=yes
| ac_cv_header_strings_h=yes
| ac_cv_header_stropts_h=yes
| ac_cv_header_strstream=yes
| ac_cv_header_sys_acl_h=yes
| ac_cv_header_sys_capability_h=yes
| ac_cv_header_sys_cdefs_h=yes
| ac_cv_header_sys_dir_h=yes
| ac_cv_header_sys_epoll_h=yes
| ac_cv_header_sys_fcntl_h=yes
| ac_cv_header_sys_file_h=yes
| ac_cv_header_sys_gmon_out_h=yes
| ac_cv_header_sys_inotify_h=yes
| ac_cv_header_sys_io_h=yes
| ac_cv_header_sys_ioctl_h=yes
| ac_cv_header_sys_mman_h=yes
| ac_cv_header_sys_mount_h=yes
| ac_cv_header_sys_mtio_h=yes
| ac_cv_header_sys_param_h=yes
| ac_cv_header_sys_poll_h=yes
| ac_cv_header_sys_prctl_h=yes
| ac_cv_header_sys_procfs_h=yes
| ac_cv_header_sys_random_h=yes
| ac_cv_header_sys_resource_h=yes
| ac_cv_header_sys_select_h=yes
| ac_cv_header_sys_sendfile_h=yes
| ac_cv_header_sys_signal_h=yes
| ac_cv_header_sys_signalfd_h=yes
| ac_cv_header_sys_socket_h=yes
| ac_cv_header_sys_stat_h=yes
| ac_cv_header_sys_statfs_h=yes
| ac_cv_header_sys_statvfs_h=yes
| ac_cv_header_sys_stropts_h=yes
| ac_cv_header_sys_swap_h=yes
| ac_cv_header_sys_syscall_h=yes
| ac_cv_header_sys_sysctl_h=yes
| ac_cv_header_sys_sysinfo_h=yes
| ac_cv_header_sys_sysmacros_h=yes
| ac_cv_header_sys_termios_h=yes
| ac_cv_header_sys_time_h=yes
| ac_cv_header_sys_timeb_h=yes
| ac_cv_header_sys_times_h=yes
| ac_cv_header_sys_timex_h=yes
| ac_cv_header_sys_ttydefaults_h=yes
| ac_cv_header_sys_types_h=yes
| ac_cv_header_sys_types_h_makedev=yes
| ac_cv_header_sys_uio_h=yes
| ac_cv_header_sys_un_h=yes
| ac_cv_header_sys_unistd_h=yes
| ac_cv_header_sys_user_h=yes
| ac_cv_header_sys_utsname_h=yes
| ac_cv_header_sys_vfs_h=yes
| ac_cv_header_sys_wait_h=yes
| ac_cv_header_sys_xattr_h=yes
| ac_cv_header_sysexits_h=yes
| ac_cv_header_syslog_h=yes
| ac_cv_header_term_h=yes
| ac_cv_header_termcap_h=yes
| ac_cv_header_termio_h=yes
| ac_cv_header_termios_h=yes
| ac_cv_header_time=yes
| ac_cv_header_time_h=yes
| ac_cv_header_ttyent_h=yes
| ac_cv_header_typeinfo=yes
| ac_cv_header_ucontext_h=yes
| ac_cv_header_ulimit_h=yes
| ac_cv_header_unistd_h=yes
| ac_cv_header_unordered_map=yes
| ac_cv_header_unordered_set=yes
| ac_cv_header_utempter_h=yes
| ac_cv_header_utime_h=yes
| ac_cv_header_utmp_h=yes
| ac_cv_header_utmpx_h=yes
| ac_cv_header_uuid_uuid_h=yes
| ac_cv_header_values_h=yes
| ac_cv_header_wchar_h=yes
| ac_cv_header_wctype_h=yes
| ac_cv_header_xlocale_h=yes
| ac_cv_header_zlib_h=yes
| ac_cv_host=x86_64-pc-linux-gnu
| ac_cv_host_alias=x86_64-linux-gnu
| ac_cv_lib_acl_acl_get_file=yes
| ac_cv_lib_attr_fgetxattr=yes
| ac_cv_lib_attr_getxattr=yes
| ac_cv_lib_audit_audit_log_user_avc_message=yes
| ac_cv_lib_audit_audit_log_user_message=yes
| ac_cv_lib_c_inet_aton=yes
| ac_cv_lib_c_printf=yes
| ac_cv_lib_c_re_compile_pattern=yes
| ac_cv_lib_cap_cap_get_file=yes
| ac_cv_lib_cap_cap_get_proc=yes
| ac_cv_lib_cap_cap_init=yes
| ac_cv_lib_cap_ng_capng_apply=yes
| ac_cv_lib_crypto_HMAC_Update=yes
| ac_cv_lib_crypto_SRP_Calc_client_key=yes
| ac_cv_lib_curses_initscr=yes
| ac_cv_lib_dl_dlopen=yes
| ac_cv_lib_dl_dlsym=yes
| ac_cv_lib_error_at_line=yes
| ac_cv_lib_gdbm_gdbm_open=yes
| ac_cv_lib_gmp___gmpz_init=yes
| ac_cv_lib_gnutls_gnutls_check_version=yes
| ac_cv_lib_gnutls_gnutls_srp_verifier=yes
| ac_cv_lib_gpm_Gpm_Open=yes
| ac_cv_lib_gpm_Gpm_Wgetch=yes
| ac_cv_lib_history_append_history=yes
| ac_cv_lib_ICE_IceConnectionNumber=yes
| ac_cv_lib_ICE_IceOpenConnection=yes
| ac_cv_lib_lber___ber_free=yes
| ac_cv_lib_lzma_lzma_alone_decoder=yes
| ac_cv_lib_lzma_lzma_stream_encoder_mt=yes
| ac_cv_lib_m_cos=yes
| ac_cv_lib_m_log=yes
| ac_cv_lib_m_pow=yes
| ac_cv_lib_m_strtod=yes
| ac_cv_lib_magic_magic_open=yes
| ac_cv_lib_ncurses___tputs=yes
| ac_cv_lib_ncurses_initscr=yes
| ac_cv_lib_ncurses_tparm=yes
| ac_cv_lib_ncursesw___key_defined=yes
| ac_cv_lib_ncursesw___resizeterm=yes
| ac_cv_lib_ncursesw___set_escdelay=yes
| ac_cv_lib_ncursesw___use_default_colors=yes
| ac_cv_lib_ncursesw_initscr=yes
| ac_cv_lib_nettle_main=yes
| ac_cv_lib_nsl_gethostbyname=yes
| ac_cv_lib_popt_poptGetContext=yes
| ac_cv_lib_pthread_pthread_join=yes
| ac_cv_lib_pthread_pthread_kill=yes
| ac_cv_lib_pthread_pthread_mutex_lock=yes
| ac_cv_lib_pthread_pthread_self=yes
| ac_cv_lib_readline_append_history=yes
| ac_cv_lib_readline_readline=yes
| ac_cv_lib_readline_rl_callback_handler_install=yes
| ac_cv_lib_readline_rl_completion_display_matches_hook=yes
| ac_cv_lib_readline_rl_completion_matches=yes
| ac_cv_lib_readline_rl_pre_input_hook=yes
| ac_cv_lib_readline_rl_resize_terminal=yes
| ac_cv_lib_rt_clock_gettime=yes
| ac_cv_lib_rt_sched_yield=yes
| ac_cv_lib_rt_timer_create=yes
| ac_cv_lib_rtmp_RTMP_Init=yes
| ac_cv_lib_selinux_is_selinux_enabled=yes
| ac_cv_lib_selinux_setexecfilecon=yes
| ac_cv_lib_ssl_SSL_connect=yes
| ac_cv_lib_termcap_tgetent=yes
| ac_cv_lib_tinfo___tgetent=yes
| ac_cv_lib_tinfo_tgoto=yes
| ac_cv_lib_udev_udev_new=yes
| ac_cv_lib_util_openpty=yes
| ac_cv_lib_Xdmcp__XdmcpAuthDoIt=yes
| ac_cv_lib_Xext_XShapeQueryExtension=yes
| ac_cv_lib_Xmu_XmuCreateStippledPixmap=yes
| ac_cv_lib_Xpm_XpmCreatePixmapFromData=yes
| ac_cv_lib_z_gzdopen=yes
| ac_cv_lib_z_gzopen=yes
| ac_cv_lib_z_inflate=yes
| ac_cv_lib_z_inflateCopy=yes
| ac_cv_lib_z_inflateEnd=yes
| ac_cv_libsigsegv=yes
| ac_cv_little_endian_double=yes
| ac_cv_member_siginfo_t_si_band=yes
| ac_cv_member_struct_passwd_pw_gecos=yes
| ac_cv_member_struct_passwd_pw_passwd=yes
| ac_cv_member_struct_rusage_ru_idrss=yes
| ac_cv_member_struct_rusage_ru_inblock=yes
| ac_cv_member_struct_rusage_ru_isrss=yes
| ac_cv_member_struct_rusage_ru_ixrss=yes
| ac_cv_member_struct_rusage_ru_majflt=yes
| ac_cv_member_struct_rusage_ru_maxrss=yes
| ac_cv_member_struct_rusage_ru_minflt=yes
| ac_cv_member_struct_rusage_ru_msgrcv=yes
| ac_cv_member_struct_rusage_ru_msgsnd=yes
| ac_cv_member_struct_rusage_ru_nivcsw=yes
| ac_cv_member_struct_rusage_ru_nsignals=yes
| ac_cv_member_struct_rusage_ru_nswap=yes
| ac_cv_member_struct_rusage_ru_nvcsw=yes
| ac_cv_member_struct_rusage_ru_oublock=yes
| ac_cv_member_struct_sigaction_sa_sigaction=yes
| ac_cv_member_struct_sockaddr_storage_ss_family=yes
| ac_cv_member_struct_sockaddr_un_sun_path=yes
| ac_cv_member_struct_stat_st_atim_tv_nsec=yes
| ac_cv_member_struct_stat_st_blksize=yes
| ac_cv_member_struct_stat_st_ctim_tv_nsec=yes
| ac_cv_member_struct_stat_st_mtim_tv_nsec=yes
| ac_cv_member_struct_stat_st_rdev=yes
| ac_cv_member_struct_statfs_f_frsize=yes
| ac_cv_member_struct_statfs_f_namelen=yes
| ac_cv_member_struct_statfs_f_type=yes
| ac_cv_member_struct_sysinfo_mem_unit=yes
| ac_cv_member_struct_termio_c_line=yes
| ac_cv_member_struct_termios_c_line=yes
| ac_cv_member_struct_tm_tm_gmtoff=yes
| ac_cv_member_struct_tm_tm_zone=yes
| ac_cv_member_struct_utmp_ut_exit=yes
| ac_cv_member_struct_utmp_ut_exit_e_exit=yes
| ac_cv_member_struct_utmp_ut_exit_e_termination=yes
| ac_cv_member_struct_utmp_ut_id=yes
| ac_cv_member_struct_utmp_ut_name=yes
| ac_cv_member_struct_utmp_ut_pid=yes
| ac_cv_member_struct_utmp_ut_type=yes
| ac_cv_member_struct_utmp_ut_user=yes
| ac_cv_member_struct_utmpx_ut_exit=yes
| ac_cv_member_struct_utmpx_ut_exit_e_exit=yes
| ac_cv_member_struct_utmpx_ut_exit_e_termination=yes
| ac_cv_member_struct_utmpx_ut_id=yes
| ac_cv_member_struct_utmpx_ut_name=yes
| ac_cv_member_struct_utmpx_ut_pid=yes
| ac_cv_member_struct_utmpx_ut_type=yes
| ac_cv_member_struct_utmpx_ut_user=yes
| ac_cv_module_Locale__gettext=yes
| ac_cv_mvwdelch_is_expression=yes
| ac_cv_no_strict_aliasing_ok=yes
| ac_cv_objext=o
| ac_cv_path_ac_pt_LIBGCRYPT_CONFIG=/usr/bin/libgcrypt-config
| ac_cv_path_ac_pt_PKG_CONFIG=/usr/bin/pkg-config
| ac_cv_path_ac_pt_PKGCONFIG=/usr/bin/pkg-config
| ac_cv_path_ac_pt_XML_CONFIG=/usr/bin/xml2-config
| ac_cv_path_ax_enable_builddir_sed=sed
| ac_cv_path_BASH_SHELL=/bin/bash
| ac_cv_path_CTYPESGEN=none
| ac_cv_path_DOT=/usr/bin/dot
| ac_cv_path_DOXYGEN=/usr/bin/doxygen
| ac_cv_path_EGREP='/bin/grep -E'
| ac_cv_path_EXPR=/usr/bin/expr
| ac_cv_path_FAKEROOT_PATH=/usr/bin/fakeroot
| ac_cv_path_FGREP='/bin/grep -F'
| ac_cv_path_GLIB_COMPILE_RESOURCES=/usr/bin/glib-compile-resources
| ac_cv_path_GMSGFMT=/usr/bin/msgfmt
| ac_cv_path_GREP=/bin/grep
| ac_cv_path_GTK_UPDATE_ICON_CACHE=/usr/bin/gtk-update-icon-cache
| ac_cv_path_GZIP_BIN=/bin/gzip
| ac_cv_path_install=/usr/bin/install
| ac_cv_path_INSTALL_INFO=/usr/bin/install-info
| ac_cv_path_LDCONFIG=/sbin/ldconfig
| ac_cv_path_lt_DD=/bin/dd
| ac_cv_path_MAKEINFO=/usr/bin/makeinfo
| ac_cv_path_mkdir='/bin/mkdir -p'
| ac_cv_path_MSGFMT=/usr/bin/msgfmt
| ac_cv_path_MSGMERGE=/usr/bin/msgmerge
| ac_cv_path_MV=/bin/mv
| ac_cv_path_NROFF=/usr/bin/nroff
| ac_cv_path_PERL=/usr/bin/perl
| ac_cv_path_PKG_CONFIG=/usr/bin/x86_64-linux-gnu-pkg-config
| ac_cv_path_RDOC=/usr/bin/rdoc
| ac_cv_path_RUBY=/usr/bin/ruby
| ac_cv_path_SED=/bin/sed
| ac_cv_path_shell=/bin/bash
| ac_cv_path_SHELL_PATH=/bin/bash
| ac_cv_path_STUNNEL=/usr/bin/stunnel
| ac_cv_path_TAR=/bin/tar
| ac_cv_path_TESTS_SHELL=/bin/bash
| ac_cv_path_TIC_PATH=/usr/bin/tic
| ac_cv_path_TRANG=none
| ac_cv_path_vi_cv_path_perl=/usr/bin/perl
| ac_cv_path_vi_cv_path_plain_lua=/usr/bin/lua
| ac_cv_path_vi_cv_path_ruby=/usr/bin/ruby
| ac_cv_path_vi_cv_path_tcl=/usr/bin/tclsh
| ac_cv_path_WGET=/usr/bin/wget
| ac_cv_path_XGETTEXT=/usr/bin/xgettext
| ac_cv_path_XMLLINT=/usr/bin/xmllint
| ac_cv_path_XSLTPROC=/usr/bin/xsltproc
| ac_cv_path_XSUBPP=/usr/bin/xsubpp
| ac_cv_perl_flock_implemented=yes
| ac_cv_posix_semaphores_enabled=yes
| ac_cv_prog_ac_ct_AR=xiar
| ac_cv_prog_ac_ct_CC=icc
| ac_cv_prog_ac_ct_CC_FOR_BUILD=icc
| ac_cv_prog_ac_ct_CXX=icpc
| ac_cv_prog_ac_ct_DLLTOOL=dlltool
| ac_cv_prog_ac_ct_LD=xild
| ac_cv_prog_ac_ct_LIBTOOL=/usr/bin/libtool
| ac_cv_prog_ac_ct_MANIFEST_TOOL=mt
| ac_cv_prog_ac_ct_NM=nm
| ac_cv_prog_ac_ct_OBJDUMP=x86_64-linux-gnu-objdump
| ac_cv_prog_ac_ct_PKG_CONFIG=/usr/bin/pkg-config
| ac_cv_prog_ac_ct_RANLIB=/usr/bin/x86_64-linux-gnu-ranlib
| ac_cv_prog_ac_ct_READELF=readelf
| ac_cv_prog_ac_ct_STRIP=x86_64-linux-gnu-strip
| ac_cv_prog_ACLOCAL=aclocal
| ac_cv_prog_AR_FOR_TARGET=xiar
| ac_cv_prog_AS=x86_64-linux-gnu-as
| ac_cv_prog_AS_FOR_TARGET=as
| ac_cv_prog_AUTOCONF=autoconf
| ac_cv_prog_AUTOHEADER=autoheader
| ac_cv_prog_AWK=gawk
| ac_cv_prog_BISON=/usr/bin/bison
| ac_cv_prog_BUILD_CC=icc
| ac_cv_prog_CC=icc
| ac_cv_prog_CC_FOR_TARGET=icc
| ac_cv_prog_cc_g=yes
| ac_cv_prog_cc_icc_c_o=yes
| ac_cv_prog_cc_stdc=''
| ac_cv_prog_cf_ldd_prog=/usr/bin/ldd
| ac_cv_prog_CPP='icc -E'
| ac_cv_prog_CXX=icpc
| ac_cv_prog_CXX_FOR_TARGET=icpc
| ac_cv_prog_cxx_g=yes
| ac_cv_prog_CXXCPP='icpc -E'
| ac_cv_prog_DOCBOOK_TO_MAN=docbook2x-man
| ac_cv_prog_DOXYGEN=/usr/bin/doxygen
| ac_cv_prog_egrep='grep -E'
| ac_cv_prog_EXPECT=/usr/bin/expect
| ac_cv_prog_fc_g=yes
| ac_cv_prog_FLEX=/usr/bin/flex
| ac_cv_prog_GCC_FOR_TARGET=gcc
| ac_cv_prog_GFORTRAN_FOR_TARGET=gfortran
| ac_cv_prog_gnatmake_exists=yes
| ac_cv_prog_gprconfig_exists=yes
| ac_cv_prog_HAVE_DOT=YES
| ac_cv_prog_HAVE_JAVA_IN_PATH=yes
| ac_cv_prog_HAVE_JAVAC_IN_PATH=yes
| ac_cv_prog_INTLBISON=bison
| ac_cv_prog_JAR=jar
| ac_cv_prog_LD=xild
| ac_cv_prog_LD_FOR_TARGET=xild
| ac_cv_prog_LEX=/usr/bin/lex
| ac_cv_prog_lex_is_flex=yes
| ac_cv_prog_LIBTOOL=/usr/bin/libtool
| ac_cv_prog_LN=ln
| ac_cv_prog_MAKE=/usr/bin/make
| ac_cv_prog_MAKE_LOWER_TAGS=yes
| ac_cv_prog_make_make_case=yes
| ac_cv_prog_make_make_set=yes
| ac_cv_prog_MAKE_UPPER_TAGS=yes
| ac_cv_prog_MAKEINFO=/usr/bin/makeinfo
| ac_cv_prog_MSGFMT=/usr/bin/msgfmt
| ac_cv_prog_NM_FOR_TARGET=nm
| ac_cv_prog_OBJCOPY=/usr/bin/x86_64-linux-gnu-objcopy
| ac_cv_prog_OBJCOPY_FOR_TARGET=objcopy
| ac_cv_prog_OBJDUMP=/usr/bin/x86_64-linux-gnu-objdump
| ac_cv_prog_OBJDUMP_FOR_TARGET=objdump
| ac_cv_prog_PATCH=/usr/bin/patch
| ac_cv_prog_PCRECONF=/usr/bin/pcre-config
| ac_cv_prog_PERL=/usr/bin/perl
| ac_cv_prog_PROVE=/usr/bin/prove
| ac_cv_prog_RANLIB_FOR_TARGET=ranlib
| ac_cv_prog_READELF=/usr/bin/x86_64-linux-gnu-readelf
| ac_cv_prog_READELF_FOR_TARGET=readelf
| ac_cv_prog_RUNTEST=/usr/bin/runtest
| ac_cv_prog_SED=/bin/sed
| ac_cv_prog_TAR=/usr/bin/tar
| ac_cv_prog_TEX=/usr/bin/tex
| ac_cv_prog_TRUE=/bin/true
| ac_cv_prog_YACC='bison -y'
| ac_cv_prog_YODL=yodl
| ac_cv_pthread=yes
| ac_cv_pthread_system_supported=yes
| ac_cv_rshift_extends_sign=yes
| ac_cv_safe_to_define___extensions__=yes
| ac_cv_search___gmpz_init=-lgmp
| ac_cv_search_acl_get_file=-lacl
| ac_cv_search_attr_copy_file=-lattr
| ac_cv_search_forkpty=-lutil
| ac_cv_search_psl_builtin=-lpsl
| ac_cv_search_sem_init=-lpthread
| ac_cv_search_setfilecon=-lselinux
| ac_cv_search_timer_settime=-lrt
| ac_cv_search_utempter_add_record=-lutempter
| ac_cv_search_uuid_generate=-luuid
| ac_cv_sizeof__Bool=1
| ac_cv_sizeof_char=1
| ac_cv_sizeof_char_p=8
| ac_cv_sizeof_curl_off_t=8
| ac_cv_sizeof_double=8
| ac_cv_sizeof_float=4
| ac_cv_sizeof_fpos_t=16
| ac_cv_sizeof_int=4
| ac_cv_sizeof_intmax_t=8
| ac_cv_sizeof_long=8
| ac_cv_sizeof_long_double=16
| ac_cv_sizeof_long_long_int=8
| ac_cv_sizeof_off_t=8
| ac_cv_sizeof_pid_t=4
| ac_cv_sizeof_pthread_key_t=4
| ac_cv_sizeof_pthread_t=8
| ac_cv_sizeof_short=2
| ac_cv_sizeof_signed_char=1
| ac_cv_sizeof_size_t=8
| ac_cv_sizeof_time_t=8
| ac_cv_sizeof_uintptr_t=8
| ac_cv_sizeof_unsigned_int=4
| ac_cv_sizeof_unsigned_long=8
| ac_cv_sizeof_void_p=8
| ac_cv_sizeof_wchar_t=4
| ac_cv_stat_tv_nsec=yes
| ac_cv_struct_addrinfo=yes
| ac_cv_struct_option_getopt_h=yes
| ac_cv_struct_sockaddr_alg=yes
| ac_cv_struct_sockaddr_storage=yes
| ac_cv_struct_st_mtim_nsec=st_mtim.tv_nsec
| ac_cv_struct_tm=time.h
| ac_cv_struct_tm_isdst=yes
| ac_cv_struct_tm_zone=yes
| ac_cv_sys_interpreter=yes
| ac_cv_sys_long_file_names=yes
| ac_cv_sys_posix_termios=yes
| ac_cv_sys_stack_overflow_works=yes
| ac_cv_sys_tiocgwinsz_in_sys_ioctl_h=yes
| ac_cv_tanh_preserves_zero_sign=yes
| ac_cv_target=x86_64-pc-linux-gnu
| ac_cv_target_alias=x86_64-linux-gnu
| ac_cv_type___fsword_t=yes
| ac_cv_type__Bool=yes
| ac_cv_type_ares_addr_node=yes
| ac_cv_type_bool=yes
| ac_cv_type_cpu_set_t=yes
| ac_cv_type_dev_t=yes
| ac_cv_type_double=yes
| ac_cv_type_error_t=yes
| ac_cv_type_float=yes
| ac_cv_type_getgroups=gid_t
| ac_cv_type_gid_t=yes
| ac_cv_type_iconv_t=yes
| ac_cv_type_id_t=yes
| ac_cv_type_in_addr_t=yes
| ac_cv_type_ino_t=yes
| ac_cv_type_int=yes
| ac_cv_type_intptr_t=yes
| ac_cv_type_loff_t=yes
| ac_cv_type_long=yes
| ac_cv_type_long_double=yes
| ac_cv_type_long_double_wider=yes
| ac_cv_type_long_long=yes
| ac_cv_type_long_long_int=yes
| ac_cv_type_max_align_t=yes
| ac_cv_type_mbstate_t=yes
| ac_cv_type_mode_t=yes
| ac_cv_type_nlink_t=yes
| ac_cv_type_off_t=yes
| ac_cv_type_pid_t=yes
| ac_cv_type_posix_spawn_file_actions_t=yes
| ac_cv_type_posix_spawnattr_t=yes
| ac_cv_type_pthread_rwlock_t=yes
| ac_cv_type_pthread_spinlock_t=yes
| ac_cv_type_pthread_t=yes
| ac_cv_type_ptrdiff_t=yes
| ac_cv_type_rlim_t=yes
| ac_cv_type_sa_family_t=yes
| ac_cv_type_short=yes
| ac_cv_type_sig_atomic_t=yes
| ac_cv_type_sig_t=yes
| ac_cv_type_sighandler_t=yes
| ac_cv_type_signal=void
| ac_cv_type_signed_char=yes
| ac_cv_type_sigset_t=yes
| ac_cv_type_size_t=yes
| ac_cv_type_socklen_t=yes
| ac_cv_type_ssize_t=yes
| ac_cv_type_stack_t=yes
| ac_cv_type_struct_addrinfo=yes
| ac_cv_type_struct_sockaddr_storage=yes
| ac_cv_type_struct_timespec=yes
| ac_cv_type_struct_tms=yes
| ac_cv_type_struct_utsname=yes
| ac_cv_type_time_t=yes
| ac_cv_type_u_int=yes
| ac_cv_type_u_long=yes
| ac_cv_type_uid_t=yes
| ac_cv_type_uintmax_t=yes
| ac_cv_type_uintptr_t=yes
| ac_cv_type_unsigned_long_long=yes
| ac_cv_type_unsigned_long_long_int=yes
| ac_cv_type_useconds_t=yes
| ac_cv_type_volatile_sig_atomic_t=yes
| ac_cv_type_wchar_t=yes
| ac_cv_typeof_struct_stat_st_atim_is_struct_timespec=yes
| ac_cv_unsupported_fs_chars=''
| ac_cv_var_daylight=yes
| ac_cv_var_ospeed=tinfo
| ac_cv_var_tzname=yes
| ac_cv_wchar_t_signed=yes
| ac_cv_window_has_flags=yes
| ac_cv_working_alloca_h=yes
| ac_cv_working_tzset=yes
| ac_objext=o
| acl_cv_libdirstems=lib,lib
| acl_cv_libext=a
| acl_cv_path_LD='xild -m elf_x86_64'
| acl_cv_prog_gnu_ld=yes
| acl_cv_rpath=done
| acl_cv_shlibext=so
| acl_cv_wl=-Wl,
| acx_cv_header_stdint=stdint.h
| acx_cv_prog_LN=ln
| am_cv_autoconf_installed=yes
| am_cv_autoconf_version=yes
| am_cv_autoconf_works=yes
| am_cv_CC_dependencies_compiler_type=gcc3
| am_cv_CCAS_dependencies_compiler_type=gcc3
| am_cv_CXX_dependencies_compiler_type=gcc3
| am_cv_func_iconv=yes
| am_cv_func_working_getline=yes
| am_cv_langinfo_codeset=yes
| am_cv_make_support_nested_variables=yes
| am_cv_pathless_PYTHON=python3
| am_cv_prog_cc_c_o=yes
| am_cv_prog_ln=ln
| am_cv_prog_tar_pax=gnutar
| am_cv_prog_tar_ustar=gnutar
| am_cv_python_platform=linux
| am_cv_python_version=3.7
| am_cv_val_LC_MESSAGES=yes
| ax_cv_c_compiler_vendor=gnu
| ax_cv_check_cflags___Wall=yes
| ax_cv_check_vscript_complex_wildcards=yes
| ax_cv_check_vscript_flag=--version-script
| ax_cv_cxx_gcc_abi_demangle=yes
| ax_cv_cxx_have_isfinite=yes
| ax_cv_cxx_have_sstream=yes
| ax_cv_cxx_namespaces=yes
| ax_cv_gcc_archflag=unknown
| ax_cv_have_tls=yes
| ax_cv_PTHREAD_JOINABLE_ATTR=PTHREAD_CREATE_JOINABLE
| ax_cv_PTHREAD_PRIO_INHERIT=yes
| bison_cv_c_supports_posixly_correct=yes
| bison_cv_cxx_supports_posixly_correct=yes
| bison_cv_cxx_works=yes
| bu_cv_decl_getopt_unistd_h=yes
| bu_cv_decl_time_t_time_h=yes
| bu_cv_decl_time_t_types_h=yes
| bu_cv_header_utime_h=yes
| build_alias=x86_64-linux-gnu
| build_cpu=x86_64
| build_os=linux-gnu
| cc_cv_attribute_unused=yes
| cc_cv_attribute_visibility=yes
| fu_cv_sys_stat_statvfs=yes
| gas_cv_assert_ok=yes
| gas_cv_decl_getopt_unistd_h=yes
| gas_cv_have_sys_stat_type_member_st_mtim_tv_nsec=yes
| gas_cv_have_sys_stat_type_member_st_mtim_tv_sec=yes
| gas_cv_have_time_type_member_tm_gmtoff=yes
| gcc_cv_as_cfi_pseudo_op=yes
| gcc_cv_header_string=yes
| gcc_cv_tool_prefix=/usr
| gdbm_cv__thread=__thread
| gl_cv___builtin_expect=yes
| gl_cv_acl_ACL_FIRST_ENTRY=yes
| gl_cv_c___inline=yes
| gl_cv_c_inline_effective=yes
| gl_cv_cc_nomfi_supported=yes
| gl_cv_cc_uninitialized_supported=yes
| gl_cv_cc_vis_werror=yes
| gl_cv_cc_visibility=yes
| gl_cv_compound_literals=yes
| gl_cv_decl_HOST_NAME_MAX=yes
| gl_cv_decl_ioctl_in_sys_ioctl_h=yes
| gl_cv_decl_null_works=yes
| gl_cv_decl_readlink_works=yes
| gl_cv_decl_readlinkat_works=yes
| gl_cv_fs_space=yes
| gl_cv_func___fpending=yes
| gl_cv_func_btowc_nul=yes
| gl_cv_func_chown_ctime_works=yes
| gl_cv_func_chown_follows_symlink=yes
| gl_cv_func_chown_slash_works=yes
| gl_cv_func_dup_works=yes
| gl_cv_func_fchownat_empty_filename_works=yes
| gl_cv_func_fchownat_nofollow_works=yes
| gl_cv_func_fcntl_f_dupfd_works=yes
| gl_cv_func_fdopen_works=yes
| gl_cv_func_fdopendir_works=yes
| gl_cv_func_fnmatch_gnu=yes
| gl_cv_func_fnmatch_posix=yes
| gl_cv_func_fopen_slash=yes
| gl_cv_func_fprintf_posix=yes
| gl_cv_func_frexp_no_libm=yes
| gl_cv_func_frexp_works=yes
| gl_cv_func_frexpl_no_libm=yes
| gl_cv_func_frexpl_works=yes
| gl_cv_func_fseeko=yes
| gl_cv_func_fstatat_zero_flag=yes
| gl_cv_func_ftello=yes
| gl_cv_func_ftello_works=yes
| gl_cv_func_futimens_works=yes
| gl_cv_func_gai_strerror_posix_signature=yes
| gl_cv_func_getaddrinfo=yes
| gl_cv_func_getcwd_null=yes
| gl_cv_func_getcwd_path_max=yes
| gl_cv_func_getcwd_posix_signature=yes
| gl_cv_func_getdtablesize_works=yes
| gl_cv_func_getgroups_works=yes
| gl_cv_func_getlogin_r_works=yes
| gl_cv_func_getopt_gnu=yes
| gl_cv_func_getopt_long_gnu=yes
| gl_cv_func_getopt_posix=yes
| gl_cv_func_getpagesize=yes
| gl_cv_func_getpass_good=yes
| gl_cv_func_gettimeofday_posix_signature=yes
| gl_cv_func_ioctl_posix_signature=yes
| gl_cv_func_isnand_no_libm=yes
| gl_cv_func_isnanf_no_libm=yes
| gl_cv_func_isnanf_works=yes
| gl_cv_func_isnanl_no_libm=yes
| gl_cv_func_isnanl_works=yes
| gl_cv_func_iswcntrl_works=yes
| gl_cv_func_itold_works=yes
| gl_cv_func_ldexp_no_libm=yes
| gl_cv_func_ldexpl_no_libm=yes
| gl_cv_func_ldexpl_works=yes
| gl_cv_func_link_works=yes
| gl_cv_func_linkat_nofollow=yes
| gl_cv_func_linkat_slash=yes
| gl_cv_func_lseek_pipe=yes
| gl_cv_func_lstat_dereferences_slashed_symlink=yes
| gl_cv_func_malloc_posix=yes
| gl_cv_func_mbrtowc_empty_input=yes
| gl_cv_func_mbsrtowcs_works='guessing yes'
| gl_cv_func_memchr_works=yes
| gl_cv_func_mkdir_trailing_dot_works=yes
| gl_cv_func_mkdir_trailing_slash_works=yes
| gl_cv_func_mkfifo=yes
| gl_cv_func_mkfifo_works=yes
| gl_cv_func_mknod_works=yes
| gl_cv_func_nl_langinfo_yesexpr_works=yes
| gl_cv_func_open_slash=yes
| gl_cv_func_posix_spawn_file_actions_addclose_works=yes
| gl_cv_func_posix_spawn_file_actions_addopen_works=yes
| gl_cv_func_posix_spawn_works=yes
| gl_cv_func_printf_attribute_flavor=system
| gl_cv_func_printf_directive_a=yes
| gl_cv_func_printf_directive_f=yes
| gl_cv_func_printf_directive_ls=yes
| gl_cv_func_printf_directive_n=yes
| gl_cv_func_printf_enomem=yes
| gl_cv_func_printf_flag_grouping=yes
| gl_cv_func_printf_flag_leftadjust=yes
| gl_cv_func_printf_flag_zero=yes
| gl_cv_func_printf_infinite=yes
| gl_cv_func_printf_infinite_long_double=yes
| gl_cv_func_printf_long_double=yes
| gl_cv_func_printf_positions=yes
| gl_cv_func_printf_precision=yes
| gl_cv_func_pthread_sigmask_in_libc_works=yes
| gl_cv_func_pthread_sigmask_return_works=yes
| gl_cv_func_pthread_sigmask_unblock_works='guessing yes'
| gl_cv_func_re_compile_pattern_working=yes
| gl_cv_func_readlink_works=yes
| gl_cv_func_realpath_works=yes
| gl_cv_func_remove_dir_works=yes
| gl_cv_func_rename_dest_works=yes
| gl_cv_func_rename_link_works=yes
| gl_cv_func_rename_slash_dst_works=yes
| gl_cv_func_rename_slash_src_works=yes
| gl_cv_func_rmdir_works=yes
| gl_cv_func_select_detects_ebadf=yes
| gl_cv_func_setenv_works=yes
| gl_cv_func_signbit=yes
| gl_cv_func_signbit_gcc=yes
| gl_cv_func_sigprocmask=1
| gl_cv_func_sleep_works=yes
| gl_cv_func_snprintf_directive_n=yes
| gl_cv_func_snprintf_posix=yes
| gl_cv_func_snprintf_usable=yes
| gl_cv_func_spawnattr_setschedparam=yes
| gl_cv_func_spawnattr_setschedpolicy=yes
| gl_cv_func_stat_dir_slash=yes
| gl_cv_func_stat_file_slash=yes
| gl_cv_func_stpncpy=yes
| gl_cv_func_strcasestr_linear=yes
| gl_cv_func_strcasestr_works_always=yes
| gl_cv_func_strchrnul_works=yes
| gl_cv_func_strerror_r_posix_signature=yes
| gl_cv_func_strncat_works=yes
| gl_cv_func_strndup_works=yes
| gl_cv_func_strstr_linear=yes
| gl_cv_func_strstr_works_always=yes
| gl_cv_func_strtod_l=yes
| gl_cv_func_strtod_works=yes
| gl_cv_func_strtoimax=yes
| gl_cv_func_strtok_r_works=yes
| gl_cv_func_svid_putenv=yes
| gl_cv_func_symlink_works=yes
| gl_cv_func_symlinkat_works=yes
| gl_cv_func_tcgetattr=yes
| gl_cv_func_tcsetattr=yes
| gl_cv_func_ungetc_works=yes
| gl_cv_func_unlink_busy_text=yes
| gl_cv_func_unlink_honors_slashes=yes
| gl_cv_func_unlink_parent_fails='guessing yes'
| gl_cv_func_unsetenv_works=yes
| gl_cv_func_usleep_works=yes
| gl_cv_func_utimensat_works=yes
| gl_cv_func_va_copy=yes
| gl_cv_func_vfprintf_posix=yes
| gl_cv_func_vsnprintf_posix=yes
| gl_cv_func_vsnprintf_usable=yes
| gl_cv_func_wcrtomb_retval='guessing yes'
| gl_cv_func_wctob_works='guessing yes'
| gl_cv_func_wcwidth_works=yes
| gl_cv_func_working_acl_get_file=yes
| gl_cv_func_working_getdelim=yes
| gl_cv_func_working_mkstemp=yes
| gl_cv_func_working_mktime=yes
| gl_cv_func_working_strerror=yes
| gl_cv_func_working_strsignal=yes
| gl_cv_func_working_utimes=yes
| gl_cv_getxattr_with_posix_acls=yes
| gl_cv_glob_lists_symlinks=yes
| gl_cv_have_arbitrary_file_name_length_limit=yes
| gl_cv_have_clock_gettime_macro=yes
| gl_cv_have_include_next=yes
| gl_cv_have_proc_uptime=yes
| gl_cv_have_raw_decl__Exit=yes
| gl_cv_have_raw_decl_accept=yes
| gl_cv_have_raw_decl_alphasort=yes
| gl_cv_have_raw_decl_atoll=yes
| gl_cv_have_raw_decl_bind=yes
| gl_cv_have_raw_decl_btowc=yes
| gl_cv_have_raw_decl_canonicalize_file_name=yes
| gl_cv_have_raw_decl_chdir=yes
| gl_cv_have_raw_decl_chown=yes
| gl_cv_have_raw_decl_closedir=yes
| gl_cv_have_raw_decl_connect=yes
| gl_cv_have_raw_decl_dirfd=yes
| gl_cv_have_raw_decl_dprintf=yes
| gl_cv_have_raw_decl_dup=yes
| gl_cv_have_raw_decl_duplocale=yes
| gl_cv_have_raw_decl_endusershell=yes
| gl_cv_have_raw_decl_environ=yes
| gl_cv_have_raw_decl_euidaccess=yes
| gl_cv_have_raw_decl_faccessat=yes
| gl_cv_have_raw_decl_fchdir=yes
| gl_cv_have_raw_decl_fchmodat=yes
| gl_cv_have_raw_decl_fchownat=yes
| gl_cv_have_raw_decl_fcntl=yes
| gl_cv_have_raw_decl_fdatasync=yes
| gl_cv_have_raw_decl_fdopendir=yes
| gl_cv_have_raw_decl_ffs=yes
| gl_cv_have_raw_decl_ffsl=yes
| gl_cv_have_raw_decl_ffsll=yes
| gl_cv_have_raw_decl_fseeko=yes
| gl_cv_have_raw_decl_fstat=yes
| gl_cv_have_raw_decl_fstatat=yes
| gl_cv_have_raw_decl_fsync=yes
| gl_cv_have_raw_decl_ftello=yes
| gl_cv_have_raw_decl_ftruncate=yes
| gl_cv_have_raw_decl_futimens=yes
| gl_cv_have_raw_decl_getcwd=yes
| gl_cv_have_raw_decl_getdelim=yes
| gl_cv_have_raw_decl_getdomainname=yes
| gl_cv_have_raw_decl_getdtablesize=yes
| gl_cv_have_raw_decl_getgroups=yes
| gl_cv_have_raw_decl_gethostname=yes
| gl_cv_have_raw_decl_getline=yes
| gl_cv_have_raw_decl_getloadavg=yes
| gl_cv_have_raw_decl_getlogin=yes
| gl_cv_have_raw_decl_getlogin_r=yes
| gl_cv_have_raw_decl_getpagesize=yes
| gl_cv_have_raw_decl_getpeername=yes
| gl_cv_have_raw_decl_getrusage=yes
| gl_cv_have_raw_decl_getsockname=yes
| gl_cv_have_raw_decl_getsockopt=yes
| gl_cv_have_raw_decl_getsubopt=yes
| gl_cv_have_raw_decl_gettimeofday=yes
| gl_cv_have_raw_decl_getusershell=yes
| gl_cv_have_raw_decl_grantpt=yes
| gl_cv_have_raw_decl_group_member=yes
| gl_cv_have_raw_decl_imaxabs=yes
| gl_cv_have_raw_decl_imaxdiv=yes
| gl_cv_have_raw_decl_inet_ntop=yes
| gl_cv_have_raw_decl_inet_pton=yes
| gl_cv_have_raw_decl_initstate=yes
| gl_cv_have_raw_decl_initstate_r=yes
| gl_cv_have_raw_decl_ioctl=yes
| gl_cv_have_raw_decl_isatty=yes
| gl_cv_have_raw_decl_isblank=yes
| gl_cv_have_raw_decl_iswctype=yes
| gl_cv_have_raw_decl_lchmod=yes
| gl_cv_have_raw_decl_lchown=yes
| gl_cv_have_raw_decl_link=yes
| gl_cv_have_raw_decl_linkat=yes
| gl_cv_have_raw_decl_listen=yes
| gl_cv_have_raw_decl_lseek=yes
| gl_cv_have_raw_decl_lstat=yes
| gl_cv_have_raw_decl_mbrlen=yes
| gl_cv_have_raw_decl_mbrtowc=yes
| gl_cv_have_raw_decl_mbsinit=yes
| gl_cv_have_raw_decl_mbsnrtowcs=yes
| gl_cv_have_raw_decl_mbsrtowcs=yes
| gl_cv_have_raw_decl_memmem=yes
| gl_cv_have_raw_decl_mempcpy=yes
| gl_cv_have_raw_decl_memrchr=yes
| gl_cv_have_raw_decl_mkdirat=yes
| gl_cv_have_raw_decl_mkdtemp=yes
| gl_cv_have_raw_decl_mkfifo=yes
| gl_cv_have_raw_decl_mkfifoat=yes
| gl_cv_have_raw_decl_mknod=yes
| gl_cv_have_raw_decl_mknodat=yes
| gl_cv_have_raw_decl_mkostemp=yes
| gl_cv_have_raw_decl_mkostemps=yes
| gl_cv_have_raw_decl_mkstemp=yes
| gl_cv_have_raw_decl_mkstemps=yes
| gl_cv_have_raw_decl_nl_langinfo=yes
| gl_cv_have_raw_decl_openat=yes
| gl_cv_have_raw_decl_opendir=yes
| gl_cv_have_raw_decl_pclose=yes
| gl_cv_have_raw_decl_pipe=yes
| gl_cv_have_raw_decl_popen=yes
| gl_cv_have_raw_decl_posix_openpt=yes
| gl_cv_have_raw_decl_pread=yes
| gl_cv_have_raw_decl_pselect=yes
| gl_cv_have_raw_decl_pthread_sigmask=yes
| gl_cv_have_raw_decl_ptsname=yes
| gl_cv_have_raw_decl_ptsname_r=yes
| gl_cv_have_raw_decl_pwrite=yes
| gl_cv_have_raw_decl_qsort_r=yes
| gl_cv_have_raw_decl_random=yes
| gl_cv_have_raw_decl_random_r=yes
| gl_cv_have_raw_decl_rawmemchr=yes
| gl_cv_have_raw_decl_readdir=yes
| gl_cv_have_raw_decl_readlink=yes
| gl_cv_have_raw_decl_readlinkat=yes
| gl_cv_have_raw_decl_reallocarray=yes
| gl_cv_have_raw_decl_realpath=yes
| gl_cv_have_raw_decl_recv=yes
| gl_cv_have_raw_decl_recvfrom=yes
| gl_cv_have_raw_decl_renameat=yes
| gl_cv_have_raw_decl_rewinddir=yes
| gl_cv_have_raw_decl_rmdir=yes
| gl_cv_have_raw_decl_rpmatch=yes
| gl_cv_have_raw_decl_scandir=yes
| gl_cv_have_raw_decl_secure_getenv=yes
| gl_cv_have_raw_decl_select=yes
| gl_cv_have_raw_decl_send=yes
| gl_cv_have_raw_decl_sendto=yes
| gl_cv_have_raw_decl_setenv=yes
| gl_cv_have_raw_decl_sethostname=yes
| gl_cv_have_raw_decl_setlocale=yes
| gl_cv_have_raw_decl_setsockopt=yes
| gl_cv_have_raw_decl_setstate=yes
| gl_cv_have_raw_decl_setstate_r=yes
| gl_cv_have_raw_decl_setusershell=yes
| gl_cv_have_raw_decl_shutdown=yes
| gl_cv_have_raw_decl_sigaction=yes
| gl_cv_have_raw_decl_sigaddset=yes
| gl_cv_have_raw_decl_sigdelset=yes
| gl_cv_have_raw_decl_sigemptyset=yes
| gl_cv_have_raw_decl_sigfillset=yes
| gl_cv_have_raw_decl_sigismember=yes
| gl_cv_have_raw_decl_sigpending=yes
| gl_cv_have_raw_decl_sigprocmask=yes
| gl_cv_have_raw_decl_sleep=yes
| gl_cv_have_raw_decl_snprintf=yes
| gl_cv_have_raw_decl_socket=yes
| gl_cv_have_raw_decl_srandom=yes
| gl_cv_have_raw_decl_srandom_r=yes
| gl_cv_have_raw_decl_stat=yes
| gl_cv_have_raw_decl_stpcpy=yes
| gl_cv_have_raw_decl_stpncpy=yes
| gl_cv_have_raw_decl_strcasecmp=yes
| gl_cv_have_raw_decl_strcasestr=yes
| gl_cv_have_raw_decl_strchrnul=yes
| gl_cv_have_raw_decl_strdup=yes
| gl_cv_have_raw_decl_strerror_r=yes
| gl_cv_have_raw_decl_strncasecmp=yes
| gl_cv_have_raw_decl_strncat=yes
| gl_cv_have_raw_decl_strndup=yes
| gl_cv_have_raw_decl_strnlen=yes
| gl_cv_have_raw_decl_strpbrk=yes
| gl_cv_have_raw_decl_strsep=yes
| gl_cv_have_raw_decl_strsignal=yes
| gl_cv_have_raw_decl_strtod=yes
| gl_cv_have_raw_decl_strtoimax=yes
| gl_cv_have_raw_decl_strtok_r=yes
| gl_cv_have_raw_decl_strtoll=yes
| gl_cv_have_raw_decl_strtoull=yes
| gl_cv_have_raw_decl_strtoumax=yes
| gl_cv_have_raw_decl_strverscmp=yes
| gl_cv_have_raw_decl_symlink=yes
| gl_cv_have_raw_decl_symlinkat=yes
| gl_cv_have_raw_decl_tmpfile=yes
| gl_cv_have_raw_decl_towctrans=yes
| gl_cv_have_raw_decl_truncate=yes
| gl_cv_have_raw_decl_ttyname_r=yes
| gl_cv_have_raw_decl_unlink=yes
| gl_cv_have_raw_decl_unlinkat=yes
| gl_cv_have_raw_decl_unlockpt=yes
| gl_cv_have_raw_decl_unsetenv=yes
| gl_cv_have_raw_decl_usleep=yes
| gl_cv_have_raw_decl_utime=yes
| gl_cv_have_raw_decl_utimensat=yes
| gl_cv_have_raw_decl_vdprintf=yes
| gl_cv_have_raw_decl_vsnprintf=yes
| gl_cv_have_raw_decl_waitpid=yes
| gl_cv_have_raw_decl_wcpcpy=yes
| gl_cv_have_raw_decl_wcpncpy=yes
| gl_cv_have_raw_decl_wcrtomb=yes
| gl_cv_have_raw_decl_wcscasecmp=yes
| gl_cv_have_raw_decl_wcscat=yes
| gl_cv_have_raw_decl_wcschr=yes
| gl_cv_have_raw_decl_wcscmp=yes
| gl_cv_have_raw_decl_wcscoll=yes
| gl_cv_have_raw_decl_wcscpy=yes
| gl_cv_have_raw_decl_wcscspn=yes
| gl_cv_have_raw_decl_wcsdup=yes
| gl_cv_have_raw_decl_wcsftime=yes
| gl_cv_have_raw_decl_wcslen=yes
| gl_cv_have_raw_decl_wcsncasecmp=yes
| gl_cv_have_raw_decl_wcsncat=yes
| gl_cv_have_raw_decl_wcsncmp=yes
| gl_cv_have_raw_decl_wcsncpy=yes
| gl_cv_have_raw_decl_wcsnlen=yes
| gl_cv_have_raw_decl_wcsnrtombs=yes
| gl_cv_have_raw_decl_wcspbrk=yes
| gl_cv_have_raw_decl_wcsrchr=yes
| gl_cv_have_raw_decl_wcsrtombs=yes
| gl_cv_have_raw_decl_wcsspn=yes
| gl_cv_have_raw_decl_wcsstr=yes
| gl_cv_have_raw_decl_wcstok=yes
| gl_cv_have_raw_decl_wcswidth=yes
| gl_cv_have_raw_decl_wcsxfrm=yes
| gl_cv_have_raw_decl_wctob=yes
| gl_cv_have_raw_decl_wctrans=yes
| gl_cv_have_raw_decl_wctype=yes
| gl_cv_have_raw_decl_wcwidth=yes
| gl_cv_have_raw_decl_wmemchr=yes
| gl_cv_have_raw_decl_wmemcmp=yes
| gl_cv_have_raw_decl_wmemcpy=yes
| gl_cv_have_raw_decl_wmemmove=yes
| gl_cv_have_raw_decl_wmemset=yes
| gl_cv_have_weak=yes
| gl_cv_header_errno_h_complete=yes
| gl_cv_header_inttypes_h=yes
| gl_cv_header_langinfo_altmon=yes
| gl_cv_header_langinfo_codeset=yes
| gl_cv_header_langinfo_era=yes
| gl_cv_header_langinfo_t_fmt_ampm=yes
| gl_cv_header_langinfo_yesexpr=yes
| gl_cv_header_limits_width=yes
| gl_cv_header_linux_if_alg_salg=yes
| gl_cv_header_locale_has_locale_t=yes
| gl_cv_header_math_huge_val_works=yes
| gl_cv_header_math_nan_works=yes
| gl_cv_header_netinet_in_h_selfcontained=yes
| gl_cv_header_signal_h_SIGPIPE=yes
| gl_cv_header_stdint_h=yes
| gl_cv_header_stdint_width=yes
| gl_cv_header_sys_select_h_selfcontained=yes
| gl_cv_header_sys_socket_h_selfcontained=yes
| gl_cv_header_sys_socket_h_shut=yes
| gl_cv_header_wchar_h_correct_inline=yes
| gl_cv_header_working_fcntl_h=yes
| gl_cv_header_working_stdalign_h=yes
| gl_cv_header_working_stdint_h=yes
| gl_cv_header_working_stdnoreturn_h=yes
| gl_cv_host_cpu_c_abi=x86_64
| gl_cv_host_operating_system=GNU/Linux
| gl_cv_lib_sigsegv=yes
| gl_cv_linker_have_as_needed=yes
| gl_cv_linker_have_push_state=yes
| gl_cv_list_mounted_fs=yes
| gl_cv_macro_O_CLOEXEC=yes
| gl_cv_minmax_in_sys_param_h=yes
| gl_cv_next_dirent_h='<dirent.h>'
| gl_cv_next_fcntl_h='<fcntl.h>'
| gl_cv_next_fnmatch_h='<fnmatch.h>'
| gl_cv_next_getopt_h='<getopt.h>'
| gl_cv_next_glob_h='<glob.h>'
| gl_cv_next_iconv_h='<iconv.h>'
| gl_cv_next_inttypes_h='<inttypes.h>'
| gl_cv_next_langinfo_h='<langinfo.h>'
| gl_cv_next_limits_h='<limits.h>'
| gl_cv_next_locale_h='<locale.h>'
| gl_cv_next_math_h='<math.h>'
| gl_cv_next_netdb_h='<netdb.h>'
| gl_cv_next_pthread_h='<pthread.h>'
| gl_cv_next_selinux_selinux_h='<selinux/selinux.h>'
| gl_cv_next_spawn_h='<spawn.h>'
| gl_cv_next_stdint_h='<stdint.h>'
| gl_cv_next_stdio_h='<stdio.h>'
| gl_cv_next_stdlib_h='<stdlib.h>'
| gl_cv_next_string_h='<string.h>'
| gl_cv_next_strings_h='<strings.h>'
| gl_cv_next_sys_file_h='<sys/file.h>'
| gl_cv_next_sys_ioctl_h='<sys/ioctl.h>'
| gl_cv_next_sys_resource_h='<sys/resource.h>'
| gl_cv_next_sys_select_h='<sys/select.h>'
| gl_cv_next_sys_socket_h='<sys/socket.h>'
| gl_cv_next_sys_stat_h='<sys/stat.h>'
| gl_cv_next_sys_time_h='<sys/time.h>'
| gl_cv_next_sys_times_h='<sys/times.h>'
| gl_cv_next_sys_types_h='<sys/types.h>'
| gl_cv_next_sys_uio_h='<sys/uio.h>'
| gl_cv_next_sys_utsname_h='<sys/utsname.h>'
| gl_cv_next_sys_wait_h='<sys/wait.h>'
| gl_cv_next_sysexits_h='<sysexits.h>'
| gl_cv_next_termios_h='<termios.h>'
| gl_cv_next_time_h='<time.h>'
| gl_cv_next_unistd_h='<unistd.h>'
| gl_cv_next_utime_h='<utime.h>'
| gl_cv_next_wchar_h='<wchar.h>'
| gl_cv_next_wctype_h='<wctype.h>'
| gl_cv_pipes_are_fifos='yes (1)'
| gl_cv_posix_shell=/bin/bash
| gl_cv_prog_c_ignore_unused_libraries=-Wl,--as-needed
| gl_cv_promoted_mode_t=mode_t
| gl_cv_rpl_alloca=yes
| gl_cv_sigaltstack_low_base=yes
| gl_cv_size_max=yes
| gl_cv_struct_dirent_d_ino=yes
| gl_cv_struct_dirent_d_type=yes
| gl_cv_sys_struct_lconv_ok=yes
| gl_cv_sys_struct_timespec_in_time_h=yes
| gl_cv_sys_struct_timeval=yes
| gl_cv_sys_struct_timeval_tv_sec=yes
| gl_cv_sys_struct_utimbuf=yes
| gl_cv_sys_tiocgwinsz_needs_sys_ioctl_h=yes
| gl_cv_time_r_posix=yes
| gl_cv_time_t_is_signed=yes
| gl_cv_type_max_align_t=yes
| gl_cv_type_sigset_t=yes
| gl_cv_type_wctrans_t=yes
| gl_cv_type_wctype_t=yes
| gl_cv_var_stdin_large_offset=yes
| gnulib_cv_have_boot_time=yes
| gold_cv_c_random_seed=yes
| gold_cv_c_thread=yes
| gold_cv_c_threadprivate=yes
| gold_cv_hash_off_t=yes
| gold_cv_lib_glibc_ifunc=both
| gold_cv_lib_mremap_maymove=yes
| gold_cv_lib_static=yes
| gold_cv_merge_constants=yes
| gold_cv_stat_st_mtim=yes
| gold_cv_template_attribute=yes
| gold_cv_unordered_map_rehash=yes
| gprof_cv_decl_getopt_unistd_h=yes
| gt_cv_c_intmax_t=yes
| gt_cv_c_wchar_t=yes
| gt_cv_c_wint_t=yes
| gt_cv_func_printf_posix=yes
| gt_cv_func_unsetenv_ret=int
| gt_cv_header_inttypes_h=yes
| gt_cv_int_divbyzero_sigfpe=yes
| gt_cv_locale_fr=none
| gt_cv_locale_ja=none
| gt_cv_locale_zh_CN=none
| gt_cv_ssize_t=yes
| gt_cv_val_LC_MESSAGES=yes
| gt_cv_var_environ_declaration=yes
| host=x86_64-pc-linux-gnu
| host_alias=x86_64-linux-gnu
| host_os=linux-gnu
| jm_ac_cv_header_inttypes_h=yes
| jm_ac_cv_header_stdint_h=yes
| ld_cv_decl_getopt_unistd_h=yes
| ld_cv_string_concatenation=yes
| libc_cv_as_noexecstack=yes
| libc_cv_asm_mpx=yes
| libc_cv_asm_set_directive=yes
| libc_cv_builtin_trap=yes
| libc_cv_cc_loop_to_function=yes
| libc_cv_cc_nofma=-ffp-contract=off
| libc_cv_cc_submachine=''
| libc_cv_compiler_ok=yes
| libc_cv_ehdr_start=yes
| libc_cv_fno_toplevel_reorder=yes
| libc_cv_fpie=yes
| libc_cv_gcc_builtin_memset=yes
| libc_cv_gcc_builtin_redirection=yes
| libc_cv_gcc_incompatible_alias=yes
| libc_cv_gcc_indirect_function=yes
| libc_cv_has_glob_dat=yes
| libc_cv_hashstyle=yes
| libc_cv_ld_gnu_indirect_function=yes
| libc_cv_localstatedir=/var
| libc_cv_output_format=elf64-x86-64
| libc_cv_prog_as_gnu=yes
| libc_cv_prog_ld_gnu=yes
| libc_cv_protected_data=yes
| libc_cv_rootsbindir=/sbin
| libc_cv_rtlddir=/lib64
| libc_cv_slibdir=/lib64
| libc_cv_ssp=yes
| libc_cv_ssp_all=yes
| libc_cv_ssp_strong=yes
| libc_cv_sysconfdir=/etc
| libc_cv_z_combreloc=yes
| libc_cv_z_execstack=yes
| libext=a
| libffi_cv_as_ascii_pseudo_op=yes
| libffi_cv_as_string_pseudo_op=yes
| libffi_cv_hidden_visibility_attribute=yes
| libffi_cv_ro_eh_frame=yes
| libiberty_cv_var_sys_errlist=yes
| libiberty_cv_var_sys_nerr=yes
| libiberty_cv_var_sys_siglist=yes
| libltdl_cv_lib_dl_dlopen=yes
| libltdl_cv_preloaded_symbols=yes
| libltdl_cv_shlibext=.so
| libltdl_cv_shrext=.so
| lt_cv_ar_at_file=@
| lt_cv_dlopen=dlopen
| lt_cv_dlopen_libs=''
| lt_cv_dlopen_self=yes
| lt_cv_dlopen_self_static=yes
| lt_cv_file_magic_cmd=/usr/bin/file
| lt_cv_ld_reload_flag=-r
| lt_cv_module_path_var=LD_LIBRARY_PATH
| lt_cv_nm_interface='BSD nm'
| lt_cv_objdir=.libs
| lt_cv_path_LD='xild -m elf_x86_64'
| lt_cv_path_LDCXX='xild -m elf_x86_64'
| lt_cv_path_NM='/usr/bin/x86_64-linux-gnu-nm -B'
| lt_cv_prog_compiler_c_o=yes
| lt_cv_prog_compiler_c_o_CXX=yes
| lt_cv_prog_compiler_c_o_FC=yes
| lt_cv_prog_compiler_c_o_RC=yes
| lt_cv_prog_compiler_pic=-fpic
| lt_cv_prog_compiler_pic_CXX=-fpic
| lt_cv_prog_compiler_pic_FC=-fpic
| lt_cv_prog_compiler_pic_works=yes
| lt_cv_prog_compiler_pic_works_CXX=yes
| lt_cv_prog_compiler_pic_works_FC=yes
| lt_cv_prog_compiler_rtti_exceptions=yes
| lt_cv_prog_compiler_static_works=yes #note I am forcing this value -- it is detected as no
| lt_cv_prog_compiler_static_works_CXX=yes # forced value
| lt_cv_prog_gnu_ld=yes
| lt_cv_prog_gnu_ldcxx=yes
| lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
| lt_cv_shlibpath_overrides_runpath=yes
| lt_cv_sys_argz_works=yes
| lt_cv_sys_dlopen_deplibs=yes
| lt_cv_sys_max_cmd_len=1572864	# MAY NEED TO CHANGE THIS IN FUTURE
| lv_cv_gcc_pragma_push_works=yes
| pcre_cv_have_pcre_compile=yes
| py_cv_lib_readline=yes
| samba_cv_HAVE_POSIX_ACLS=yes
| scanf_cv_alloc_modifier=ms
| su_cv_func_ut_host_in_utmp=yes
| su_cv_sys_c_line_in_termios=yes
| target_alias=x86_64-linux-gnu
| utils_cv_func_setpriority=yes
| utils_cv_localtime_cache=yes
| with_gcc=yes
| with_gnu_ld=yes
| with_gnu_ld_CXX=yes
| 
| case "$CC" in
| 	*icc) 
| 	: "${LD:=xild -m elf_x86_64}" ${AR:=xiar} 
| #	CFLAGS="$CFLAGS -ipo"
| 	# A cache file is only valid for one C compiler.
| #	[ "$cache_file" = /dev/null ] && cache_file=/tmp/config-icc.cache
| 	;;
| 	*) 
| 		unset LD AR
| 		: ${CFLAGS//-ipo}
| esac
| case "$CXX" in
| 	*icpc) 
| 	: "${LD_CXX:=xild -m elf_x86_64}" ${compiler_CXX:=icpc}
| #	CXXFLAGS="$CFLAGS -ipo"
| 	;;
| 	*)
| 		unset LD AR
| 		: ${CXXFLAGS//-ipo}
| esac
| 
configure:2567: checking for a BSD-compatible install
configure:2635: result: /usr/bin/install
configure:2646: checking whether build environment is sane
configure:2701: result: yes
configure:2852: checking for a thread-safe mkdir -p
configure:2891: result: /bin/mkdir -p
configure:2898: checking for gawk
configure:2925: result: gawk
configure:2936: checking whether make sets $(MAKE)
configure:2958: result: yes
configure:2987: checking whether make supports nested variables
configure:3004: result: yes
configure:3131: checking whether to enable maintainer-specific portions of Makefiles
configure:3140: result: yes
configure:3165: checking whether make supports nested variables
configure:3182: result: yes
configure:3212: checking build system type
configure:3226: result: x86_64-pc-linux-gnu
configure:3246: checking host system type
configure:3259: result: x86_64-pc-linux-gnu
configure:3628: checking for C compiler version
configure:3637: icc --version >&5
icc (ICC) 19.0.1.144 20181018
Copyright (C) 1985-2018 Intel Corporation.  All rights reserved.

configure:3648: $? = 0
configure:3637: icc -v >&5
icc version 19.0.1.144 (gcc version 8.2.0 compatibility)
icc: warning #10013: no objects specified for multi-file optimization
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld    /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/8/crtbeginS.o --eh-frame-hdr --build-id -dynamic-linker /lib64/ld-linux-x86-64.so.2 -m elf_x86_64 -o a.out -L/opt/intel/tbb/lib/intel64/gcc4.7 -L/opt/intel/compilers_and_libraries_2019.1.144/linux/compiler/lib/intel64_lin -L/usr/lib/gcc/x86_64-linux-gnu/8/ -L/usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/ -L/usr/lib/gcc/x86_64-linux-gnu/8/../../../../lib/ -L/lib/x86_64-linux-gnu/ -L/lib/../lib64 -L/lib/../lib/ -L/usr/lib/x86_64-linux-gnu/ -L/usr/lib/../lib/ -L/opt/intel/tbb/lib/intel64/gcc4.7/ -L/usr/lib/gcc/x86_64-linux-gnu/8/../../../ -L/lib64 -L/lib/ -L/usr/lib --as-needed --gc-sections --relax -Bdynamic -Bstatic -limf -lsvml -lirng -lmatmul -Bdynamic -lm -Bstatic -lipgo -ldecimal -Bdynamic -liomp5 --as-needed -lcilkrts -lstdc++ --no-as-needed -lgcc -lgcc_s -Bstatic -lirc -Bdynamic -lpthread -Bstatic -lsvml -Bdynamic -lc -lgcc -lgcc_s -Bstatic -lirc_s -Bdynamic -ldl -lc /usr/lib/gcc/x86_64-linux-gnu/8/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/crtn.o
ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
configure:3648: $? = 1
configure:3637: icc -V >&5
GNU ld (GNU Binutils for Debian) 2.31.1
Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018
Copyright (C) 1985-2018 Intel Corporation.  All rights reserved.

icc: warning #10013: no objects specified for multi-file optimization
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
configure:3648: $? = 1
configure:3637: icc -qversion >&5
icc: warning #10013: no objects specified for multi-file optimization
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
configure:3648: $? = 1
configure:3668: checking whether the C compiler works
configure:3690: icc -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:3694: $? = 0
configure:3742: result: yes
configure:3745: checking for C compiler default output file name
configure:3747: result: a.out
configure:3753: checking for suffix of executables
configure:3760: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:3764: $? = 0
configure:3786: result: 
configure:3808: checking whether we are cross compiling
configure:3816: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:3820: $? = 0
configure:3827: ./conftest
configure:3831: $? = 0
configure:3846: result: no
configure:3851: checking for suffix of object files
configure:3898: result: o
configure:3902: checking whether we are using the GNU C compiler
configure:3930: result: yes
configure:3939: checking whether icc accepts -g
configure:4000: result: yes
configure:4017: checking for icc option to accept ISO C89
configure:4080: icc  -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:4080: $? = 0
configure:4093: result: none needed
configure:4118: checking whether icc understands -c and -o together
configure:4155: result: yes
configure:4175: checking whether make supports the include directive
configure:4190: make -f confmf.GNU && cat confinc.out
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175'
this is the am__doit target
configure:4193: $? = 0
configure:4212: result: yes (GNU style)
configure:4237: checking dependency style of icc
configure:4348: result: gcc3
configure:4406: checking for ranlib
configure:4433: result: /usr/bin/x86_64-linux-gnu-ranlib
configure:4459: checking for bison
configure:4486: result: bison -y
configure:4503: checking for flex
configure:4530: result: /usr/bin/lex
configure:4568: /usr/bin/lex conftest.l
configure:4572: $? = 0
configure:4574: checking lex output file root
configure:4588: result: lex.yy
configure:4593: checking lex library
configure:4607: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c   >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /tmp/ipo_icc5nvXz9.o: in function `main':
/dev/shm/libelf/elfutils-0.175/conftest.l:17: undefined reference to `yywrap'
ld: /tmp/ipo_icc5nvXz9.o: in function `yylex':
/dev/shm/libelf/elfutils-0.175/lex.yy.c:871: undefined reference to `yywrap'
ld: /tmp/ipo_icc5nvXz9.o: in function `input':
/dev/shm/libelf/elfutils-0.175/lex.yy.c:1180: undefined reference to `yywrap'
ld: /dev/shm/libelf/elfutils-0.175/lex.yy.c:1180: undefined reference to `yywrap'
configure:4607: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| /* end confdefs.h.  */
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 6
| #define YY_FLEX_SUBMINOR_VERSION 4
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #ifndef SIZE_MAX
| #define SIZE_MAX               (~(size_t)0)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| /* begin standard C++ headers. */
| 
| /* TODO: this is always defined, so inline it */
| #define yyconst const
| 
| #if defined(__GNUC__) && __GNUC__ >= 3
| #define yynoreturn __attribute__((__noreturn__))
| #else
| #define yynoreturn
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an
|  *   integer in range [0..255] for use as an array index.
|  */
| #define YY_SC_TO_UI(c) ((YY_CHAR) (c))
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart( yyin  )
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
|     
|     #define YY_LESS_LINENO(n)
|     #define YY_LINENO_REWIND_TO(ptr)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	int yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
| 
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = NULL;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart ( FILE *input_file  );
| void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
| void yy_delete_buffer ( YY_BUFFER_STATE b  );
| void yy_flush_buffer ( YY_BUFFER_STATE b  );
| void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state ( void );
| 
| static void yyensure_buffer_stack ( void );
| static void yy_load_buffer_state ( void );
| static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
| #define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );
| 
| void *yyalloc ( yy_size_t  );
| void *yyrealloc ( void *, yy_size_t  );
| void yyfree ( void *  );
| 
| #define yy_new_buffer yy_create_buffer
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| typedef flex_uint8_t YY_CHAR;
| 
| FILE *yyin = NULL, *yyout = NULL;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| int yylineno = 1;
| 
| extern char *yytext;
| #ifdef yytext_ptr
| #undef yytext_ptr
| #endif
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state ( void );
| static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
| static int yy_get_next_buffer ( void );
| static void yynoreturn yy_fatal_error ( const char* msg  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (int) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static const flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static const flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static const YY_CHAR yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static const YY_CHAR yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static const flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static const flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static const flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static const flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 460 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals ( void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy ( void );
| 
| int yyget_debug ( void );
| 
| void yyset_debug ( int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra ( void );
| 
| void yyset_extra ( YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in ( void );
| 
| void yyset_in  ( FILE * _in_str  );
| 
| FILE *yyget_out ( void );
| 
| void yyset_out  ( FILE * _out_str  );
| 
| 			int yyget_leng ( void );
| 
| char *yyget_text ( void );
| 
| int yyget_lineno ( void );
| 
| void yyset_lineno ( int _line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap ( void );
| #else
| extern int yywrap ( void );
| #endif
| #endif
| 
| #ifndef YY_NO_UNPUT
|     
|     static void yyunput ( int c, char *buf_ptr  );
|     
| #endif
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy ( char *, const char *, int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen ( const char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
| static int yyinput ( void );
| #else
| static int input ( void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		int n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK /*LINTED*/break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp, *yy_bp;
| 	int yy_act;
|     
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer( yyin, YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state(  );
| 		}
| 
| 	{
| #line 1 "conftest.l"
| 
| #line 685 "lex.yy.c"
| 
| 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| 
| find_rule: /* we branch to this label when backing up */
| 
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { /* IRIX 6.5 flex 2.5.4 underquotes its yyless argument.  */
|     yyless ((input () != 0)); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 10 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 794 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap(  ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| 	} /* end of user's declarations */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	char *source = (yytext_ptr);
| 	int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart( yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
| 			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 		/* "- 2" to take care of EOB's */
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	int yy_is_jam;
|     
| 	YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 		return yy_is_jam ? 0 : yy_current_state;
| }
| 
| #ifndef YY_NO_UNPUT
| 
|     static void yyunput (int c, char * yy_bp )
| {
| 	char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		int number_to_move = (yy_n_chars) + 2;
| 		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart( yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap(  ) )
| 						return 0;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer( yyin, YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
| 	yy_load_buffer_state(  );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state(  );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer( b, file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree( (void *) b->yy_ch_buf  );
| 
| 	yyfree( (void *) b  );
| }
| 
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer( b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state(  );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state(  );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state(  );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	yy_size_t num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
|       num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		yy_size_t grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return NULL;
| 
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = NULL;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer( b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (const char * yystr )
| {
|     
| 	return yy_scan_bytes( yystr, (int) strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = (yy_size_t) (_yybytes_len + 2);
| 	buf = (char *) yyalloc( n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer( buf, n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yynoreturn yy_fatal_error (const char* msg )
| {
| 			fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|     
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param _line_number line number
|  * 
|  */
| void yyset_lineno (int  _line_number )
| {
|     
|     yylineno = _line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param _in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  _in_str )
| {
|         yyin = _in_str ;
| }
| 
| void yyset_out (FILE *  _out_str )
| {
|         yyout = _out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  _bdebug )
| {
|         yy_flex_debug = _bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = NULL;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = NULL;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = NULL;
|     yyout = NULL;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer( YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, const char * s2, int n )
| {
| 		
| 	int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (const char * s )
| {
| 	int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 			return malloc(size);
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 		
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return realloc(ptr, size);
| }
| 
| void yyfree (void * ptr )
| {
| 			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 10 "conftest.l"
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:4607: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -lfl  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: cannot find -lfl
configure:4607: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| /* end confdefs.h.  */
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 6
| #define YY_FLEX_SUBMINOR_VERSION 4
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #ifndef SIZE_MAX
| #define SIZE_MAX               (~(size_t)0)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| /* begin standard C++ headers. */
| 
| /* TODO: this is always defined, so inline it */
| #define yyconst const
| 
| #if defined(__GNUC__) && __GNUC__ >= 3
| #define yynoreturn __attribute__((__noreturn__))
| #else
| #define yynoreturn
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an
|  *   integer in range [0..255] for use as an array index.
|  */
| #define YY_SC_TO_UI(c) ((YY_CHAR) (c))
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart( yyin  )
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
|     
|     #define YY_LESS_LINENO(n)
|     #define YY_LINENO_REWIND_TO(ptr)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	int yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
| 
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = NULL;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart ( FILE *input_file  );
| void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
| void yy_delete_buffer ( YY_BUFFER_STATE b  );
| void yy_flush_buffer ( YY_BUFFER_STATE b  );
| void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state ( void );
| 
| static void yyensure_buffer_stack ( void );
| static void yy_load_buffer_state ( void );
| static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
| #define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );
| 
| void *yyalloc ( yy_size_t  );
| void *yyrealloc ( void *, yy_size_t  );
| void yyfree ( void *  );
| 
| #define yy_new_buffer yy_create_buffer
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| typedef flex_uint8_t YY_CHAR;
| 
| FILE *yyin = NULL, *yyout = NULL;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| int yylineno = 1;
| 
| extern char *yytext;
| #ifdef yytext_ptr
| #undef yytext_ptr
| #endif
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state ( void );
| static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
| static int yy_get_next_buffer ( void );
| static void yynoreturn yy_fatal_error ( const char* msg  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (int) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static const flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static const flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static const YY_CHAR yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static const YY_CHAR yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static const flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static const flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static const flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static const flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 460 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals ( void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy ( void );
| 
| int yyget_debug ( void );
| 
| void yyset_debug ( int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra ( void );
| 
| void yyset_extra ( YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in ( void );
| 
| void yyset_in  ( FILE * _in_str  );
| 
| FILE *yyget_out ( void );
| 
| void yyset_out  ( FILE * _out_str  );
| 
| 			int yyget_leng ( void );
| 
| char *yyget_text ( void );
| 
| int yyget_lineno ( void );
| 
| void yyset_lineno ( int _line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap ( void );
| #else
| extern int yywrap ( void );
| #endif
| #endif
| 
| #ifndef YY_NO_UNPUT
|     
|     static void yyunput ( int c, char *buf_ptr  );
|     
| #endif
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy ( char *, const char *, int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen ( const char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
| static int yyinput ( void );
| #else
| static int input ( void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		int n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK /*LINTED*/break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp, *yy_bp;
| 	int yy_act;
|     
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer( yyin, YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state(  );
| 		}
| 
| 	{
| #line 1 "conftest.l"
| 
| #line 685 "lex.yy.c"
| 
| 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| 
| find_rule: /* we branch to this label when backing up */
| 
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { /* IRIX 6.5 flex 2.5.4 underquotes its yyless argument.  */
|     yyless ((input () != 0)); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 10 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 794 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap(  ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| 	} /* end of user's declarations */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	char *source = (yytext_ptr);
| 	int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart( yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
| 			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 		/* "- 2" to take care of EOB's */
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	int yy_is_jam;
|     
| 	YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 		return yy_is_jam ? 0 : yy_current_state;
| }
| 
| #ifndef YY_NO_UNPUT
| 
|     static void yyunput (int c, char * yy_bp )
| {
| 	char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		int number_to_move = (yy_n_chars) + 2;
| 		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart( yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap(  ) )
| 						return 0;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer( yyin, YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
| 	yy_load_buffer_state(  );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state(  );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer( b, file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree( (void *) b->yy_ch_buf  );
| 
| 	yyfree( (void *) b  );
| }
| 
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer( b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state(  );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state(  );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state(  );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	yy_size_t num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
|       num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		yy_size_t grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return NULL;
| 
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = NULL;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer( b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (const char * yystr )
| {
|     
| 	return yy_scan_bytes( yystr, (int) strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = (yy_size_t) (_yybytes_len + 2);
| 	buf = (char *) yyalloc( n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer( buf, n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yynoreturn yy_fatal_error (const char* msg )
| {
| 			fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|     
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param _line_number line number
|  * 
|  */
| void yyset_lineno (int  _line_number )
| {
|     
|     yylineno = _line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param _in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  _in_str )
| {
|         yyin = _in_str ;
| }
| 
| void yyset_out (FILE *  _out_str )
| {
|         yyout = _out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  _bdebug )
| {
|         yy_flex_debug = _bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = NULL;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = NULL;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = NULL;
|     yyout = NULL;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer( YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, const char * s2, int n )
| {
| 		
| 	int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (const char * s )
| {
| 	int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 			return malloc(size);
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 		
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return realloc(ptr, size);
| }
| 
| void yyfree (void * ptr )
| {
| 			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 10 "conftest.l"
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:4607: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -ll  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: cannot find -ll
configure:4607: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| /* end confdefs.h.  */
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 6
| #define YY_FLEX_SUBMINOR_VERSION 4
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #ifndef SIZE_MAX
| #define SIZE_MAX               (~(size_t)0)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| /* begin standard C++ headers. */
| 
| /* TODO: this is always defined, so inline it */
| #define yyconst const
| 
| #if defined(__GNUC__) && __GNUC__ >= 3
| #define yynoreturn __attribute__((__noreturn__))
| #else
| #define yynoreturn
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an
|  *   integer in range [0..255] for use as an array index.
|  */
| #define YY_SC_TO_UI(c) ((YY_CHAR) (c))
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart( yyin  )
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
|     
|     #define YY_LESS_LINENO(n)
|     #define YY_LINENO_REWIND_TO(ptr)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	int yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
| 
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = NULL;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart ( FILE *input_file  );
| void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
| void yy_delete_buffer ( YY_BUFFER_STATE b  );
| void yy_flush_buffer ( YY_BUFFER_STATE b  );
| void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state ( void );
| 
| static void yyensure_buffer_stack ( void );
| static void yy_load_buffer_state ( void );
| static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
| #define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );
| 
| void *yyalloc ( yy_size_t  );
| void *yyrealloc ( void *, yy_size_t  );
| void yyfree ( void *  );
| 
| #define yy_new_buffer yy_create_buffer
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| typedef flex_uint8_t YY_CHAR;
| 
| FILE *yyin = NULL, *yyout = NULL;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| int yylineno = 1;
| 
| extern char *yytext;
| #ifdef yytext_ptr
| #undef yytext_ptr
| #endif
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state ( void );
| static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
| static int yy_get_next_buffer ( void );
| static void yynoreturn yy_fatal_error ( const char* msg  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (int) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static const flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static const flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static const YY_CHAR yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static const YY_CHAR yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static const flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static const flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static const flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static const flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 460 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals ( void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy ( void );
| 
| int yyget_debug ( void );
| 
| void yyset_debug ( int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra ( void );
| 
| void yyset_extra ( YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in ( void );
| 
| void yyset_in  ( FILE * _in_str  );
| 
| FILE *yyget_out ( void );
| 
| void yyset_out  ( FILE * _out_str  );
| 
| 			int yyget_leng ( void );
| 
| char *yyget_text ( void );
| 
| int yyget_lineno ( void );
| 
| void yyset_lineno ( int _line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap ( void );
| #else
| extern int yywrap ( void );
| #endif
| #endif
| 
| #ifndef YY_NO_UNPUT
|     
|     static void yyunput ( int c, char *buf_ptr  );
|     
| #endif
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy ( char *, const char *, int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen ( const char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
| static int yyinput ( void );
| #else
| static int input ( void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		int n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK /*LINTED*/break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp, *yy_bp;
| 	int yy_act;
|     
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer( yyin, YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state(  );
| 		}
| 
| 	{
| #line 1 "conftest.l"
| 
| #line 685 "lex.yy.c"
| 
| 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| 
| find_rule: /* we branch to this label when backing up */
| 
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { /* IRIX 6.5 flex 2.5.4 underquotes its yyless argument.  */
|     yyless ((input () != 0)); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 10 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 794 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap(  ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| 	} /* end of user's declarations */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	char *source = (yytext_ptr);
| 	int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart( yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
| 			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 		/* "- 2" to take care of EOB's */
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	int yy_is_jam;
|     
| 	YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 		return yy_is_jam ? 0 : yy_current_state;
| }
| 
| #ifndef YY_NO_UNPUT
| 
|     static void yyunput (int c, char * yy_bp )
| {
| 	char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		int number_to_move = (yy_n_chars) + 2;
| 		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart( yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap(  ) )
| 						return 0;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer( yyin, YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
| 	yy_load_buffer_state(  );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state(  );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer( b, file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree( (void *) b->yy_ch_buf  );
| 
| 	yyfree( (void *) b  );
| }
| 
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer( b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state(  );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state(  );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state(  );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	yy_size_t num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
|       num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		yy_size_t grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return NULL;
| 
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = NULL;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer( b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (const char * yystr )
| {
|     
| 	return yy_scan_bytes( yystr, (int) strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = (yy_size_t) (_yybytes_len + 2);
| 	buf = (char *) yyalloc( n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer( buf, n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yynoreturn yy_fatal_error (const char* msg )
| {
| 			fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|     
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param _line_number line number
|  * 
|  */
| void yyset_lineno (int  _line_number )
| {
|     
|     yylineno = _line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param _in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  _in_str )
| {
|         yyin = _in_str ;
| }
| 
| void yyset_out (FILE *  _out_str )
| {
|         yyout = _out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  _bdebug )
| {
|         yy_flex_debug = _bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = NULL;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = NULL;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = NULL;
|     yyout = NULL;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer( YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, const char * s2, int n )
| {
| 		
| 	int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (const char * s )
| {
| 	int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 			return malloc(size);
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 		
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return realloc(ptr, size);
| }
| 
| void yyfree (void * ptr )
| {
| 			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 10 "conftest.l"
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:4617: result: none needed
configure:4623: checking whether yytext is a pointer
configure:4640: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c   >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /tmp/ipo_iccHEj1du.o: in function `main':
/dev/shm/libelf/elfutils-0.175/conftest.l:17: undefined reference to `yywrap'
ld: /tmp/ipo_iccHEj1du.o: in function `yylex':
/dev/shm/libelf/elfutils-0.175/lex.yy.c:871: undefined reference to `yywrap'
ld: /tmp/ipo_iccHEj1du.o: in function `input':
/dev/shm/libelf/elfutils-0.175/lex.yy.c:1180: undefined reference to `yywrap'
ld: /dev/shm/libelf/elfutils-0.175/lex.yy.c:1180: undefined reference to `yywrap'
configure:4640: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| /* end confdefs.h.  */
| 
|   #define YYTEXT_POINTER 1
| 
| #line 3 "lex.yy.c"
| 
| #define  YY_INT_ALIGNED short int
| 
| /* A lexical scanner generated by flex */
| 
| #define FLEX_SCANNER
| #define YY_FLEX_MAJOR_VERSION 2
| #define YY_FLEX_MINOR_VERSION 6
| #define YY_FLEX_SUBMINOR_VERSION 4
| #if YY_FLEX_SUBMINOR_VERSION > 0
| #define FLEX_BETA
| #endif
| 
| /* First, we deal with  platform-specific or compiler-specific issues. */
| 
| /* begin standard C headers. */
| #include <stdio.h>
| #include <string.h>
| #include <errno.h>
| #include <stdlib.h>
| 
| /* end standard C headers. */
| 
| /* flex integer type definitions */
| 
| #ifndef FLEXINT_H
| #define FLEXINT_H
| 
| /* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
| 
| #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
| 
| /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
|  * if you want the limit (max/min) macros for int types. 
|  */
| #ifndef __STDC_LIMIT_MACROS
| #define __STDC_LIMIT_MACROS 1
| #endif
| 
| #include <inttypes.h>
| typedef int8_t flex_int8_t;
| typedef uint8_t flex_uint8_t;
| typedef int16_t flex_int16_t;
| typedef uint16_t flex_uint16_t;
| typedef int32_t flex_int32_t;
| typedef uint32_t flex_uint32_t;
| #else
| typedef signed char flex_int8_t;
| typedef short int flex_int16_t;
| typedef int flex_int32_t;
| typedef unsigned char flex_uint8_t; 
| typedef unsigned short int flex_uint16_t;
| typedef unsigned int flex_uint32_t;
| 
| /* Limits of integral types. */
| #ifndef INT8_MIN
| #define INT8_MIN               (-128)
| #endif
| #ifndef INT16_MIN
| #define INT16_MIN              (-32767-1)
| #endif
| #ifndef INT32_MIN
| #define INT32_MIN              (-2147483647-1)
| #endif
| #ifndef INT8_MAX
| #define INT8_MAX               (127)
| #endif
| #ifndef INT16_MAX
| #define INT16_MAX              (32767)
| #endif
| #ifndef INT32_MAX
| #define INT32_MAX              (2147483647)
| #endif
| #ifndef UINT8_MAX
| #define UINT8_MAX              (255U)
| #endif
| #ifndef UINT16_MAX
| #define UINT16_MAX             (65535U)
| #endif
| #ifndef UINT32_MAX
| #define UINT32_MAX             (4294967295U)
| #endif
| 
| #ifndef SIZE_MAX
| #define SIZE_MAX               (~(size_t)0)
| #endif
| 
| #endif /* ! C99 */
| 
| #endif /* ! FLEXINT_H */
| 
| /* begin standard C++ headers. */
| 
| /* TODO: this is always defined, so inline it */
| #define yyconst const
| 
| #if defined(__GNUC__) && __GNUC__ >= 3
| #define yynoreturn __attribute__((__noreturn__))
| #else
| #define yynoreturn
| #endif
| 
| /* Returned upon end-of-file. */
| #define YY_NULL 0
| 
| /* Promotes a possibly negative, possibly signed char to an
|  *   integer in range [0..255] for use as an array index.
|  */
| #define YY_SC_TO_UI(c) ((YY_CHAR) (c))
| 
| /* Enter a start condition.  This macro really ought to take a parameter,
|  * but we do it the disgusting crufty way forced on us by the ()-less
|  * definition of BEGIN.
|  */
| #define BEGIN (yy_start) = 1 + 2 *
| /* Translate the current start state into a value that can be later handed
|  * to BEGIN to return to the state.  The YYSTATE alias is for lex
|  * compatibility.
|  */
| #define YY_START (((yy_start) - 1) / 2)
| #define YYSTATE YY_START
| /* Action number for EOF rule of a given start state. */
| #define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
| /* Special action meaning "start processing a new file". */
| #define YY_NEW_FILE yyrestart( yyin  )
| #define YY_END_OF_BUFFER_CHAR 0
| 
| /* Size of default input buffer. */
| #ifndef YY_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k.
|  * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
|  * Ditto for the __ia64__ case accordingly.
|  */
| #define YY_BUF_SIZE 32768
| #else
| #define YY_BUF_SIZE 16384
| #endif /* __ia64__ */
| #endif
| 
| /* The state buf must be large enough to hold one state per character in the main buffer.
|  */
| #define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
| 
| #ifndef YY_TYPEDEF_YY_BUFFER_STATE
| #define YY_TYPEDEF_YY_BUFFER_STATE
| typedef struct yy_buffer_state *YY_BUFFER_STATE;
| #endif
| 
| #ifndef YY_TYPEDEF_YY_SIZE_T
| #define YY_TYPEDEF_YY_SIZE_T
| typedef size_t yy_size_t;
| #endif
| 
| extern int yyleng;
| 
| extern FILE *yyin, *yyout;
| 
| #define EOB_ACT_CONTINUE_SCAN 0
| #define EOB_ACT_END_OF_FILE 1
| #define EOB_ACT_LAST_MATCH 2
|     
|     #define YY_LESS_LINENO(n)
|     #define YY_LINENO_REWIND_TO(ptr)
|     
| /* Return all but the first "n" matched characters back to the input stream. */
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		*yy_cp = (yy_hold_char); \
| 		YY_RESTORE_YY_MORE_OFFSET \
| 		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
| 		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
| 		} \
| 	while ( 0 )
| #define unput(c) yyunput( c, (yytext_ptr)  )
| 
| #ifndef YY_STRUCT_YY_BUFFER_STATE
| #define YY_STRUCT_YY_BUFFER_STATE
| struct yy_buffer_state
| 	{
| 	FILE *yy_input_file;
| 
| 	char *yy_ch_buf;		/* input buffer */
| 	char *yy_buf_pos;		/* current position in input buffer */
| 
| 	/* Size of input buffer in bytes, not including room for EOB
| 	 * characters.
| 	 */
| 	int yy_buf_size;
| 
| 	/* Number of characters read into yy_ch_buf, not including EOB
| 	 * characters.
| 	 */
| 	int yy_n_chars;
| 
| 	/* Whether we "own" the buffer - i.e., we know we created it,
| 	 * and can realloc() it to grow it, and should free() it to
| 	 * delete it.
| 	 */
| 	int yy_is_our_buffer;
| 
| 	/* Whether this is an "interactive" input source; if so, and
| 	 * if we're using stdio for input, then we want to use getc()
| 	 * instead of fread(), to make sure we stop fetching input after
| 	 * each newline.
| 	 */
| 	int yy_is_interactive;
| 
| 	/* Whether we're considered to be at the beginning of a line.
| 	 * If so, '^' rules will be active on the next match, otherwise
| 	 * not.
| 	 */
| 	int yy_at_bol;
| 
|     int yy_bs_lineno; /**< The line count. */
|     int yy_bs_column; /**< The column count. */
| 
| 	/* Whether to try to fill the input buffer when we reach the
| 	 * end of it.
| 	 */
| 	int yy_fill_buffer;
| 
| 	int yy_buffer_status;
| 
| #define YY_BUFFER_NEW 0
| #define YY_BUFFER_NORMAL 1
| 	/* When an EOF's been seen but there's still some text to process
| 	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
| 	 * shouldn't try reading from the input source any more.  We might
| 	 * still have a bunch of tokens to match, though, because of
| 	 * possible backing-up.
| 	 *
| 	 * When we actually see the EOF, we change the status to "new"
| 	 * (via yyrestart()), so that the user can continue scanning by
| 	 * just pointing yyin at a new input file.
| 	 */
| #define YY_BUFFER_EOF_PENDING 2
| 
| 	};
| #endif /* !YY_STRUCT_YY_BUFFER_STATE */
| 
| /* Stack of input buffers. */
| static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
| static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
| static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
| 
| /* We provide macros for accessing buffer states in case in the
|  * future we want to put the buffer states in a more general
|  * "scanner state".
|  *
|  * Returns the top of the stack, or NULL.
|  */
| #define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
|                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
|                           : NULL)
| /* Same as previous macro, but useful when we know that the buffer stack is not
|  * NULL or when we need an lvalue. For internal use only.
|  */
| #define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
| 
| /* yy_hold_char holds the character lost when yytext is formed. */
| static char yy_hold_char;
| static int yy_n_chars;		/* number of characters read into yy_ch_buf */
| int yyleng;
| 
| /* Points to current character in buffer. */
| static char *yy_c_buf_p = NULL;
| static int yy_init = 0;		/* whether we need to initialize */
| static int yy_start = 0;	/* start state number */
| 
| /* Flag which is used to allow yywrap()'s to do buffer switches
|  * instead of setting up a fresh yyin.  A bit of a hack ...
|  */
| static int yy_did_buffer_switch_on_eof;
| 
| void yyrestart ( FILE *input_file  );
| void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
| YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
| void yy_delete_buffer ( YY_BUFFER_STATE b  );
| void yy_flush_buffer ( YY_BUFFER_STATE b  );
| void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
| void yypop_buffer_state ( void );
| 
| static void yyensure_buffer_stack ( void );
| static void yy_load_buffer_state ( void );
| static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
| #define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )
| 
| YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
| YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
| YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );
| 
| void *yyalloc ( yy_size_t  );
| void *yyrealloc ( void *, yy_size_t  );
| void yyfree ( void *  );
| 
| #define yy_new_buffer yy_create_buffer
| #define yy_set_interactive(is_interactive) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){ \
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
| 	}
| #define yy_set_bol(at_bol) \
| 	{ \
| 	if ( ! YY_CURRENT_BUFFER ){\
|         yyensure_buffer_stack (); \
| 		YY_CURRENT_BUFFER_LVALUE =    \
|             yy_create_buffer( yyin, YY_BUF_SIZE ); \
| 	} \
| 	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
| 	}
| #define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
| 
| /* Begin user sect3 */
| typedef flex_uint8_t YY_CHAR;
| 
| FILE *yyin = NULL, *yyout = NULL;
| 
| typedef int yy_state_type;
| 
| extern int yylineno;
| int yylineno = 1;
| 
| extern char *yytext;
| #ifdef yytext_ptr
| #undef yytext_ptr
| #endif
| #define yytext_ptr yytext
| 
| static yy_state_type yy_get_previous_state ( void );
| static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
| static int yy_get_next_buffer ( void );
| static void yynoreturn yy_fatal_error ( const char* msg  );
| 
| /* Done after the current pattern has been matched and before the
|  * corresponding action - sets up yytext.
|  */
| #define YY_DO_BEFORE_ACTION \
| 	(yytext_ptr) = yy_bp; \
| 	(yytext_ptr) -= (yy_more_len); \
| 	yyleng = (int) (yy_cp - (yytext_ptr)); \
| 	(yy_hold_char) = *yy_cp; \
| 	*yy_cp = '\0'; \
| 	(yy_c_buf_p) = yy_cp;
| #define YY_NUM_RULES 8
| #define YY_END_OF_BUFFER 9
| /* This struct is not used in this scanner,
|    but its presence is necessary. */
| struct yy_trans_info
| 	{
| 	flex_int32_t yy_verify;
| 	flex_int32_t yy_nxt;
| 	};
| static const flex_int16_t yy_acclist[23] =
|     {   0,
|         9,    7,    8,    8,    1,    7,    8,    2,    7,    8,
|         3,    7,    8,    4,    7,    8,    5,    7,    8,    6,
|         7,    8
|     } ;
| 
| static const flex_int16_t yy_accept[14] =
|     {   0,
|         1,    1,    1,    2,    4,    5,    8,   11,   14,   17,
|        20,   23,   23
|     } ;
| 
| static const YY_CHAR yy_ec[256] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
| 
|         7,    8,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
| 
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
|         1,    1,    1,    1,    1
|     } ;
| 
| static const YY_CHAR yy_meta[9] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1
|     } ;
| 
| static const flex_int16_t yy_base[13] =
|     {   0,
|         0,    0,    9,   10,   10,   10,   10,   10,   10,   10,
|        10,   10
|     } ;
| 
| static const flex_int16_t yy_def[13] =
|     {   0,
|        12,    1,   12,   12,   12,   12,   12,   12,   12,   12,
|        12,    0
|     } ;
| 
| static const flex_int16_t yy_nxt[19] =
|     {   0,
|         4,    5,    6,    7,    8,    9,   10,   11,   12,    3,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| static const flex_int16_t yy_chk[19] =
|     {   0,
|         1,    1,    1,    1,    1,    1,    1,    1,    3,   12,
|        12,   12,   12,   12,   12,   12,   12,   12
|     } ;
| 
| extern int yy_flex_debug;
| int yy_flex_debug = 0;
| 
| static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
| static char *yy_full_match;
| static int yy_lp;
| #define REJECT \
| { \
| *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
| yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
| ++(yy_lp); \
| goto find_rule; \
| }
| 
| static int yy_more_flag = 0;
| static int yy_more_len = 0;
| #define yymore() ((yy_more_flag) = 1)
| #define YY_MORE_ADJ (yy_more_len)
| #define YY_RESTORE_YY_MORE_OFFSET
| char *yytext;
| #line 1 "conftest.l"
| #line 460 "lex.yy.c"
| 
| #define INITIAL 0
| 
| #ifndef YY_NO_UNISTD_H
| /* Special case for "unistd.h", since it is non-ANSI. We include it way
|  * down here because we want the user's section 1 to have been scanned first.
|  * The user has a chance to override it with an option.
|  */
| #include <unistd.h>
| #endif
| 
| #ifndef YY_EXTRA_TYPE
| #define YY_EXTRA_TYPE void *
| #endif
| 
| static int yy_init_globals ( void );
| 
| /* Accessor methods to globals.
|    These are made visible to non-reentrant scanners for convenience. */
| 
| int yylex_destroy ( void );
| 
| int yyget_debug ( void );
| 
| void yyset_debug ( int debug_flag  );
| 
| YY_EXTRA_TYPE yyget_extra ( void );
| 
| void yyset_extra ( YY_EXTRA_TYPE user_defined  );
| 
| FILE *yyget_in ( void );
| 
| void yyset_in  ( FILE * _in_str  );
| 
| FILE *yyget_out ( void );
| 
| void yyset_out  ( FILE * _out_str  );
| 
| 			int yyget_leng ( void );
| 
| char *yyget_text ( void );
| 
| int yyget_lineno ( void );
| 
| void yyset_lineno ( int _line_number  );
| 
| /* Macros after this point can all be overridden by user definitions in
|  * section 1.
|  */
| 
| #ifndef YY_SKIP_YYWRAP
| #ifdef __cplusplus
| extern "C" int yywrap ( void );
| #else
| extern int yywrap ( void );
| #endif
| #endif
| 
| #ifndef YY_NO_UNPUT
|     
|     static void yyunput ( int c, char *buf_ptr  );
|     
| #endif
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy ( char *, const char *, int );
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen ( const char * );
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
| static int yyinput ( void );
| #else
| static int input ( void );
| #endif
| 
| #endif
| 
| /* Amount of stuff to slurp up with each read. */
| #ifndef YY_READ_BUF_SIZE
| #ifdef __ia64__
| /* On IA-64, the buffer size is 16k, not 8k */
| #define YY_READ_BUF_SIZE 16384
| #else
| #define YY_READ_BUF_SIZE 8192
| #endif /* __ia64__ */
| #endif
| 
| /* Copy whatever the last rule matched to the standard output. */
| #ifndef ECHO
| /* This used to be an fputs(), but since the string might contain NUL's,
|  * we now use fwrite().
|  */
| #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
| #endif
| 
| /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
|  * is returned in "result".
|  */
| #ifndef YY_INPUT
| #define YY_INPUT(buf,result,max_size) \
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
| 		{ \
| 		int c = '*'; \
| 		int n; \
| 		for ( n = 0; n < max_size && \
| 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
| 			buf[n] = (char) c; \
| 		if ( c == '\n' ) \
| 			buf[n++] = (char) c; \
| 		if ( c == EOF && ferror( yyin ) ) \
| 			YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 		result = n; \
| 		} \
| 	else \
| 		{ \
| 		errno=0; \
| 		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
| 			{ \
| 			if( errno != EINTR) \
| 				{ \
| 				YY_FATAL_ERROR( "input in flex scanner failed" ); \
| 				break; \
| 				} \
| 			errno=0; \
| 			clearerr(yyin); \
| 			} \
| 		}\
| \
| 
| #endif
| 
| /* No semi-colon after return; correct usage is to write "yyterminate();" -
|  * we don't want an extra ';' after the "return" because that will cause
|  * some compilers to complain about unreachable statements.
|  */
| #ifndef yyterminate
| #define yyterminate() return YY_NULL
| #endif
| 
| /* Number of entries by which start-condition stack grows. */
| #ifndef YY_START_STACK_INCR
| #define YY_START_STACK_INCR 25
| #endif
| 
| /* Report a fatal error. */
| #ifndef YY_FATAL_ERROR
| #define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
| #endif
| 
| /* end tables serialization structures and prototypes */
| 
| /* Default declaration of generated scanner - a define so the user can
|  * easily add parameters.
|  */
| #ifndef YY_DECL
| #define YY_DECL_IS_OURS 1
| 
| extern int yylex (void);
| 
| #define YY_DECL int yylex (void)
| #endif /* !YY_DECL */
| 
| /* Code executed at the beginning of each rule, after yytext and yyleng
|  * have been set up.
|  */
| #ifndef YY_USER_ACTION
| #define YY_USER_ACTION
| #endif
| 
| /* Code executed at the end of each rule. */
| #ifndef YY_BREAK
| #define YY_BREAK /*LINTED*/break;
| #endif
| 
| #define YY_RULE_SETUP \
| 	YY_USER_ACTION
| 
| /** The main scanner function which does all the work.
|  */
| YY_DECL
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp, *yy_bp;
| 	int yy_act;
|     
| 	if ( !(yy_init) )
| 		{
| 		(yy_init) = 1;
| 
| #ifdef YY_USER_INIT
| 		YY_USER_INIT;
| #endif
| 
|         /* Create the reject buffer large enough to save one state per allowed character. */
|         if ( ! (yy_state_buf) )
|             (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
|             if ( ! (yy_state_buf) )
|                 YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
| 
| 		if ( ! (yy_start) )
| 			(yy_start) = 1;	/* first start state */
| 
| 		if ( ! yyin )
| 			yyin = stdin;
| 
| 		if ( ! yyout )
| 			yyout = stdout;
| 
| 		if ( ! YY_CURRENT_BUFFER ) {
| 			yyensure_buffer_stack ();
| 			YY_CURRENT_BUFFER_LVALUE =
| 				yy_create_buffer( yyin, YY_BUF_SIZE );
| 		}
| 
| 		yy_load_buffer_state(  );
| 		}
| 
| 	{
| #line 1 "conftest.l"
| 
| #line 685 "lex.yy.c"
| 
| 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
| 		{
| 		(yy_more_len) = 0;
| 		if ( (yy_more_flag) )
| 			{
| 			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			(yy_more_flag) = 0;
| 			}
| 		yy_cp = (yy_c_buf_p);
| 
| 		/* Support of yytext. */
| 		*yy_cp = (yy_hold_char);
| 
| 		/* yy_bp points to the position in yy_ch_buf of the start of
| 		 * the current run.
| 		 */
| 		yy_bp = yy_cp;
| 
| 		yy_current_state = (yy_start);
| 
| 		(yy_state_ptr) = (yy_state_buf);
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| yy_match:
| 		do
| 			{
| 			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
| 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 				{
| 				yy_current_state = (int) yy_def[yy_current_state];
| 				if ( yy_current_state >= 13 )
| 					yy_c = yy_meta[yy_c];
| 				}
| 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 			*(yy_state_ptr)++ = yy_current_state;
| 			++yy_cp;
| 			}
| 		while ( yy_base[yy_current_state] != 10 );
| 
| yy_find_action:
| 		yy_current_state = *--(yy_state_ptr);
| 		(yy_lp) = yy_accept[yy_current_state];
| 
| find_rule: /* we branch to this label when backing up */
| 
| 		for ( ; ; ) /* until we find what rule we matched */
| 			{
| 			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
| 				{
| 				yy_act = yy_acclist[(yy_lp)];
| 					{
| 					(yy_full_match) = yy_cp;
| 					break;
| 					}
| 				}
| 			--yy_cp;
| 			yy_current_state = *--(yy_state_ptr);
| 			(yy_lp) = yy_accept[yy_current_state];
| 			}
| 
| 		YY_DO_BEFORE_ACTION;
| 
| do_action:	/* This label is used only to access EOF actions. */
| 
| 		switch ( yy_act )
| 	{ /* beginning of action switch */
| case 1:
| YY_RULE_SETUP
| #line 2 "conftest.l"
| { ECHO; }
| 	YY_BREAK
| case 2:
| YY_RULE_SETUP
| #line 3 "conftest.l"
| { REJECT; }
| 	YY_BREAK
| case 3:
| YY_RULE_SETUP
| #line 4 "conftest.l"
| { yymore (); }
| 	YY_BREAK
| case 4:
| YY_RULE_SETUP
| #line 5 "conftest.l"
| { yyless (1); }
| 	YY_BREAK
| case 5:
| YY_RULE_SETUP
| #line 6 "conftest.l"
| { /* IRIX 6.5 flex 2.5.4 underquotes its yyless argument.  */
|     yyless ((input () != 0)); }
| 	YY_BREAK
| case 6:
| YY_RULE_SETUP
| #line 8 "conftest.l"
| { unput (yytext[0]); }
| 	YY_BREAK
| case 7:
| YY_RULE_SETUP
| #line 9 "conftest.l"
| { BEGIN INITIAL; }
| 	YY_BREAK
| case 8:
| YY_RULE_SETUP
| #line 10 "conftest.l"
| ECHO;
| 	YY_BREAK
| #line 794 "lex.yy.c"
| 			case YY_STATE_EOF(INITIAL):
| 				yyterminate();
| 
| 	case YY_END_OF_BUFFER:
| 		{
| 		/* Amount of text matched not including the EOB char. */
| 		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
| 
| 		/* Undo the effects of YY_DO_BEFORE_ACTION. */
| 		*yy_cp = (yy_hold_char);
| 		YY_RESTORE_YY_MORE_OFFSET
| 
| 		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
| 			{
| 			/* We're scanning a new file or input source.  It's
| 			 * possible that this happened because the user
| 			 * just pointed yyin at a new source and called
| 			 * yylex().  If so, then we have to assure
| 			 * consistency between YY_CURRENT_BUFFER and our
| 			 * globals.  Here is the right place to do so, because
| 			 * this is the first action (other than possibly a
| 			 * back-up) that will match for the new input source.
| 			 */
| 			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
| 			}
| 
| 		/* Note that here we test for yy_c_buf_p "<=" to the position
| 		 * of the first EOB in the buffer, since yy_c_buf_p will
| 		 * already have been incremented past the NUL character
| 		 * (since all states make transitions on EOB to the
| 		 * end-of-buffer state).  Contrast this with the test
| 		 * in input().
| 		 */
| 		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			{ /* This was really a NUL. */
| 			yy_state_type yy_next_state;
| 
| 			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
| 
| 			yy_current_state = yy_get_previous_state(  );
| 
| 			/* Okay, we're now positioned to make the NUL
| 			 * transition.  We couldn't have
| 			 * yy_get_previous_state() go ahead and do it
| 			 * for us because it doesn't know how to deal
| 			 * with the possibility of jamming (and we don't
| 			 * want to build jamming into it because then it
| 			 * will run more slowly).
| 			 */
| 
| 			yy_next_state = yy_try_NUL_trans( yy_current_state );
| 
| 			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 
| 			if ( yy_next_state )
| 				{
| 				/* Consume the NUL. */
| 				yy_cp = ++(yy_c_buf_p);
| 				yy_current_state = yy_next_state;
| 				goto yy_match;
| 				}
| 
| 			else
| 				{
| 				yy_cp = (yy_c_buf_p);
| 				goto yy_find_action;
| 				}
| 			}
| 
| 		else switch ( yy_get_next_buffer(  ) )
| 			{
| 			case EOB_ACT_END_OF_FILE:
| 				{
| 				(yy_did_buffer_switch_on_eof) = 0;
| 
| 				if ( yywrap(  ) )
| 					{
| 					/* Note: because we've taken care in
| 					 * yy_get_next_buffer() to have set up
| 					 * yytext, we can now set up
| 					 * yy_c_buf_p so that if some total
| 					 * hoser (like flex itself) wants to
| 					 * call the scanner after we return the
| 					 * YY_NULL, it'll still work - another
| 					 * YY_NULL will get returned.
| 					 */
| 					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
| 
| 					yy_act = YY_STATE_EOF(YY_START);
| 					goto do_action;
| 					}
| 
| 				else
| 					{
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| 					}
| 				break;
| 				}
| 
| 			case EOB_ACT_CONTINUE_SCAN:
| 				(yy_c_buf_p) =
| 					(yytext_ptr) + yy_amount_of_matched_text;
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_match;
| 
| 			case EOB_ACT_LAST_MATCH:
| 				(yy_c_buf_p) =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
| 
| 				yy_current_state = yy_get_previous_state(  );
| 
| 				yy_cp = (yy_c_buf_p);
| 				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
| 				goto yy_find_action;
| 			}
| 		break;
| 		}
| 
| 	default:
| 		YY_FATAL_ERROR(
| 			"fatal flex scanner internal error--no action found" );
| 	} /* end of action switch */
| 		} /* end of scanning one token */
| 	} /* end of user's declarations */
| } /* end of yylex */
| 
| /* yy_get_next_buffer - try to read in a new buffer
|  *
|  * Returns a code representing an action:
|  *	EOB_ACT_LAST_MATCH -
|  *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
|  *	EOB_ACT_END_OF_FILE - end of file
|  */
| static int yy_get_next_buffer (void)
| {
|     	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
| 	char *source = (yytext_ptr);
| 	int number_to_move, i;
| 	int ret_val;
| 
| 	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
| 		YY_FATAL_ERROR(
| 		"fatal flex scanner internal error--end of buffer missed" );
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
| 		{ /* Don't try to fill the buffer, so this is an EOF. */
| 		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
| 			{
| 			/* We matched a single character, the EOB, so
| 			 * treat this as a final EOF.
| 			 */
| 			return EOB_ACT_END_OF_FILE;
| 			}
| 
| 		else
| 			{
| 			/* We matched some text prior to the EOB, first
| 			 * process it.
| 			 */
| 			return EOB_ACT_LAST_MATCH;
| 			}
| 		}
| 
| 	/* Try to read more data. */
| 
| 	/* First move last chars to start of buffer. */
| 	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);
| 
| 	for ( i = 0; i < number_to_move; ++i )
| 		*(dest++) = *(source++);
| 
| 	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
| 		/* don't do the read, it's not guaranteed to return an EOF,
| 		 * just force an EOF
| 		 */
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
| 
| 	else
| 		{
| 			int num_to_read =
| 			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
| 
| 		while ( num_to_read <= 0 )
| 			{ /* Not enough room in the buffer - grow it. */
| 
| 			YY_FATAL_ERROR(
| "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
| 
| 			}
| 
| 		if ( num_to_read > YY_READ_BUF_SIZE )
| 			num_to_read = YY_READ_BUF_SIZE;
| 
| 		/* Read in more data. */
| 		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
| 			(yy_n_chars), num_to_read );
| 
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	if ( (yy_n_chars) == 0 )
| 		{
| 		if ( number_to_move == YY_MORE_ADJ )
| 			{
| 			ret_val = EOB_ACT_END_OF_FILE;
| 			yyrestart( yyin  );
| 			}
| 
| 		else
| 			{
| 			ret_val = EOB_ACT_LAST_MATCH;
| 			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
| 				YY_BUFFER_EOF_PENDING;
| 			}
| 		}
| 
| 	else
| 		ret_val = EOB_ACT_CONTINUE_SCAN;
| 
| 	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
| 		/* Extend the array by 50%, plus the number we really need. */
| 		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
| 		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
| 			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
| 		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
| 		/* "- 2" to take care of EOB's */
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
| 	}
| 
| 	(yy_n_chars) += number_to_move;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
| 	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
| 
| 	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
| 
| 	return ret_val;
| }
| 
| /* yy_get_previous_state - get the state just before the EOB char was reached */
| 
|     static yy_state_type yy_get_previous_state (void)
| {
| 	yy_state_type yy_current_state;
| 	char *yy_cp;
|     
| 	yy_current_state = (yy_start);
| 
| 	(yy_state_ptr) = (yy_state_buf);
| 	*(yy_state_ptr)++ = yy_current_state;
| 
| 	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
| 		{
| 		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
| 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 			{
| 			yy_current_state = (int) yy_def[yy_current_state];
| 			if ( yy_current_state >= 13 )
| 				yy_c = yy_meta[yy_c];
| 			}
| 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 		*(yy_state_ptr)++ = yy_current_state;
| 		}
| 
| 	return yy_current_state;
| }
| 
| /* yy_try_NUL_trans - try to make a transition on the NUL character
|  *
|  * synopsis
|  *	next_state = yy_try_NUL_trans( current_state );
|  */
|     static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
| {
| 	int yy_is_jam;
|     
| 	YY_CHAR yy_c = 1;
| 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
| 		{
| 		yy_current_state = (int) yy_def[yy_current_state];
| 		if ( yy_current_state >= 13 )
| 			yy_c = yy_meta[yy_c];
| 		}
| 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
| 	yy_is_jam = (yy_current_state == 12);
| 	if ( ! yy_is_jam )
| 		*(yy_state_ptr)++ = yy_current_state;
| 
| 		return yy_is_jam ? 0 : yy_current_state;
| }
| 
| #ifndef YY_NO_UNPUT
| 
|     static void yyunput (int c, char * yy_bp )
| {
| 	char *yy_cp;
|     
|     yy_cp = (yy_c_buf_p);
| 
| 	/* undo effects of setting up yytext */
| 	*yy_cp = (yy_hold_char);
| 
| 	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 		{ /* need to shift things up to make room */
| 		/* +2 for EOB chars. */
| 		int number_to_move = (yy_n_chars) + 2;
| 		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
| 					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
| 		char *source =
| 				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
| 
| 		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
| 			*--dest = *--source;
| 
| 		yy_cp += (int) (dest - source);
| 		yy_bp += (int) (dest - source);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
| 			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
| 
| 		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
| 			YY_FATAL_ERROR( "flex scanner push-back overflow" );
| 		}
| 
| 	*--yy_cp = (char) c;
| 
| 	(yytext_ptr) = yy_bp;
| 	(yy_hold_char) = *yy_cp;
| 	(yy_c_buf_p) = yy_cp;
| }
| 
| #endif
| 
| #ifndef YY_NO_INPUT
| #ifdef __cplusplus
|     static int yyinput (void)
| #else
|     static int input  (void)
| #endif
| 
| {
| 	int c;
|     
| 	*(yy_c_buf_p) = (yy_hold_char);
| 
| 	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
| 		{
| 		/* yy_c_buf_p now points to the character we want to return.
| 		 * If this occurs *before* the EOB characters, then it's a
| 		 * valid NUL; if not, then we've hit the end of the buffer.
| 		 */
| 		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
| 			/* This was really a NUL. */
| 			*(yy_c_buf_p) = '\0';
| 
| 		else
| 			{ /* need more input */
| 			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
| 			++(yy_c_buf_p);
| 
| 			switch ( yy_get_next_buffer(  ) )
| 				{
| 				case EOB_ACT_LAST_MATCH:
| 					/* This happens because yy_g_n_b()
| 					 * sees that we've accumulated a
| 					 * token and flags that we need to
| 					 * try matching the token before
| 					 * proceeding.  But for input(),
| 					 * there's no matching to consider.
| 					 * So convert the EOB_ACT_LAST_MATCH
| 					 * to EOB_ACT_END_OF_FILE.
| 					 */
| 
| 					/* Reset buffer status. */
| 					yyrestart( yyin );
| 
| 					/*FALLTHROUGH*/
| 
| 				case EOB_ACT_END_OF_FILE:
| 					{
| 					if ( yywrap(  ) )
| 						return 0;
| 
| 					if ( ! (yy_did_buffer_switch_on_eof) )
| 						YY_NEW_FILE;
| #ifdef __cplusplus
| 					return yyinput();
| #else
| 					return input();
| #endif
| 					}
| 
| 				case EOB_ACT_CONTINUE_SCAN:
| 					(yy_c_buf_p) = (yytext_ptr) + offset;
| 					break;
| 				}
| 			}
| 		}
| 
| 	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
| 	*(yy_c_buf_p) = '\0';	/* preserve yytext */
| 	(yy_hold_char) = *++(yy_c_buf_p);
| 
| 	return c;
| }
| #endif	/* ifndef YY_NO_INPUT */
| 
| /** Immediately switch to a different input stream.
|  * @param input_file A readable stream.
|  * 
|  * @note This function does not reset the start condition to @c INITIAL .
|  */
|     void yyrestart  (FILE * input_file )
| {
|     
| 	if ( ! YY_CURRENT_BUFFER ){
|         yyensure_buffer_stack ();
| 		YY_CURRENT_BUFFER_LVALUE =
|             yy_create_buffer( yyin, YY_BUF_SIZE );
| 	}
| 
| 	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
| 	yy_load_buffer_state(  );
| }
| 
| /** Switch to a different input buffer.
|  * @param new_buffer The new input buffer.
|  * 
|  */
|     void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
| {
|     
| 	/* TODO. We should be able to replace this entire function body
| 	 * with
| 	 *		yypop_buffer_state();
| 	 *		yypush_buffer_state(new_buffer);
|      */
| 	yyensure_buffer_stack ();
| 	if ( YY_CURRENT_BUFFER == new_buffer )
| 		return;
| 
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 	yy_load_buffer_state(  );
| 
| 	/* We don't actually know whether we did this switch during
| 	 * EOF (yywrap()) processing, but the only time this flag
| 	 * is looked at is after yywrap() is called, so it's safe
| 	 * to go ahead and always set it.
| 	 */
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| static void yy_load_buffer_state  (void)
| {
|     	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
| 	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
| 	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
| 	(yy_hold_char) = *(yy_c_buf_p);
| }
| 
| /** Allocate and initialize an input buffer state.
|  * @param file A readable stream.
|  * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
|  * 
|  * @return the allocated buffer state.
|  */
|     YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_buf_size = size;
| 
| 	/* yy_ch_buf has to be 2 characters longer than the size given because
| 	 * we need to put in 2 end-of-buffer characters.
| 	 */
| 	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
| 	if ( ! b->yy_ch_buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
| 
| 	b->yy_is_our_buffer = 1;
| 
| 	yy_init_buffer( b, file );
| 
| 	return b;
| }
| 
| /** Destroy the buffer.
|  * @param b a buffer created with yy_create_buffer()
|  * 
|  */
|     void yy_delete_buffer (YY_BUFFER_STATE  b )
| {
|     
| 	if ( ! b )
| 		return;
| 
| 	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
| 		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
| 
| 	if ( b->yy_is_our_buffer )
| 		yyfree( (void *) b->yy_ch_buf  );
| 
| 	yyfree( (void *) b  );
| }
| 
| /* Initializes or reinitializes a buffer.
|  * This function is sometimes called more than once on the same buffer,
|  * such as during a yyrestart() or at EOF.
|  */
|     static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
| 
| {
| 	int oerrno = errno;
|     
| 	yy_flush_buffer( b );
| 
| 	b->yy_input_file = file;
| 	b->yy_fill_buffer = 1;
| 
|     /* If b is the current buffer, then yy_init_buffer was _probably_
|      * called from yyrestart() or through yy_get_next_buffer.
|      * In that case, we don't want to reset the lineno or column.
|      */
|     if (b != YY_CURRENT_BUFFER){
|         b->yy_bs_lineno = 1;
|         b->yy_bs_column = 0;
|     }
| 
|         b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
|     
| 	errno = oerrno;
| }
| 
| /** Discard all buffered characters. On the next scan, YY_INPUT will be called.
|  * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
|  * 
|  */
|     void yy_flush_buffer (YY_BUFFER_STATE  b )
| {
|     	if ( ! b )
| 		return;
| 
| 	b->yy_n_chars = 0;
| 
| 	/* We always need two end-of-buffer characters.  The first causes
| 	 * a transition to the end-of-buffer state.  The second causes
| 	 * a jam in that state.
| 	 */
| 	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
| 	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b->yy_buf_pos = &b->yy_ch_buf[0];
| 
| 	b->yy_at_bol = 1;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	if ( b == YY_CURRENT_BUFFER )
| 		yy_load_buffer_state(  );
| }
| 
| /** Pushes the new state onto the stack. The new state becomes
|  *  the current state. This function will allocate the stack
|  *  if necessary.
|  *  @param new_buffer The new state.
|  *  
|  */
| void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
| {
|     	if (new_buffer == NULL)
| 		return;
| 
| 	yyensure_buffer_stack();
| 
| 	/* This block is copied from yy_switch_to_buffer. */
| 	if ( YY_CURRENT_BUFFER )
| 		{
| 		/* Flush out information for old buffer. */
| 		*(yy_c_buf_p) = (yy_hold_char);
| 		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
| 		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
| 		}
| 
| 	/* Only push if top exists. Otherwise, replace top. */
| 	if (YY_CURRENT_BUFFER)
| 		(yy_buffer_stack_top)++;
| 	YY_CURRENT_BUFFER_LVALUE = new_buffer;
| 
| 	/* copied from yy_switch_to_buffer. */
| 	yy_load_buffer_state(  );
| 	(yy_did_buffer_switch_on_eof) = 1;
| }
| 
| /** Removes and deletes the top of the stack, if present.
|  *  The next element becomes the new top.
|  *  
|  */
| void yypop_buffer_state (void)
| {
|     	if (!YY_CURRENT_BUFFER)
| 		return;
| 
| 	yy_delete_buffer(YY_CURRENT_BUFFER );
| 	YY_CURRENT_BUFFER_LVALUE = NULL;
| 	if ((yy_buffer_stack_top) > 0)
| 		--(yy_buffer_stack_top);
| 
| 	if (YY_CURRENT_BUFFER) {
| 		yy_load_buffer_state(  );
| 		(yy_did_buffer_switch_on_eof) = 1;
| 	}
| }
| 
| /* Allocates the stack if it does not exist.
|  *  Guarantees space for at least one push.
|  */
| static void yyensure_buffer_stack (void)
| {
| 	yy_size_t num_to_alloc;
|     
| 	if (!(yy_buffer_stack)) {
| 
| 		/* First allocation is just for 2 elements, since we don't know if this
| 		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
| 		 * immediate realloc on the next call.
|          */
|       num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
| 								(num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
| 
| 		(yy_buffer_stack_max) = num_to_alloc;
| 		(yy_buffer_stack_top) = 0;
| 		return;
| 	}
| 
| 	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
| 
| 		/* Increase the buffer to prepare for a possible push. */
| 		yy_size_t grow_size = 8 /* arbitrary grow size */;
| 
| 		num_to_alloc = (yy_buffer_stack_max) + grow_size;
| 		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
| 								((yy_buffer_stack),
| 								num_to_alloc * sizeof(struct yy_buffer_state*)
| 								);
| 		if ( ! (yy_buffer_stack) )
| 			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
| 
| 		/* zero only the new slots.*/
| 		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
| 		(yy_buffer_stack_max) = num_to_alloc;
| 	}
| }
| 
| /** Setup the input buffer state to scan directly from a user-specified character buffer.
|  * @param base the character buffer
|  * @param size the size in bytes of the character buffer
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
| {
| 	YY_BUFFER_STATE b;
|     
| 	if ( size < 2 ||
| 	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
| 	     base[size-1] != YY_END_OF_BUFFER_CHAR )
| 		/* They forgot to leave room for the EOB's. */
| 		return NULL;
| 
| 	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
| 
| 	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
| 	b->yy_buf_pos = b->yy_ch_buf = base;
| 	b->yy_is_our_buffer = 0;
| 	b->yy_input_file = NULL;
| 	b->yy_n_chars = b->yy_buf_size;
| 	b->yy_is_interactive = 0;
| 	b->yy_at_bol = 1;
| 	b->yy_fill_buffer = 0;
| 	b->yy_buffer_status = YY_BUFFER_NEW;
| 
| 	yy_switch_to_buffer( b  );
| 
| 	return b;
| }
| 
| /** Setup the input buffer state to scan a string. The next call to yylex() will
|  * scan from a @e copy of @a str.
|  * @param yystr a NUL-terminated string to scan
|  * 
|  * @return the newly allocated buffer state object.
|  * @note If you want to scan bytes that may contain NUL values, then use
|  *       yy_scan_bytes() instead.
|  */
| YY_BUFFER_STATE yy_scan_string (const char * yystr )
| {
|     
| 	return yy_scan_bytes( yystr, (int) strlen(yystr) );
| }
| 
| /** Setup the input buffer state to scan the given bytes. The next call to yylex() will
|  * scan from a @e copy of @a bytes.
|  * @param yybytes the byte buffer to scan
|  * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
|  * 
|  * @return the newly allocated buffer state object.
|  */
| YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
| {
| 	YY_BUFFER_STATE b;
| 	char *buf;
| 	yy_size_t n;
| 	int i;
|     
| 	/* Get memory for full buffer, including space for trailing EOB's. */
| 	n = (yy_size_t) (_yybytes_len + 2);
| 	buf = (char *) yyalloc( n  );
| 	if ( ! buf )
| 		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
| 
| 	for ( i = 0; i < _yybytes_len; ++i )
| 		buf[i] = yybytes[i];
| 
| 	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
| 
| 	b = yy_scan_buffer( buf, n );
| 	if ( ! b )
| 		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
| 
| 	/* It's okay to grow etc. this buffer, and we should throw it
| 	 * away when we're done.
| 	 */
| 	b->yy_is_our_buffer = 1;
| 
| 	return b;
| }
| 
| #ifndef YY_EXIT_FAILURE
| #define YY_EXIT_FAILURE 2
| #endif
| 
| static void yynoreturn yy_fatal_error (const char* msg )
| {
| 			fprintf( stderr, "%s\n", msg );
| 	exit( YY_EXIT_FAILURE );
| }
| 
| /* Redefine yyless() so it works in section 3 code. */
| 
| #undef yyless
| #define yyless(n) \
| 	do \
| 		{ \
| 		/* Undo effects of setting up yytext. */ \
|         int yyless_macro_arg = (n); \
|         YY_LESS_LINENO(yyless_macro_arg);\
| 		yytext[yyleng] = (yy_hold_char); \
| 		(yy_c_buf_p) = yytext + yyless_macro_arg; \
| 		(yy_hold_char) = *(yy_c_buf_p); \
| 		*(yy_c_buf_p) = '\0'; \
| 		yyleng = yyless_macro_arg; \
| 		} \
| 	while ( 0 )
| 
| /* Accessor  methods (get/set functions) to struct members. */
| 
| /** Get the current line number.
|  * 
|  */
| int yyget_lineno  (void)
| {
|     
|     return yylineno;
| }
| 
| /** Get the input stream.
|  * 
|  */
| FILE *yyget_in  (void)
| {
|         return yyin;
| }
| 
| /** Get the output stream.
|  * 
|  */
| FILE *yyget_out  (void)
| {
|         return yyout;
| }
| 
| /** Get the length of the current token.
|  * 
|  */
| int yyget_leng  (void)
| {
|         return yyleng;
| }
| 
| /** Get the current token.
|  * 
|  */
| 
| char *yyget_text  (void)
| {
|         return yytext;
| }
| 
| /** Set the current line number.
|  * @param _line_number line number
|  * 
|  */
| void yyset_lineno (int  _line_number )
| {
|     
|     yylineno = _line_number;
| }
| 
| /** Set the input stream. This does not discard the current
|  * input buffer.
|  * @param _in_str A readable stream.
|  * 
|  * @see yy_switch_to_buffer
|  */
| void yyset_in (FILE *  _in_str )
| {
|         yyin = _in_str ;
| }
| 
| void yyset_out (FILE *  _out_str )
| {
|         yyout = _out_str ;
| }
| 
| int yyget_debug  (void)
| {
|         return yy_flex_debug;
| }
| 
| void yyset_debug (int  _bdebug )
| {
|         yy_flex_debug = _bdebug ;
| }
| 
| static int yy_init_globals (void)
| {
|         /* Initialization is the same as for the non-reentrant scanner.
|      * This function is called from yylex_destroy(), so don't allocate here.
|      */
| 
|     (yy_buffer_stack) = NULL;
|     (yy_buffer_stack_top) = 0;
|     (yy_buffer_stack_max) = 0;
|     (yy_c_buf_p) = NULL;
|     (yy_init) = 0;
|     (yy_start) = 0;
| 
|     (yy_state_buf) = 0;
|     (yy_state_ptr) = 0;
|     (yy_full_match) = 0;
|     (yy_lp) = 0;
| 
| /* Defined in main.c */
| #ifdef YY_STDINIT
|     yyin = stdin;
|     yyout = stdout;
| #else
|     yyin = NULL;
|     yyout = NULL;
| #endif
| 
|     /* For future reference: Set errno on error, since we are called by
|      * yylex_init()
|      */
|     return 0;
| }
| 
| /* yylex_destroy is for both reentrant and non-reentrant scanners. */
| int yylex_destroy  (void)
| {
|     
|     /* Pop the buffer stack, destroying each element. */
| 	while(YY_CURRENT_BUFFER){
| 		yy_delete_buffer( YY_CURRENT_BUFFER  );
| 		YY_CURRENT_BUFFER_LVALUE = NULL;
| 		yypop_buffer_state();
| 	}
| 
| 	/* Destroy the stack itself. */
| 	yyfree((yy_buffer_stack) );
| 	(yy_buffer_stack) = NULL;
| 
|     yyfree ( (yy_state_buf) );
|     (yy_state_buf)  = NULL;
| 
|     /* Reset the globals. This is important in a non-reentrant scanner so the next time
|      * yylex() is called, initialization will occur. */
|     yy_init_globals( );
| 
|     return 0;
| }
| 
| /*
|  * Internal utility routines.
|  */
| 
| #ifndef yytext_ptr
| static void yy_flex_strncpy (char* s1, const char * s2, int n )
| {
| 		
| 	int i;
| 	for ( i = 0; i < n; ++i )
| 		s1[i] = s2[i];
| }
| #endif
| 
| #ifdef YY_NEED_STRLEN
| static int yy_flex_strlen (const char * s )
| {
| 	int n;
| 	for ( n = 0; s[n]; ++n )
| 		;
| 
| 	return n;
| }
| #endif
| 
| void *yyalloc (yy_size_t  size )
| {
| 			return malloc(size);
| }
| 
| void *yyrealloc  (void * ptr, yy_size_t  size )
| {
| 		
| 	/* The cast to (char *) in the following accommodates both
| 	 * implementations that use char* generic pointers, and those
| 	 * that use void* generic pointers.  It works with the latter
| 	 * because both ANSI C and C++ allow castless assignment from
| 	 * any pointer type to void*, and deal with argument conversions
| 	 * as though doing an assignment.
| 	 */
| 	return realloc(ptr, size);
| }
| 
| void yyfree (void * ptr )
| {
| 			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
| }
| 
| #define YYTABLES_NAME "yytables"
| 
| #line 10 "conftest.l"
| 
| #ifdef YYTEXT_POINTER
| extern char *yytext;
| #endif
| int
| main (void)
| {
|   return ! yylex () + ! yywrap ();
| }
configure:4648: result: no
configure:4764: checking the archiver (xiar) interface
configure:4780: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:4780: $? = 0
configure:4782: xiar cru libconftest.a conftest.o >&5
xiar: executing 'ar'
ar: `u' modifier ignored since `D' is the default (see `U')
configure:4785: $? = 0
configure:4813: result: ar
configure:4968: checking for nm
configure:4995: result: nm
configure:5027: checking for gcc with GNU99 support
configure:5052: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -std=gnu99 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5052: $? = 0
configure:5060: result: yes
configure:5066: checking whether gcc supports __attribute__((visibility()))
configure:5081: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5081: $? = 0
configure:5089: result: yes
configure:5097: checking whether gcc supports __attribute__((gcc_struct))
configure:5109: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5109: $? = 0
configure:5117: result: yes
configure:5125: checking whether gcc supports -fPIC
configure:5136: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -fPIC -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5136: $? = 0
configure:5145: result: yes
configure:5154: checking whether gcc supports -fPIE
configure:5165: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -fPIE -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5165: $? = 0
configure:5174: result: yes
configure:5186: checking whether gcc supports -Wl,-z,defs
configure:5204: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,defs -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:5204: $? = 0
configure:5214: result: yes
configure:5221: checking whether gcc supports -Wl,-z,relro
configure:5239: icc -o conftest -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:5239: $? = 0
configure:5249: result: yes
configure:5257: checking for __thread support
configure:5281: icc -o conftest -fPIC -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -shared -Wl,-z,defs -Wl,-z,relro -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:5281: $? = 0
configure:5291: result: yes
configure:5304: checking for special C compiler options needed for large files
configure:5349: result: no
configure:5355: checking for _FILE_OFFSET_BITS value needed for large files
configure:5380: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5380: $? = 0
configure:5412: result: no
configure:5498: checking whether fts.h is bad when included (with LFS)
configure:5507: icc -c -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5507: $? = 0
configure:5514: result: no
configure:5523: checking whether to add -D_FORTIFY_SOURCE=2 to CFLAGS
configure:5540: icc -c -D_FORTIFY_SOURCE=2 -Werror -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:5540: $? = 0
configure:5541: result: yes
configure:5757: checking for library containing gzdirect
configure:5788: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /tmp/ipo_icc0T0TAr.o: in function `main':
/dev/shm/libelf/elfutils-0.175/conftest.c:27: undefined reference to `gzdirect'
configure:5788: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| #define HAVE_VISIBILITY 1
| #define HAVE_GCC_STRUCT 1
| #define CHECK_UNDEFINED 0
| #define LIBEBL_SUBDIR "elfutils"
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char gzdirect ();
| int
| main ()
| {
| return gzdirect ();
|   ;
|   return 0;
| }
configure:5788: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -lz   >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:5788: $? = 0
configure:5805: result: -lz
configure:5848: checking for library containing BZ2_bzdopen
configure:5879: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /tmp/ipo_icckxAvRE.o: in function `main':
/dev/shm/libelf/elfutils-0.175/conftest.c:28: undefined reference to `BZ2_bzdopen'
configure:5879: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| #define HAVE_VISIBILITY 1
| #define HAVE_GCC_STRUCT 1
| #define CHECK_UNDEFINED 0
| #define LIBEBL_SUBDIR "elfutils"
| #define USE_ZLIB 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char BZ2_bzdopen ();
| int
| main ()
| {
| return BZ2_bzdopen ();
|   ;
|   return 0;
| }
configure:5879: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -lbz2   >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:5879: $? = 0
configure:5896: result: -lbz2
configure:5935: checking for library containing lzma_auto_decoder
configure:5966: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -lbz2  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
ld: /tmp/ipo_iccc0N8iA.o: in function `main':
/dev/shm/libelf/elfutils-0.175/conftest.c:29: undefined reference to `lzma_auto_decoder'
configure:5966: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| #define HAVE_VISIBILITY 1
| #define HAVE_GCC_STRUCT 1
| #define CHECK_UNDEFINED 0
| #define LIBEBL_SUBDIR "elfutils"
| #define USE_ZLIB 1
| #define USE_BZLIB 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char lzma_auto_decoder ();
| int
| main ()
| {
| return lzma_auto_decoder ();
|   ;
|   return 0;
| }
configure:5966: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -llzma  -lbz2  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:5966: $? = 0
configure:5983: result: -llzma
configure:6020: checking whether memrchr is declared
configure:6020: result: yes
configure:6032: checking whether rawmemchr is declared
configure:6032: result: yes
configure:6045: checking whether powerof2 is declared
configure:6045: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:6045: $? = 0
configure:6045: result: yes
configure:6057: checking whether mempcpy is declared
configure:6057: result: yes
configure:6073: checking for process_vm_readv
configure:6073: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:6073: $? = 0
configure:6073: result: yes
configure:6083: checking for __cxa_demangle in -lstdc++
configure:6108: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c -lstdc++   >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:6108: $? = 0
configure:6117: result: yes
configure:6164: checking whether symbol versioning is supported
configure:6177: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
IPO: WARNING: File scope asm disables -ipo
configure:6177: $? = 0
configure:6184: result: yes
configure:6209: checking whether gcc accepts -Wstack-usage
configure:6220: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wstack-usage=262144 -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:6220: $? = 0
configure:6228: result: yes
configure:6240: checking whether gcc has a sane -Wlogical-op
configure:6252: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wlogical-op -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:6252: $? = 0
configure:6260: result: yes
configure:6272: checking whether gcc accepts -Wduplicated-cond
configure:6283: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wduplicated-cond -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:6283: $? = 0
configure:6291: result: yes
configure:6303: checking whether gcc accepts -Wnull-dereference
configure:6314: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wnull-dereference -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:6314: $? = 0
configure:6322: result: yes
configure:6334: checking whether gcc accepts -Wimplicit-fallthrough
configure:6345: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wimplicit-fallthrough -Werror -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:6345: $? = 0
configure:6353: result: yes
configure:6383: icc -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:6383: $? = 0
configure:6505: checking whether NLS is requested
configure:6514: result: yes
configure:6555: checking for msgfmt
configure:6587: result: /usr/bin/msgfmt
configure:6596: checking for gmsgfmt
configure:6627: result: /usr/bin/msgfmt
configure:6678: checking for xgettext
configure:6710: result: /usr/bin/xgettext
configure:6756: checking for msgmerge
configure:6787: result: /usr/bin/msgmerge
configure:6857: checking how to run the C preprocessor
configure:6927: result: icc -E
configure:6947: icc -E -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c
configure:6947: $? = 0
configure:6961: icc -E -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c
conftest.c(27): error #2379: cannot open source file "ac_nonexistent.h"
  #include <ac_nonexistent.h>
                             ^

configure:6961: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| #define HAVE_VISIBILITY 1
| #define HAVE_GCC_STRUCT 1
| #define CHECK_UNDEFINED 0
| #define LIBEBL_SUBDIR "elfutils"
| #define USE_ZLIB 1
| #define USE_BZLIB 1
| #define USE_LZMA 1
| #define HAVE_DECL_MEMRCHR 1
| #define HAVE_DECL_RAWMEMCHR 1
| #define HAVE_DECL_POWEROF2 1
| #define HAVE_DECL_MEMPCPY 1
| #define HAVE_PROCESS_VM_READV 1
| #define USE_DEMANGLE 1
| #define HAVE_FALLTHROUGH 1
| #define MODVERSION "Build for elfutils 175 x86_64-pc-linux-gnu"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:6990: checking for grep that handles long lines and -e
configure:7048: result: /bin/grep
configure:7053: checking for egrep
configure:7115: result: /bin/grep -E
configure:7120: checking for ANSI C header files
configure:7224: result: yes
configure:7237: checking for sys/types.h
configure:7237: result: yes
configure:7237: checking for sys/stat.h
configure:7237: result: yes
configure:7237: checking for stdlib.h
configure:7237: result: yes
configure:7237: checking for string.h
configure:7237: result: yes
configure:7237: checking for memory.h
configure:7237: result: yes
configure:7237: checking for strings.h
configure:7237: result: yes
configure:7237: checking for inttypes.h
configure:7237: result: yes
configure:7237: checking for stdint.h
configure:7237: result: yes
configure:7237: checking for unistd.h
configure:7237: result: yes
configure:7253: checking size of long
configure:7272: result: 8
configure:7286: checking for struct user_regs_struct
configure:7286: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:7286: $? = 0
configure:7286: icc -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
conftest.c(45): error: expected an expression
  if (sizeof ((struct user_regs_struct)))
                                       ^

compilation aborted for conftest.c (code 2)
configure:7286: $? = 2
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| #define HAVE_VISIBILITY 1
| #define HAVE_GCC_STRUCT 1
| #define CHECK_UNDEFINED 0
| #define LIBEBL_SUBDIR "elfutils"
| #define USE_ZLIB 1
| #define USE_BZLIB 1
| #define USE_LZMA 1
| #define HAVE_DECL_MEMRCHR 1
| #define HAVE_DECL_RAWMEMCHR 1
| #define HAVE_DECL_POWEROF2 1
| #define HAVE_DECL_MEMPCPY 1
| #define HAVE_PROCESS_VM_READV 1
| #define USE_DEMANGLE 1
| #define HAVE_FALLTHROUGH 1
| #define MODVERSION "Build for elfutils 175 x86_64-pc-linux-gnu"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_LONG 8
| /* end confdefs.h.  */
| #include <sys/ptrace.h>
|                #include <sys/time.h>
|                #include <sys/user.h>
| 
| int
| main ()
| {
| if (sizeof ((struct user_regs_struct)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:7286: result: yes
configure:7304: checking icc option for 32-bit word size
configure:7317: icc -m32 -c -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 conftest.c >&5
configure:7317: $? = 0
configure:7325: result: -m32
configure:7329: checking for 64-bit host
configure:7350: result: yes
configure:7377: checking whether icc -m32 makes executables we can run
configure:7398: icc -m32 -o conftest -D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3 -Wdate-time -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax conftest.c  >&5
icc: warning #10237: -lcilkrts linked in dynamically, static library not available
configure:7398: $? = 0
configure:7398: ./conftest
./conftest: error while loading shared libraries: libiomp5.so: wrong ELF class: ELFCLASS64
configure:7398: $? = 127
configure: program exited with status 127
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "elfutils"
| #define PACKAGE_TARNAME "elfutils"
| #define PACKAGE_VERSION "0.175"
| #define PACKAGE_STRING "elfutils 0.175"
| #define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
| #define PACKAGE_URL "http://elfutils.org/"
| #define PACKAGE "elfutils"
| #define VERSION "0.175"
| #define DEFAULT_AR_DETERMINISTIC false
| #define HAVE_VISIBILITY 1
| #define HAVE_GCC_STRUCT 1
| #define CHECK_UNDEFINED 0
| #define LIBEBL_SUBDIR "elfutils"
| #define USE_ZLIB 1
| #define USE_BZLIB 1
| #define USE_LZMA 1
| #define HAVE_DECL_MEMRCHR 1
| #define HAVE_DECL_RAWMEMCHR 1
| #define HAVE_DECL_POWEROF2 1
| #define HAVE_DECL_MEMPCPY 1
| #define HAVE_PROCESS_VM_READV 1
| #define USE_DEMANGLE 1
| #define HAVE_FALLTHROUGH 1
| #define MODVERSION "Build for elfutils 175 x86_64-pc-linux-gnu"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_LONG 8
| #define HAVE_SYS_USER_REGS 1
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| 
|   ;
|   return 0;
| }
configure:7409: result: no
configure:7415: WARNING: not running biarch tests, icc -m32 does not work
configure:7436: checking for flex
configure:7452: found /usr/bin/flex
configure:7464: result: yes
configure:7477: checking for bison
configure:7493: found /usr/bin/bison
configure:7505: result: yes
configure:7518: checking for gawk
configure:7534: found /usr/bin/gawk
configure:7546: result: yes
configure:7566: checking for bunzip2
configure:7582: found /bin/bunzip2
configure:7594: result: yes
configure:7716: checking that generated files are newer than configure
configure:7722: result: done
configure:7829: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by elfutils config.status 0.175, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on server

config.status:987: creating config/Makefile
config.status:987: creating Makefile
config.status:987: creating m4/Makefile
config.status:987: creating elfutils.spec
config.status:987: creating lib/Makefile
config.status:987: creating libelf/Makefile
config.status:987: creating libebl/Makefile
config.status:987: creating libdwelf/Makefile
config.status:987: creating libdw/Makefile
config.status:987: creating libdwfl/Makefile
config.status:987: creating libcpu/Makefile
config.status:987: creating libasm/Makefile
config.status:987: creating backends/Makefile
config.status:987: creating src/Makefile
config.status:987: creating po/Makefile.in
config.status:987: creating tests/Makefile
config.status:987: creating config/libelf.pc
config.status:987: creating config/libdw.pc
config.status:987: creating version.h
config.status:987: creating config.h
config.status:1216: executing depfiles commands
config.status:1293: cd lib       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/lib'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/lib'
config.status:1298: $? = 0
config.status:1293: cd libelf       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libelf'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libelf'
config.status:1298: $? = 0
config.status:1293: cd libebl       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libebl'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libebl'
config.status:1298: $? = 0
config.status:1293: cd libdwelf       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libdwelf'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libdwelf'
config.status:1298: $? = 0
config.status:1293: cd libdw       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libdw'
xiar: executing 'ar'
ar: ../libdwfl/libdwfl.a: No such file or directory
xiar: executing 'ar'
ar: ../libdwelf/libdwelf.a: No such file or directory
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libdw'
config.status:1298: $? = 0
config.status:1293: cd libdwfl       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libdwfl'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libdwfl'
config.status:1298: $? = 0
config.status:1293: cd libcpu       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libcpu'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libcpu'
config.status:1298: $? = 0
config.status:1293: cd libasm       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/libasm'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/libasm'
config.status:1298: $? = 0
config.status:1293: cd backends       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/backends'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/backends'
config.status:1298: $? = 0
config.status:1293: cd src       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/src'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/src'
config.status:1298: $? = 0
config.status:1293: cd tests       && sed -e '/# am--include-marker/d' Makefile         | make -f - am--depfiles
make[1]: Entering directory '/dev/shm/libelf/elfutils-0.175/tests'
make[1]: Leaving directory '/dev/shm/libelf/elfutils-0.175/tests'
config.status:1298: $? = 0
config.status:1216: executing po-directories commands
configure:9324:
=====================================================================
        elfutils: 0.175 (eu_version: 175)
=====================================================================

    Prefix                             : /usr
    Program prefix ("eu-" recommended) : eu-
    Source code location               : .
    Maintainer mode                    : yes
    libebl modules subdirectory        : elfutils
    build arch                         : x86_64-pc-linux-gnu

  RECOMMENDED FEATURES (should all be yes)
    gzip support                       : yes
    bzip2 support                      : yes
    lzma/xz support                    : yes
    libstdc++ demangle support         : yes
    File textrel check                 : yes
    Symbol versioning                  : yes

  NOT RECOMMENDED FEATURES (should all be no)
    Experimental thread safety         : no

  OTHER FEATURES
    Deterministic archives by default  : false
    Native language support            : yes

  EXTRA TEST FEATURES (used with make check)
    have bunzip2 installed (required)  : yes
    debug branch prediction            : no
    gprof support                      : no
    gcov support                       : no
    run all tests under valgrind       : no
    gcc undefined behaviour sanitizer  : no
    use rpath in tests                 : no
    test biarch                        : no


## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_AM_TEST_RUNNER_SHELL=/bin/bash
ac_cv_bad_fts=no
ac_cv_build=x86_64-pc-linux-gnu
ac_cv_build_alias=x86_64-linux-gnu
ac_cv_build_prog_CPP='icc -E'
ac_cv_build_prog_cc_g=yes
ac_cv_c99=yes
ac_cv_c_bigendian=no
ac_cv_c_compiler_gnu=yes
ac_cv_c_const=yes
ac_cv_c_inline=inline
ac_cv_c_long_double=yes
ac_cv_c_restrict=__restrict
ac_cv_c_stack_direction=-1
ac_cv_c_stringize=yes
ac_cv_c_volatile=yes
ac_cv_cflags_warn_all=-Wall
ac_cv_computed_gotos=yes
ac_cv_cxx_compiler_gnu=yes
ac_cv_cxx_have_class_strstream=yes
ac_cv_cxx_thread=yes
ac_cv_dbformat=inode
ac_cv_decl_map_anon=yes
ac_cv_dir_trailing_space=yes
ac_cv_disable_cast_function_type=yes
ac_cv_disable_missing_field_initializers=yes
ac_cv_disable_unused_parameter_warning=yes
ac_cv_disable_unused_result_warning=yes
ac_cv_duplicated_cond=yes
ac_cv_enable_implicit_function_declaration_error=yes
ac_cv_enable_nls=yes
ac_cv_enable_sign_compare_warning=yes
ac_cv_env_CC_set=set
ac_cv_env_CC_value=icc
ac_cv_env_CFLAGS_set=set
ac_cv_env_CFLAGS_value='-g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3'
ac_cv_env_CPPFLAGS_set=set
ac_cv_env_CPPFLAGS_value='-Wdate-time -D_FORTIFY_SOURCE=2'
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=set
ac_cv_env_LDFLAGS_value='-Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax'
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_YACC_set=
ac_cv_env_YACC_value=
ac_cv_env_YFLAGS_set=
ac_cv_env_YFLAGS_value=
ac_cv_env_build_alias_set=set
ac_cv_env_build_alias_value=x86_64-linux-gnu
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_extra_warnings=yes
ac_cv_fc_compiler_gnu=yes
ac_cv_file__dev_ptmx=yes
ac_cv_file__dev_urandom=yes
ac_cv_flock_decl=yes
ac_cv_fpic=yes
ac_cv_fpie=yes
ac_cv_func_SSL_get_shutdown=yes
ac_cv_func___argz_count=yes
ac_cv_func___argz_next=yes
ac_cv_func___argz_stringify=yes
ac_cv_func___cxa_pure_virtual=yes
ac_cv_func___fpending=yes
ac_cv_func___fpu_control=yes
ac_cv_func___fpurge=yes
ac_cv_func___freading=yes
ac_cv_func___fsetlocking=yes
ac_cv_func___fwriting=yes
ac_cv_func___fxstat=yes
ac_cv_func___fxstatat=yes
ac_cv_func___gmpz_powm_sec=yes
ac_cv_func___lxstat=yes
ac_cv_func___xmknod=yes
ac_cv_func___xmknodat=yes
ac_cv_func___xpg_strerror_r=yes
ac_cv_func___xstat=yes
ac_cv_func__setjmp=yes
ac_cv_func_acl_delete_def_file=yes
ac_cv_func_acl_entries=yes
ac_cv_func_acl_extended_file=yes
ac_cv_func_acl_free=yes
ac_cv_func_acl_from_mode=yes
ac_cv_func_acl_from_text=yes
ac_cv_func_acl_get_fd=yes
ac_cv_func_acl_get_file=yes
ac_cv_func_acl_set_fd=yes
ac_cv_func_acl_set_file=yes
ac_cv_func_acosh=yes
ac_cv_func_alarm=yes
ac_cv_func_alloca_works=yes
ac_cv_func_alphasort=yes
ac_cv_func_ares_set_servers=yes
ac_cv_func_argz_add=yes
ac_cv_func_argz_append=yes
ac_cv_func_argz_count=yes
ac_cv_func_argz_create_sep=yes
ac_cv_func_argz_insert=yes
ac_cv_func_argz_next=yes
ac_cv_func_argz_replace=yes
ac_cv_func_argz_stringify=yes
ac_cv_func_asctime_r=yes
ac_cv_func_asinh=yes
ac_cv_func_asprintf=yes
ac_cv_func_atanh=yes
ac_cv_func_atexit=yes
ac_cv_func_attr_copy_file=yes
ac_cv_func_basename=yes
ac_cv_func_bcmp=yes
ac_cv_func_bcopy=yes
ac_cv_func_brk=yes
ac_cv_func_bsearch=yes
ac_cv_func_btowc=yes
ac_cv_func_bzero=yes
ac_cv_func_calloc=yes
ac_cv_func_canonicalize_file_name=yes
ac_cv_func_cap_get_proc=yes
ac_cv_func_capset=yes
ac_cv_func_catgets=yes
ac_cv_func_cfmakeraw=yes
ac_cv_func_chdir=yes
ac_cv_func_chmod=yes
ac_cv_func_chown=yes
ac_cv_func_chown_works=yes
ac_cv_func_chroot=yes
ac_cv_func_clearenv=yes
ac_cv_func_clock=yes
ac_cv_func_clock_getres=yes
ac_cv_func_clock_gettime=yes
ac_cv_func_clock_settime=yes
ac_cv_func_close=yes
ac_cv_func_closedir=yes
ac_cv_func_confstr=yes
ac_cv_func_connect=yes
ac_cv_func_copysign=yes
ac_cv_func_ctermid=yes
ac_cv_func_ctime_r=yes
ac_cv_func_daemon=yes
ac_cv_func_dcgettext=yes
ac_cv_func_difftime=yes
ac_cv_func_dirfd=yes
ac_cv_func_dlclose=yes
ac_cv_func_dlerror=yes
ac_cv_func_dlopen=yes
ac_cv_func_dlsym=yes
ac_cv_func_dprintf=yes
ac_cv_func_dup=yes
ac_cv_func_eaccess=yes
ac_cv_func_endgrent=yes
ac_cv_func_endpwent=yes
ac_cv_func_endutxent=yes
ac_cv_func_epoll_create=yes
ac_cv_func_erf=yes
ac_cv_func_erfc=yes
ac_cv_func_err=yes
ac_cv_func_errx=yes
ac_cv_func_euidaccess=yes
ac_cv_func_execv=yes
ac_cv_func_explicit_bzero=yes
ac_cv_func_fabs=yes
ac_cv_func_faccessat=yes
ac_cv_func_fallocate=yes
ac_cv_func_fchdir=yes
ac_cv_func_fchmod=yes
ac_cv_func_fchmodat=yes
ac_cv_func_fchown=yes
ac_cv_func_fchownat=yes
ac_cv_func_fcntl=yes
ac_cv_func_fdatasync=yes
ac_cv_func_fdopen=yes
ac_cv_func_fdopendir=yes
ac_cv_func_feof_unlocked=yes
ac_cv_func_fexecve=yes
ac_cv_func_ffs=yes
ac_cv_func_ffsll=yes
ac_cv_func_fgets_unlocked=yes
ac_cv_func_fgetxattr=yes
ac_cv_func_fileno=yes
ac_cv_func_finite=yes
ac_cv_func_flistxattr=yes
ac_cv_func_flock=yes
ac_cv_func_flockfile=yes
ac_cv_func_floor=yes
ac_cv_func_fmemopen=yes
ac_cv_func_fmod=yes
ac_cv_func_fnmatch=yes
ac_cv_func_fork=yes
ac_cv_func_fork_works=yes
ac_cv_func_forkpty=yes
ac_cv_func_fpathconf=yes
ac_cv_func_fprintf=yes
ac_cv_func_freelocale=yes
ac_cv_func_fremovexattr=yes
ac_cv_func_fseeko=yes
ac_cv_func_fsetxattr=yes
ac_cv_func_fstat=yes
ac_cv_func_fstatat=yes
ac_cv_func_fstatfs=yes
ac_cv_func_fstatvfs=yes
ac_cv_func_fsync=yes
ac_cv_func_ftello=yes
ac_cv_func_ftime=yes
ac_cv_func_ftruncate=yes
ac_cv_func_fts_children=yes
ac_cv_func_fts_read=yes
ac_cv_func_funlockfile=yes
ac_cv_func_futimens=yes
ac_cv_func_futimes=yes
ac_cv_func_futimesat=yes
ac_cv_func_gai_strerror=yes
ac_cv_func_gamma=yes
ac_cv_func_gdbm_open=yes
ac_cv_func_getaddrinfo=yes
ac_cv_func_getc_unlocked=yes
ac_cv_func_getcchar=yes
ac_cv_func_getcwd=yes
ac_cv_func_getdelim=yes
ac_cv_func_getdomainname=yes
ac_cv_func_getdtablesize=yes
ac_cv_func_getegid=yes
ac_cv_func_getentropy=yes
ac_cv_func_getenv=yes
ac_cv_func_geteuid=yes
ac_cv_func_getgid=yes
ac_cv_func_getgrgid=yes
ac_cv_func_getgrnam=yes
ac_cv_func_getgrouplist=yes
ac_cv_func_getgroups=yes
ac_cv_func_getgroups_works=yes
ac_cv_func_gethostbyaddr=yes
ac_cv_func_gethostbyname=yes
ac_cv_func_gethostbyname_r=yes
ac_cv_func_gethostid=yes
ac_cv_func_gethostname=yes
ac_cv_func_getifaddrs=yes
ac_cv_func_getitimer=yes
ac_cv_func_getline=yes
ac_cv_func_getloadavg=yes
ac_cv_func_getlogin=yes
ac_cv_func_getlogin_r=yes
ac_cv_func_getmntent=yes
ac_cv_func_getnameinfo=yes
ac_cv_func_getopt=yes
ac_cv_func_getopt_long=yes
ac_cv_func_getopt_long_only=yes
ac_cv_func_getpagesize=yes
ac_cv_func_getpass=yes
ac_cv_func_getpeername=yes
ac_cv_func_getpgid=yes
ac_cv_func_getpgrp=yes
ac_cv_func_getpid=yes
ac_cv_func_getppid=yes
ac_cv_func_getpriority=yes
ac_cv_func_getpwent=yes
ac_cv_func_getpwnam=yes
ac_cv_func_getpwnam_r=yes
ac_cv_func_getpwuid=yes
ac_cv_func_getpwuid_r=yes
ac_cv_func_getresgid=yes
ac_cv_func_getresuid=yes
ac_cv_func_getrlimit=yes
ac_cv_func_getrusage=yes
ac_cv_func_getservbyname=yes
ac_cv_func_getservent=yes
ac_cv_func_getsgnam=yes
ac_cv_func_getsid=yes
ac_cv_func_getspent=yes
ac_cv_func_getspnam=yes
ac_cv_func_gettimeofday=yes
ac_cv_func_getttynam=yes
ac_cv_func_getuid=yes
ac_cv_func_getusershell=yes
ac_cv_func_getutent=yes
ac_cv_func_getutxent=yes
ac_cv_func_getwd=yes
ac_cv_func_getxattr=yes
ac_cv_func_glob=yes
ac_cv_func_glob_pattern_p=yes
ac_cv_func_gmtime=yes
ac_cv_func_gmtime_r=yes
ac_cv_func_gnutls_alpn_set_protocols=yes
ac_cv_func_gnutls_ocsp_req_init=yes
ac_cv_func_gnutls_priority_set_direct=yes
ac_cv_func_grantpt=yes
ac_cv_func_group_member=yes
ac_cv_func_gzbuffer=yes
ac_cv_func_gzsetparams=yes
ac_cv_func_hasmntopt=yes
ac_cv_func_htons=yes
ac_cv_func_hypot=yes
ac_cv_func_iconv=yes
ac_cv_func_iconv_open=yes
ac_cv_func_if_nameindex=yes
ac_cv_func_if_nametoindex=yes
ac_cv_func_imaxdiv=yes
ac_cv_func_index=yes
ac_cv_func_inet_aton=yes
ac_cv_func_inet_ntop=yes
ac_cv_func_inet_pton=yes
ac_cv_func_initgroups=yes
ac_cv_func_initscr=yes
ac_cv_func_inotify_init=yes
ac_cv_func_insque=yes
ac_cv_func_ioctl=yes
ac_cv_func_ioperm=yes
ac_cv_func_iopl=yes
ac_cv_func_isalpha=yes
ac_cv_func_isascii=yes
ac_cv_func_isatty=yes
ac_cv_func_isblank=yes
ac_cv_func_isgraph=yes
ac_cv_func_isinf=yes
ac_cv_func_isnan=yes
ac_cv_func_isnand=yes
ac_cv_func_isprint=yes
ac_cv_func_isspace=yes
ac_cv_func_iswalnum=yes
ac_cv_func_iswblank=yes
ac_cv_func_iswcntrl=yes
ac_cv_func_iswctype=yes
ac_cv_func_iswdigit=yes
ac_cv_func_iswgraph=yes
ac_cv_func_iswlower=yes
ac_cv_func_iswprint=yes
ac_cv_func_iswpunct=yes
ac_cv_func_iswspace=yes
ac_cv_func_iswupper=yes
ac_cv_func_iswxdigit=yes
ac_cv_func_isxdigit=yes
ac_cv_func_kill=yes
ac_cv_func_killpg=yes
ac_cv_func_lchown=yes
ac_cv_func_ldap_init_fd=yes
ac_cv_func_ldap_url_parse=yes
ac_cv_func_lgamma=yes
ac_cv_func_lgetxattr=yes
ac_cv_func_link=yes
ac_cv_func_linkat=yes
ac_cv_func_listxattr=yes
ac_cv_func_llistxattr=yes
ac_cv_func_llseek=yes
ac_cv_func_localeconv=yes
ac_cv_func_localtime=yes
ac_cv_func_localtime_r=yes
ac_cv_func_lockf=yes
ac_cv_func_lremovexattr=yes
ac_cv_func_lseek=yes
ac_cv_func_lsetxattr=yes
ac_cv_func_lstat=yes
ac_cv_func_lstat_dereferences_slashed_symlink=yes
ac_cv_func_lutimes=yes
ac_cv_func_madvise=yes
ac_cv_func_mallinfo=yes
ac_cv_func_matchpathcon_init_prefix=yes
ac_cv_func_matherr=yes
ac_cv_func_mblen=yes
ac_cv_func_mbrlen=yes
ac_cv_func_mbrtowc=yes
ac_cv_func_mbsinit=yes
ac_cv_func_mbsnrtowcs=yes
ac_cv_func_mbsrtowcs=yes
ac_cv_func_mbstowcs=yes
ac_cv_func_mbtowc=yes
ac_cv_func_memchr=yes
ac_cv_func_memcmp=yes
ac_cv_func_memcmp_working=yes
ac_cv_func_memcpy=yes
ac_cv_func_memmem=yes
ac_cv_func_memmove=yes
ac_cv_func_mempcpy=yes
ac_cv_func_memrchr=yes
ac_cv_func_memset=yes
ac_cv_func_mkdir=yes
ac_cv_func_mkdirat=yes
ac_cv_func_mkdtemp=yes
ac_cv_func_mkfifo=yes
ac_cv_func_mkfifoat=yes
ac_cv_func_mknod=yes
ac_cv_func_mknodat=yes
ac_cv_func_mkostemp=yes
ac_cv_func_mkstemp=yes
ac_cv_func_mkstemps=yes
ac_cv_func_mktemp=yes
ac_cv_func_mktime=yes
ac_cv_func_mmap=yes
ac_cv_func_mmap_anon=yes
ac_cv_func_mmap_dev_zero=yes
ac_cv_func_mmap_file=yes
ac_cv_func_mmap_fixed_mapped=yes
ac_cv_func_mode_to_security_class=yes
ac_cv_func_mprotect=yes
ac_cv_func_mremap=yes
ac_cv_func_msync=yes
ac_cv_func_mtrace=yes
ac_cv_func_munmap=yes
ac_cv_func_nanosleep=yes
ac_cv_func_newlocale=yes
ac_cv_func_nice=yes
ac_cv_func_nl_langinfo=yes
ac_cv_func_ntohl=yes
ac_cv_func_ntohs=yes
ac_cv_func_ntp_gettime=yes
ac_cv_func_obstack=yes
ac_cv_func_obstack_free=yes
ac_cv_func_obstack_printf=yes
ac_cv_func_on_exit=yes
ac_cv_func_open=yes
ac_cv_func_open_memstream=yes
ac_cv_func_openat=yes
ac_cv_func_opendir=yes
ac_cv_func_pathconf=yes
ac_cv_func_pause=yes
ac_cv_func_pcre_compile=yes
ac_cv_func_pcre_exec=yes
ac_cv_func_pcre_study=yes
ac_cv_func_personality=yes
ac_cv_func_pipe=yes
ac_cv_func_poll=yes
ac_cv_func_popen=yes
ac_cv_func_posix_fadvise=yes
ac_cv_func_posix_fallocate=yes
ac_cv_func_posix_memalign=yes
ac_cv_func_posix_openpt=yes
ac_cv_func_posix_spawn=yes
ac_cv_func_pow=yes
ac_cv_func_prctl=yes
ac_cv_func_pread=yes
ac_cv_func_preadv=yes
ac_cv_func_printf=yes
ac_cv_func_prlimit=yes
ac_cv_func_process_vm_readv=yes
ac_cv_func_pselect=yes
ac_cv_func_psignal=yes
ac_cv_func_psl_latest=yes
ac_cv_func_pthread_atfork=yes
ac_cv_func_pthread_condattr_setclock=yes
ac_cv_func_pthread_create=yes
ac_cv_func_pthread_getcpuclockid=yes
ac_cv_func_pthread_kill=yes
ac_cv_func_pthread_sigmask=yes
ac_cv_func_ptsname=yes
ac_cv_func_putenv=yes
ac_cv_func_putwc=yes
ac_cv_func_pwrite=yes
ac_cv_func_pwritev=yes
ac_cv_func_qsort=yes
ac_cv_func_qsort_r=yes
ac_cv_func_raise=yes
ac_cv_func_rand=yes
ac_cv_func_rand_r=yes
ac_cv_func_random=yes
ac_cv_func_rawmemchr=yes
ac_cv_func_readdir=yes
ac_cv_func_readlink=yes
ac_cv_func_readlinkat=yes
ac_cv_func_readv=yes
ac_cv_func_reallocarray=yes
ac_cv_func_realpath=yes
ac_cv_func_reboot=yes
ac_cv_func_regcomp=yes
ac_cv_func_regerror=yes
ac_cv_func_regexec=yes
ac_cv_func_regfree=yes
ac_cv_func_remove=yes
ac_cv_func_removexattr=yes
ac_cv_func_rename=yes
ac_cv_func_renameat=yes
ac_cv_func_resize_term=yes
ac_cv_func_rewinddir=yes
ac_cv_func_rindex=yes
ac_cv_func_rl_completion_matches=yes
ac_cv_func_rmdir=yes
ac_cv_func_round=yes
ac_cv_func_rpmatch=yes
ac_cv_func_sbrk=yes
ac_cv_func_scalbn=yes
ac_cv_func_scandir=yes
ac_cv_func_scandirat=yes
ac_cv_func_sched_get_priority_max=yes
ac_cv_func_sched_getaffinity=yes
ac_cv_func_sched_rr_get_interval=yes
ac_cv_func_sched_setaffinity=yes
ac_cv_func_sched_setparam=yes
ac_cv_func_sched_setscheduler=yes
ac_cv_func_secure_getenv=yes
ac_cv_func_select=yes
ac_cv_func_sem_getvalue=yes
ac_cv_func_sem_open=yes
ac_cv_func_sem_timedwait=yes
ac_cv_func_sem_unlink=yes
ac_cv_func_sendfile=yes
ac_cv_func_setbuf=yes
ac_cv_func_setbuffer=yes
ac_cv_func_setcchar=yes
ac_cv_func_setegid=yes
ac_cv_func_setenv=yes
ac_cv_func_seteuid=yes
ac_cv_func_setfsgid=yes
ac_cv_func_setfsuid=yes
ac_cv_func_setgid=yes
ac_cv_func_setgroups=yes
ac_cv_func_sethostname=yes
ac_cv_func_setitimer=yes
ac_cv_func_setlinebuf=yes
ac_cv_func_setlocale=yes
ac_cv_func_setns=yes
ac_cv_func_setpgid=yes
ac_cv_func_setpgrp=yes
ac_cv_func_setpriority=yes
ac_cv_func_setregid=yes
ac_cv_func_setresgid=yes
ac_cv_func_setresuid=yes
ac_cv_func_setreuid=yes
ac_cv_func_setrlimit=yes
ac_cv_func_setsid=yes
ac_cv_func_settimeofday=yes
ac_cv_func_setuid=yes
ac_cv_func_setupterm=yes
ac_cv_func_setutxent=yes
ac_cv_func_setvbuf=yes
ac_cv_func_setxattr=yes
ac_cv_func_shmat=yes
ac_cv_func_shutdown=yes
ac_cv_func_sigaction=yes
ac_cv_func_sigaltstack=yes
ac_cv_func_sigblock=yes
ac_cv_func_sighold=yes
ac_cv_func_siginterrupt=yes
ac_cv_func_signal=yes
ac_cv_func_signgam=yes
ac_cv_func_sigpending=yes
ac_cv_func_sigprocmask=yes
ac_cv_func_sigqueue=yes
ac_cv_func_sigrelse=yes
ac_cv_func_sigset=yes
ac_cv_func_sigsetmask=yes
ac_cv_func_sigstack=yes
ac_cv_func_sigsuspend=yes
ac_cv_func_sigtimedwait=yes
ac_cv_func_sigwait=yes
ac_cv_func_sigwaitinfo=yes
ac_cv_func_sleep=yes
ac_cv_func_snprintf=yes
ac_cv_func_socket=yes
ac_cv_func_sprintf=yes
ac_cv_func_srand=yes
ac_cv_func_srandom=yes
ac_cv_func_sscanf=yes
ac_cv_func_stat=yes
ac_cv_func_statvfs=yes
ac_cv_func_stime=yes
ac_cv_func_stpcpy=yes
ac_cv_func_stpncpy=yes
ac_cv_func_strcasecmp=yes
ac_cv_func_strcasestr=yes
ac_cv_func_strchr=yes
ac_cv_func_strchrnul=yes
ac_cv_func_strcoll=yes
ac_cv_func_strcoll_works=yes
ac_cv_func_strcspn=yes
ac_cv_func_strdup=yes
ac_cv_func_strerror=yes
ac_cv_func_strerror_r=yes
ac_cv_func_strerror_r_char_p=yes
ac_cv_func_strftime=yes
ac_cv_func_strncasecmp=yes
ac_cv_func_strncmp_works=yes
ac_cv_func_strndup=yes
ac_cv_func_strnlen=yes
ac_cv_func_strnlen_working=yes
ac_cv_func_strpbrk=yes
ac_cv_func_strptime=yes
ac_cv_func_strrchr=yes
ac_cv_func_strsep=yes
ac_cv_func_strsignal=yes
ac_cv_func_strstr=yes
ac_cv_func_strtod=yes
ac_cv_func_strtof=yes
ac_cv_func_strtoimax=yes
ac_cv_func_strtok_r=yes
ac_cv_func_strtol=yes
ac_cv_func_strtold_l=yes
ac_cv_func_strtoll=yes
ac_cv_func_strtoul=yes
ac_cv_func_strtoull=yes
ac_cv_func_strtoumax=yes
ac_cv_func_strverscmp=yes
ac_cv_func_strxfrm_l=yes
ac_cv_func_swapoff=yes
ac_cv_func_swapon=yes
ac_cv_func_symlink=yes
ac_cv_func_symlinkat=yes
ac_cv_func_sync=yes
ac_cv_func_syncfs=yes
ac_cv_func_sysconf=yes
ac_cv_func_sysctl=yes
ac_cv_func_sysinfo=yes
ac_cv_func_syslog=yes
ac_cv_func_system=yes
ac_cv_func_tcgetattr=yes
ac_cv_func_tcgetpgrp=yes
ac_cv_func_tcsetattr=yes
ac_cv_func_tcsetpgrp=yes
ac_cv_func_tdestroy=yes
ac_cv_func_tempnam=yes
ac_cv_func_tgamma=yes
ac_cv_func_tgetent=yes
ac_cv_func_tigetflag=yes
ac_cv_func_tigetnum=yes
ac_cv_func_tigetstr=yes
ac_cv_func_time=yes
ac_cv_func_timegm=yes
ac_cv_func_timelocal=yes
ac_cv_func_timer_settime=yes
ac_cv_func_times=yes
ac_cv_func_tmpfile=yes
ac_cv_func_tmpnam=yes
ac_cv_func_tmpnam_r=yes
ac_cv_func_towlower=yes
ac_cv_func_towupper=yes
ac_cv_func_truncate=yes
ac_cv_func_tsearch=yes
ac_cv_func_ttyname=yes
ac_cv_func_tzset=yes
ac_cv_func_ulimit=yes
ac_cv_func_umask=yes
ac_cv_func_uname=yes
ac_cv_func_unlink=yes
ac_cv_func_unlinkat=yes
ac_cv_func_unlockpt=yes
ac_cv_func_unsetenv=yes
ac_cv_func_unshare=yes
ac_cv_func_updwtmp=yes
ac_cv_func_updwtmpx=yes
ac_cv_func_use_default_colors=yes
ac_cv_func_uselocale=yes
ac_cv_func_usleep=yes
ac_cv_func_utime=yes
ac_cv_func_utime_null=yes
ac_cv_func_utimensat=yes
ac_cv_func_utimes=yes
ac_cv_func_utmpname=yes
ac_cv_func_utmpxname=yes
ac_cv_func_vasprintf=yes
ac_cv_func_vfork=yes
ac_cv_func_vfork_works=yes
ac_cv_func_vfprintf=yes
ac_cv_func_vprintf=yes
ac_cv_func_vsnprintf=yes
ac_cv_func_vsprintf=yes
ac_cv_func_vwarnx=yes
ac_cv_func_waddwstr=yes
ac_cv_func_waitid=yes
ac_cv_func_waitpid=yes
ac_cv_func_warn=yes
ac_cv_func_warnx=yes
ac_cv_func_wcrtomb=yes
ac_cv_func_wcschr=yes
ac_cv_func_wcscoll=yes
ac_cv_func_wcscpy=yes
ac_cv_func_wcsdup=yes
ac_cv_func_wcsftime=yes
ac_cv_func_wcslen=yes
ac_cv_func_wcsncmp=yes
ac_cv_func_wcsncpy=yes
ac_cv_func_wcsnlen=yes
ac_cv_func_wcsrtombs=yes
ac_cv_func_wcstombs=yes
ac_cv_func_wcswidth=yes
ac_cv_func_wcsxfrm=yes
ac_cv_func_wctob=yes
ac_cv_func_wctomb=yes
ac_cv_func_wctype=yes
ac_cv_func_wcwidth=yes
ac_cv_func_wget_wch=yes
ac_cv_func_win_wch=yes
ac_cv_func_wmemchr=yes
ac_cv_func_wmemcmp=yes
ac_cv_func_wmemcpy=yes
ac_cv_func_wmemmove=yes
ac_cv_func_wmempcpy=yes
ac_cv_func_wmemset=yes
ac_cv_func_working_mktime=yes
ac_cv_func_writev=yes
ac_cv_gcc_struct=yes
ac_cv_has_makedev=yes
ac_cv_have_decl_AUDIT_USER_TTY=yes
ac_cv_have_decl_CLOCK_MONOTONIC=yes
ac_cv_have_decl_CPU_ALLOC=yes
ac_cv_have_decl_O_NOFOLLOW=yes
ac_cv_have_decl_PRIdMAX=yes
ac_cv_have_decl_PR_SET_NAME=yes
ac_cv_have_decl_P_tmpdir=yes
ac_cv_have_decl_RTLD_DEEPBIND=yes
ac_cv_have_decl_RTLD_GLOBAL=yes
ac_cv_have_decl_RTLD_LAZY=yes
ac_cv_have_decl_RTLD_LOCAL=yes
ac_cv_have_decl_RTLD_NODELETE=yes
ac_cv_have_decl_RTLD_NOLOAD=yes
ac_cv_have_decl_RTLD_NOW=yes
ac_cv_have_decl_SOCK_CLOEXEC=yes
ac_cv_have_decl_SOCK_NONBLOCK=yes
ac_cv_have_decl_SO_PASSCRED=yes
ac_cv_have_decl_TAILQ_CONCAT=yes
ac_cv_have_decl_TAILQ_PREV=yes
ac_cv_have_decl_TIOCGLCKTRMIOS=yes
ac_cv_have_decl_TIOCNOTTY=yes
ac_cv_have_decl_WCOREDUMP=yes
ac_cv_have_decl__Exit=yes
ac_cv_have_decl__PATH_BSHELL=yes
ac_cv_have_decl__PATH_DEVNULL=yes
ac_cv_have_decl__PATH_TTY=yes
ac_cv_have_decl___fpending=yes
ac_cv_have_decl___fsetlocking=yes
ac_cv_have_decl__sys_siglist=yes
ac_cv_have_decl_accept=yes
ac_cv_have_decl_alarm=yes
ac_cv_have_decl_alphasort=yes
ac_cv_have_decl_asprintf=yes
ac_cv_have_decl_atoi=yes
ac_cv_have_decl_atoll=yes
ac_cv_have_decl_basename=yes
ac_cv_have_decl_basename_char_p_=yes
ac_cv_have_decl_bind=yes
ac_cv_have_decl_btowc=yes
ac_cv_have_decl_calloc=yes
ac_cv_have_decl_canonicalize_file_name=yes
ac_cv_have_decl_chdir=yes
ac_cv_have_decl_chown=yes
ac_cv_have_decl_clearerr_unlocked=yes
ac_cv_have_decl_closedir=yes
ac_cv_have_decl_confstr=yes
ac_cv_have_decl_connect=yes
ac_cv_have_decl_daemon=yes
ac_cv_have_decl_daylight=yes
ac_cv_have_decl_dirfd=yes
ac_cv_have_decl_dlerror=yes
ac_cv_have_decl_dlopen=yes
ac_cv_have_decl_dlsym=yes
ac_cv_have_decl_dprintf=yes
ac_cv_have_decl_dup=yes
ac_cv_have_decl_duplocale=yes
ac_cv_have_decl_endusershell=yes
ac_cv_have_decl_environ=yes
ac_cv_have_decl_errno=yes
ac_cv_have_decl_euidaccess=yes
ac_cv_have_decl_exit=yes
ac_cv_have_decl_faccessat=yes
ac_cv_have_decl_fchdir=yes
ac_cv_have_decl_fchmodat=yes
ac_cv_have_decl_fchownat=yes
ac_cv_have_decl_fcntl=yes
ac_cv_have_decl_fdatasync=yes
ac_cv_have_decl_fdopendir=yes
ac_cv_have_decl_feof_unlocked=yes
ac_cv_have_decl_ferror_unlocked=yes
ac_cv_have_decl_fflush_unlocked=yes
ac_cv_have_decl_ffs=yes
ac_cv_have_decl_ffsl=yes
ac_cv_have_decl_ffsll=yes
ac_cv_have_decl_fgets_unlocked=yes
ac_cv_have_decl_flockfile=yes
ac_cv_have_decl_fprintf=yes
ac_cv_have_decl_fputc_unlocked=yes
ac_cv_have_decl_fputs_unlocked=yes
ac_cv_have_decl_fread_unlocked=yes
ac_cv_have_decl_free=yes
ac_cv_have_decl_freeaddrinfo=yes
ac_cv_have_decl_frexpl=yes
ac_cv_have_decl_fseeko=yes
ac_cv_have_decl_fstat=yes
ac_cv_have_decl_fstatat=yes
ac_cv_have_decl_fsync=yes
ac_cv_have_decl_ftello=yes
ac_cv_have_decl_ftruncate=yes
ac_cv_have_decl_funlockfile=yes
ac_cv_have_decl_futimens=yes
ac_cv_have_decl_fwrite_unlocked=yes
ac_cv_have_decl_gai_strerror=yes
ac_cv_have_decl_getaddrinfo=yes
ac_cv_have_decl_getc_unlocked=yes
ac_cv_have_decl_getchar_unlocked=yes
ac_cv_have_decl_getcwd=yes
ac_cv_have_decl_getdelim=yes
ac_cv_have_decl_getdomainname=yes
ac_cv_have_decl_getdtablesize=yes
ac_cv_have_decl_getenv=yes
ac_cv_have_decl_geteuid=yes
ac_cv_have_decl_getgrgid=yes
ac_cv_have_decl_getgrnam=yes
ac_cv_have_decl_getgroups=yes
ac_cv_have_decl_gethostname=yes
ac_cv_have_decl_getline=yes
ac_cv_have_decl_getloadavg=yes
ac_cv_have_decl_getlogin=yes
ac_cv_have_decl_getlogin_r=yes
ac_cv_have_decl_getnameinfo=yes
ac_cv_have_decl_getopt=yes
ac_cv_have_decl_getpagesize=yes
ac_cv_have_decl_getpass=yes
ac_cv_have_decl_getpeername=yes
ac_cv_have_decl_getpwnam=yes
ac_cv_have_decl_getpwuid=yes
ac_cv_have_decl_getpwuid_r=yes
ac_cv_have_decl_getrusage=yes
ac_cv_have_decl_getsockname=yes
ac_cv_have_decl_getsockopt=yes
ac_cv_have_decl_getsubopt=yes
ac_cv_have_decl_gettimeofday=yes
ac_cv_have_decl_getuid=yes
ac_cv_have_decl_getusershell=yes
ac_cv_have_decl_getutent=yes
ac_cv_have_decl_grantpt=yes
ac_cv_have_decl_group_member=yes
ac_cv_have_decl_h_errno=yes
ac_cv_have_decl_imaxabs=yes
ac_cv_have_decl_imaxdiv=yes
ac_cv_have_decl_inet_ntop=yes
ac_cv_have_decl_inet_pton=yes
ac_cv_have_decl_initstate=yes
ac_cv_have_decl_initstate_r=yes
ac_cv_have_decl_ioctl=yes
ac_cv_have_decl_isatty=yes
ac_cv_have_decl_isblank=yes
ac_cv_have_decl_isfinite=yes
ac_cv_have_decl_isinf=yes
ac_cv_have_decl_isnan=yes
ac_cv_have_decl_iswblank=yes
ac_cv_have_decl_iswctype=yes
ac_cv_have_decl_lchmod=yes
ac_cv_have_decl_lchown=yes
ac_cv_have_decl_ldexpl=yes
ac_cv_have_decl_link=yes
ac_cv_have_decl_linkat=yes
ac_cv_have_decl_listen=yes
ac_cv_have_decl_localtime_r=yes
ac_cv_have_decl_lseek=yes
ac_cv_have_decl_lstat=yes
ac_cv_have_decl_makedev=yes
ac_cv_have_decl_malloc=yes
ac_cv_have_decl_mbrlen=yes
ac_cv_have_decl_mbrtowc=yes
ac_cv_have_decl_mbsinit=yes
ac_cv_have_decl_mbsnrtowcs=yes
ac_cv_have_decl_mbsrtowcs=yes
ac_cv_have_decl_memchr=yes
ac_cv_have_decl_memmem=yes
ac_cv_have_decl_mempcpy=yes
ac_cv_have_decl_memrchr=yes
ac_cv_have_decl_mkdirat=yes
ac_cv_have_decl_mkdtemp=yes
ac_cv_have_decl_mkfifo=yes
ac_cv_have_decl_mkfifoat=yes
ac_cv_have_decl_mknod=yes
ac_cv_have_decl_mknodat=yes
ac_cv_have_decl_mkostemp=yes
ac_cv_have_decl_mkostemps=yes
ac_cv_have_decl_mkstemp=yes
ac_cv_have_decl_mkstemps=yes
ac_cv_have_decl_mpz_inits=yes
ac_cv_have_decl_nl_langinfo=yes
ac_cv_have_decl_obstack_printf=yes
ac_cv_have_decl_offsetof=yes
ac_cv_have_decl_openat=yes
ac_cv_have_decl_opendir=yes
ac_cv_have_decl_pclose=yes
ac_cv_have_decl_pipe=yes
ac_cv_have_decl_popen=yes
ac_cv_have_decl_posix_openpt=yes
ac_cv_have_decl_powerof2=yes
ac_cv_have_decl_pread=yes
ac_cv_have_decl_printf=yes
ac_cv_have_decl_program_invocation_name=yes
ac_cv_have_decl_program_invocation_short_name=yes
ac_cv_have_decl_pselect=yes
ac_cv_have_decl_pthread_sigmask=yes
ac_cv_have_decl_ptsname=yes
ac_cv_have_decl_ptsname_r=yes
ac_cv_have_decl_putc_unlocked=yes
ac_cv_have_decl_putchar_unlocked=yes
ac_cv_have_decl_pwrite=yes
ac_cv_have_decl_qsort_r=yes
ac_cv_have_decl_random=yes
ac_cv_have_decl_random_r=yes
ac_cv_have_decl_rawmemchr=yes
ac_cv_have_decl_readdir=yes
ac_cv_have_decl_readlink=yes
ac_cv_have_decl_readlinkat=yes
ac_cv_have_decl_realloc=yes
ac_cv_have_decl_reallocarray=yes
ac_cv_have_decl_realpath=yes
ac_cv_have_decl_recv=yes
ac_cv_have_decl_recvfrom=yes
ac_cv_have_decl_renameat=yes
ac_cv_have_decl_rewinddir=yes
ac_cv_have_decl_rmdir=yes
ac_cv_have_decl_rpmatch=yes
ac_cv_have_decl_sbrk=yes
ac_cv_have_decl_scandir=yes
ac_cv_have_decl_secure_getenv=yes
ac_cv_have_decl_select=yes
ac_cv_have_decl_send=yes
ac_cv_have_decl_sendto=yes
ac_cv_have_decl_setenv=yes
ac_cv_have_decl_sethostname=yes
ac_cv_have_decl_setlocale=yes
ac_cv_have_decl_setregid=yes
ac_cv_have_decl_setsockopt=yes
ac_cv_have_decl_setstate=yes
ac_cv_have_decl_setstate_r=yes
ac_cv_have_decl_setusershell=yes
ac_cv_have_decl_shutdown=yes
ac_cv_have_decl_sigaction=yes
ac_cv_have_decl_sigaddset=yes
ac_cv_have_decl_sigaltstack=yes
ac_cv_have_decl_sigdelset=yes
ac_cv_have_decl_sigemptyset=yes
ac_cv_have_decl_sigfillset=yes
ac_cv_have_decl_sigismember=yes
ac_cv_have_decl_sigpending=yes
ac_cv_have_decl_sigprocmask=yes
ac_cv_have_decl_sleep=yes
ac_cv_have_decl_snprintf=yes
ac_cv_have_decl_socket=yes
ac_cv_have_decl_srandom=yes
ac_cv_have_decl_srandom_r=yes
ac_cv_have_decl_stat=yes
ac_cv_have_decl_stpcpy=yes
ac_cv_have_decl_stpncpy=yes
ac_cv_have_decl_strcasecmp=yes
ac_cv_have_decl_strcasestr=yes
ac_cv_have_decl_strchrnul=yes
ac_cv_have_decl_strcoll=yes
ac_cv_have_decl_strcpy=yes
ac_cv_have_decl_strdup=yes
ac_cv_have_decl_strerror=yes
ac_cv_have_decl_strerror_r=yes
ac_cv_have_decl_strncasecmp=yes
ac_cv_have_decl_strncat=yes
ac_cv_have_decl_strndup=yes
ac_cv_have_decl_strnlen=yes
ac_cv_have_decl_strpbrk=yes
ac_cv_have_decl_strsep=yes
ac_cv_have_decl_strsignal=yes
ac_cv_have_decl_strstr=yes
ac_cv_have_decl_strtod=yes
ac_cv_have_decl_strtoimax=yes
ac_cv_have_decl_strtok_r=yes
ac_cv_have_decl_strtol=yes
ac_cv_have_decl_strtold=yes
ac_cv_have_decl_strtoll=yes
ac_cv_have_decl_strtoul=yes
ac_cv_have_decl_strtoull=yes
ac_cv_have_decl_strtoumax=yes
ac_cv_have_decl_strverscmp=yes
ac_cv_have_decl_symlink=yes
ac_cv_have_decl_symlinkat=yes
ac_cv_have_decl_sys_errlist=yes
ac_cv_have_decl_sys_nerr=yes
ac_cv_have_decl_sys_siglist=yes
ac_cv_have_decl_time=yes
ac_cv_have_decl_tmpfile=yes
ac_cv_have_decl_towctrans=yes
ac_cv_have_decl_truncate=yes
ac_cv_have_decl_ttyname=yes
ac_cv_have_decl_ttyname_r=yes
ac_cv_have_decl_tzname=yes
ac_cv_have_decl_unlink=yes
ac_cv_have_decl_unlinkat=yes
ac_cv_have_decl_unlockpt=yes
ac_cv_have_decl_unsetenv=yes
ac_cv_have_decl_usleep=yes
ac_cv_have_decl_utime=yes
ac_cv_have_decl_utimensat=yes
ac_cv_have_decl_vasprintf=yes
ac_cv_have_decl_vdprintf=yes
ac_cv_have_decl_vsnprintf=yes
ac_cv_have_decl_waitpid=yes
ac_cv_have_decl_wcpcpy=yes
ac_cv_have_decl_wcpncpy=yes
ac_cv_have_decl_wcrtomb=yes
ac_cv_have_decl_wcscasecmp=yes
ac_cv_have_decl_wcscat=yes
ac_cv_have_decl_wcschr=yes
ac_cv_have_decl_wcscmp=yes
ac_cv_have_decl_wcscoll=yes
ac_cv_have_decl_wcscpy=yes
ac_cv_have_decl_wcscspn=yes
ac_cv_have_decl_wcsdup=yes
ac_cv_have_decl_wcsftime=yes
ac_cv_have_decl_wcslen=yes
ac_cv_have_decl_wcsncasecmp=yes
ac_cv_have_decl_wcsncat=yes
ac_cv_have_decl_wcsncmp=yes
ac_cv_have_decl_wcsncpy=yes
ac_cv_have_decl_wcsnlen=yes
ac_cv_have_decl_wcsnrtombs=yes
ac_cv_have_decl_wcspbrk=yes
ac_cv_have_decl_wcsrchr=yes
ac_cv_have_decl_wcsrtombs=yes
ac_cv_have_decl_wcsspn=yes
ac_cv_have_decl_wcsstr=yes
ac_cv_have_decl_wcstok=yes
ac_cv_have_decl_wcswidth=yes
ac_cv_have_decl_wcsxfrm=yes
ac_cv_have_decl_wctob=yes
ac_cv_have_decl_wctrans=yes
ac_cv_have_decl_wctype=yes
ac_cv_have_decl_wcwidth=yes
ac_cv_have_decl_wmemchr=yes
ac_cv_have_decl_wmemcmp=yes
ac_cv_have_decl_wmemcpy=yes
ac_cv_have_decl_wmemmove=yes
ac_cv_have_decl_wmemset=yes
ac_cv_have_dev_ptmx=yes
ac_cv_have_getc_unlocked=yes
ac_cv_have_long_long_format=yes
ac_cv_have_sig_atomic_t=yes
ac_cv_have_size_t_format=yes
ac_cv_header_acl_libacl_h=yes
ac_cv_header_alloca_h=yes
ac_cv_header_apr_memcache_h=yes
ac_cv_header_argz_h=yes
ac_cv_header_arpa_inet_h=yes
ac_cv_header_arpa_nameser_h=yes
ac_cv_header_arpa_tftp_h=yes
ac_cv_header_asm_types_h=yes
ac_cv_header_assert_h=yes
ac_cv_header_attr_error_context_h=yes
ac_cv_header_attr_libattr_h=yes
ac_cv_header_attr_xattr_h=yes
ac_cv_header_bluetooth_bluetooth_h=yes
ac_cv_header_byteswap_h=yes
ac_cv_header_bzlib_h=yes
ac_cv_header_cmath=yes
ac_cv_header_crypt_h=yes
ac_cv_header_ctype_h=yes
ac_cv_header_curses_h=yes
ac_cv_header_curses_solaris=yes
ac_cv_header_cxxabi_h=yes
ac_cv_header_dirent_dirent_h=yes
ac_cv_header_dirent_h=yes
ac_cv_header_dlfcn_h=yes
ac_cv_header_elf_h=yes
ac_cv_header_endian_h=yes
ac_cv_header_err_h=yes
ac_cv_header_errno_h=yes
ac_cv_header_error_h=yes
ac_cv_header_event_h=yes
ac_cv_header_ext_hash_map=yes
ac_cv_header_ext_hash_set=yes
ac_cv_header_fcntl_h=yes
ac_cv_header_features_h=yes
ac_cv_header_float_h=yes
ac_cv_header_fnmatch_h=yes
ac_cv_header_form_h=yes
ac_cv_header_fts_h=yes
ac_cv_header_gdbm_h=yes
ac_cv_header_getopt_h=yes
ac_cv_header_glob_h=yes
ac_cv_header_gmp_h=yes
ac_cv_header_gpm_h=yes
ac_cv_header_grp_h=yes
ac_cv_header_gssapi_gssapi_generic_h=yes
ac_cv_header_gssapi_gssapi_h=yes
ac_cv_header_iconv_h=yes
ac_cv_header_ifaddrs_h=yes
ac_cv_header_immintrin_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_iostream=yes
ac_cv_header_langinfo_h=yes
ac_cv_header_lastlog_h=yes
ac_cv_header_libgen_h=yes
ac_cv_header_libintl_h=yes
ac_cv_header_librtmp_rtmp_h=yes
ac_cv_header_limits_h=yes
ac_cv_header_linux_blkpg_h=yes
ac_cv_header_linux_blkzoned_h=yes
ac_cv_header_linux_btrfs_h=yes
ac_cv_header_linux_can_bcm_h=yes
ac_cv_header_linux_can_h=yes
ac_cv_header_linux_can_raw_h=yes
ac_cv_header_linux_cdrom_h=yes
ac_cv_header_linux_falloc_h=yes
ac_cv_header_linux_fd_h=yes
ac_cv_header_linux_fiemap_h=yes
ac_cv_header_linux_fs_h=yes
ac_cv_header_linux_gsmmux_h=yes
ac_cv_header_linux_major_h=yes
ac_cv_header_linux_net_namespace_h=yes
ac_cv_header_linux_netlink_h=yes
ac_cv_header_linux_random_h=yes
ac_cv_header_linux_raw_h=yes
ac_cv_header_linux_securebits_h=yes
ac_cv_header_linux_tcp_h=yes
ac_cv_header_linux_tiocl_h=yes
ac_cv_header_linux_tipc_h=yes
ac_cv_header_linux_version_h=yes
ac_cv_header_linux_vm_sockets_h=yes
ac_cv_header_linux_watchdog_h=yes
ac_cv_header_locale_h=yes
ac_cv_header_lzma_h=yes
ac_cv_header_magic_h=yes
ac_cv_header_malloc_h=yes
ac_cv_header_math_h=yes
ac_cv_header_mcheck_h=yes
ac_cv_header_memory_h=yes
ac_cv_header_menu_h=yes
ac_cv_header_mntent_h=yes
ac_cv_header_ncurses_h=yes
ac_cv_header_ncursesw_ncurses_h=yes
ac_cv_header_ncursesw_term_h=yes
ac_cv_header_net_if_h=yes
ac_cv_header_netdb_h=yes
ac_cv_header_netinet_in_h=yes
ac_cv_header_netinet_in_systm_h=yes
ac_cv_header_netinet_ip_h=yes
ac_cv_header_netinet_tcp_h=yes
ac_cv_header_netpacket_packet_h=yes
ac_cv_header_nettle_sha_h=yes
ac_cv_header_nl_types_h=yes
ac_cv_header_openssl_crypto_h=yes
ac_cv_header_openssl_err_h=yes
ac_cv_header_openssl_pem_h=yes
ac_cv_header_openssl_rsa_h=yes
ac_cv_header_openssl_ssl_h=yes
ac_cv_header_panel_h=yes
ac_cv_header_paths_h=yes
ac_cv_header_pcre_h=yes
ac_cv_header_poll_h=yes
ac_cv_header_popt_h=yes
ac_cv_header_pthread_h=yes
ac_cv_header_pty_h=yes
ac_cv_header_pwd_h=yes
ac_cv_header_readline_history_h=yes
ac_cv_header_readline_readline_h=yes
ac_cv_header_regex_h=yes
ac_cv_header_resolv_h=yes
ac_cv_header_sasl_sasl_h=yes
ac_cv_header_sasl_saslutil_h=yes
ac_cv_header_sched_h=yes
ac_cv_header_search_h=yes
ac_cv_header_security_pam_appl_h=yes
ac_cv_header_security_pam_misc_h=yes
ac_cv_header_selinux_context_h=yes
ac_cv_header_selinux_flask_h=yes
ac_cv_header_selinux_selinux_h=yes
ac_cv_header_semaphore_h=yes
ac_cv_header_serf_h=yes
ac_cv_header_setjmp_h=yes
ac_cv_header_sgtty_h=yes
ac_cv_header_shadow_h=yes
ac_cv_header_signal_h=yes
ac_cv_header_slcurses_h=yes
ac_cv_header_spawn_h=yes
ac_cv_header_stdarg_h=yes
ac_cv_header_stdbool_h=yes
ac_cv_header_stdc=yes
ac_cv_header_stddef_h=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdio_ext_h=yes
ac_cv_header_stdio_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_stropts_h=yes
ac_cv_header_strstream=yes
ac_cv_header_sys_acl_h=yes
ac_cv_header_sys_capability_h=yes
ac_cv_header_sys_cdefs_h=yes
ac_cv_header_sys_dir_h=yes
ac_cv_header_sys_epoll_h=yes
ac_cv_header_sys_fcntl_h=yes
ac_cv_header_sys_file_h=yes
ac_cv_header_sys_gmon_out_h=yes
ac_cv_header_sys_inotify_h=yes
ac_cv_header_sys_io_h=yes
ac_cv_header_sys_ioctl_h=yes
ac_cv_header_sys_mman_h=yes
ac_cv_header_sys_mount_h=yes
ac_cv_header_sys_mtio_h=yes
ac_cv_header_sys_param_h=yes
ac_cv_header_sys_poll_h=yes
ac_cv_header_sys_prctl_h=yes
ac_cv_header_sys_procfs_h=yes
ac_cv_header_sys_random_h=yes
ac_cv_header_sys_resource_h=yes
ac_cv_header_sys_select_h=yes
ac_cv_header_sys_sendfile_h=yes
ac_cv_header_sys_signal_h=yes
ac_cv_header_sys_signalfd_h=yes
ac_cv_header_sys_socket_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_statfs_h=yes
ac_cv_header_sys_statvfs_h=yes
ac_cv_header_sys_stropts_h=yes
ac_cv_header_sys_swap_h=yes
ac_cv_header_sys_syscall_h=yes
ac_cv_header_sys_sysctl_h=yes
ac_cv_header_sys_sysinfo_h=yes
ac_cv_header_sys_sysmacros_h=yes
ac_cv_header_sys_termios_h=yes
ac_cv_header_sys_time_h=yes
ac_cv_header_sys_timeb_h=yes
ac_cv_header_sys_times_h=yes
ac_cv_header_sys_timex_h=yes
ac_cv_header_sys_ttydefaults_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_sys_types_h_makedev=yes
ac_cv_header_sys_uio_h=yes
ac_cv_header_sys_un_h=yes
ac_cv_header_sys_unistd_h=yes
ac_cv_header_sys_user_h=yes
ac_cv_header_sys_utsname_h=yes
ac_cv_header_sys_vfs_h=yes
ac_cv_header_sys_wait_h=yes
ac_cv_header_sys_xattr_h=yes
ac_cv_header_sysexits_h=yes
ac_cv_header_syslog_h=yes
ac_cv_header_term_h=yes
ac_cv_header_termcap_h=yes
ac_cv_header_termio_h=yes
ac_cv_header_termios_h=yes
ac_cv_header_time=yes
ac_cv_header_time_h=yes
ac_cv_header_ttyent_h=yes
ac_cv_header_typeinfo=yes
ac_cv_header_ucontext_h=yes
ac_cv_header_ulimit_h=yes
ac_cv_header_unistd_h=yes
ac_cv_header_unordered_map=yes
ac_cv_header_unordered_set=yes
ac_cv_header_utempter_h=yes
ac_cv_header_utime_h=yes
ac_cv_header_utmp_h=yes
ac_cv_header_utmpx_h=yes
ac_cv_header_uuid_uuid_h=yes
ac_cv_header_values_h=yes
ac_cv_header_wchar_h=yes
ac_cv_header_wctype_h=yes
ac_cv_header_xlocale_h=yes
ac_cv_header_zlib_h=yes
ac_cv_host=x86_64-pc-linux-gnu
ac_cv_host_alias=x86_64-linux-gnu
ac_cv_implicit_fallthrough=yes
ac_cv_lib_ICE_IceConnectionNumber=yes
ac_cv_lib_ICE_IceOpenConnection=yes
ac_cv_lib_Xdmcp__XdmcpAuthDoIt=yes
ac_cv_lib_Xext_XShapeQueryExtension=yes
ac_cv_lib_Xmu_XmuCreateStippledPixmap=yes
ac_cv_lib_Xpm_XpmCreatePixmapFromData=yes
ac_cv_lib_acl_acl_get_file=yes
ac_cv_lib_attr_fgetxattr=yes
ac_cv_lib_attr_getxattr=yes
ac_cv_lib_audit_audit_log_user_avc_message=yes
ac_cv_lib_audit_audit_log_user_message=yes
ac_cv_lib_c_inet_aton=yes
ac_cv_lib_c_printf=yes
ac_cv_lib_c_re_compile_pattern=yes
ac_cv_lib_cap_cap_get_file=yes
ac_cv_lib_cap_cap_get_proc=yes
ac_cv_lib_cap_cap_init=yes
ac_cv_lib_cap_ng_capng_apply=yes
ac_cv_lib_crypto_HMAC_Update=yes
ac_cv_lib_crypto_SRP_Calc_client_key=yes
ac_cv_lib_curses_initscr=yes
ac_cv_lib_dl_dlopen=yes
ac_cv_lib_dl_dlsym=yes
ac_cv_lib_error_at_line=yes
ac_cv_lib_gdbm_gdbm_open=yes
ac_cv_lib_gmp___gmpz_init=yes
ac_cv_lib_gnutls_gnutls_check_version=yes
ac_cv_lib_gnutls_gnutls_srp_verifier=yes
ac_cv_lib_gpm_Gpm_Open=yes
ac_cv_lib_gpm_Gpm_Wgetch=yes
ac_cv_lib_history_append_history=yes
ac_cv_lib_lber___ber_free=yes
ac_cv_lib_lex='none needed'
ac_cv_lib_lzma_lzma_alone_decoder=yes
ac_cv_lib_lzma_lzma_stream_encoder_mt=yes
ac_cv_lib_m_cos=yes
ac_cv_lib_m_log=yes
ac_cv_lib_m_pow=yes
ac_cv_lib_m_strtod=yes
ac_cv_lib_magic_magic_open=yes
ac_cv_lib_ncurses___tputs=yes
ac_cv_lib_ncurses_initscr=yes
ac_cv_lib_ncurses_tparm=yes
ac_cv_lib_ncursesw___key_defined=yes
ac_cv_lib_ncursesw___resizeterm=yes
ac_cv_lib_ncursesw___set_escdelay=yes
ac_cv_lib_ncursesw___use_default_colors=yes
ac_cv_lib_ncursesw_initscr=yes
ac_cv_lib_nettle_main=yes
ac_cv_lib_nsl_gethostbyname=yes
ac_cv_lib_popt_poptGetContext=yes
ac_cv_lib_pthread_pthread_join=yes
ac_cv_lib_pthread_pthread_kill=yes
ac_cv_lib_pthread_pthread_mutex_lock=yes
ac_cv_lib_pthread_pthread_self=yes
ac_cv_lib_readline_append_history=yes
ac_cv_lib_readline_readline=yes
ac_cv_lib_readline_rl_callback_handler_install=yes
ac_cv_lib_readline_rl_completion_display_matches_hook=yes
ac_cv_lib_readline_rl_completion_matches=yes
ac_cv_lib_readline_rl_pre_input_hook=yes
ac_cv_lib_readline_rl_resize_terminal=yes
ac_cv_lib_rt_clock_gettime=yes
ac_cv_lib_rt_sched_yield=yes
ac_cv_lib_rt_timer_create=yes
ac_cv_lib_rtmp_RTMP_Init=yes
ac_cv_lib_selinux_is_selinux_enabled=yes
ac_cv_lib_selinux_setexecfilecon=yes
ac_cv_lib_ssl_SSL_connect=yes
ac_cv_lib_stdcpp___cxa_demangle=yes
ac_cv_lib_termcap_tgetent=yes
ac_cv_lib_tinfo___tgetent=yes
ac_cv_lib_tinfo_tgoto=yes
ac_cv_lib_udev_udev_new=yes
ac_cv_lib_util_openpty=yes
ac_cv_lib_z_gzdopen=yes
ac_cv_lib_z_gzopen=yes
ac_cv_lib_z_inflate=yes
ac_cv_lib_z_inflateCopy=yes
ac_cv_lib_z_inflateEnd=yes
ac_cv_libsigsegv=yes
ac_cv_little_endian_double=yes
ac_cv_logical_op=yes
ac_cv_member_siginfo_t_si_band=yes
ac_cv_member_struct_passwd_pw_gecos=yes
ac_cv_member_struct_passwd_pw_passwd=yes
ac_cv_member_struct_rusage_ru_idrss=yes
ac_cv_member_struct_rusage_ru_inblock=yes
ac_cv_member_struct_rusage_ru_isrss=yes
ac_cv_member_struct_rusage_ru_ixrss=yes
ac_cv_member_struct_rusage_ru_majflt=yes
ac_cv_member_struct_rusage_ru_maxrss=yes
ac_cv_member_struct_rusage_ru_minflt=yes
ac_cv_member_struct_rusage_ru_msgrcv=yes
ac_cv_member_struct_rusage_ru_msgsnd=yes
ac_cv_member_struct_rusage_ru_nivcsw=yes
ac_cv_member_struct_rusage_ru_nsignals=yes
ac_cv_member_struct_rusage_ru_nswap=yes
ac_cv_member_struct_rusage_ru_nvcsw=yes
ac_cv_member_struct_rusage_ru_oublock=yes
ac_cv_member_struct_sigaction_sa_sigaction=yes
ac_cv_member_struct_sockaddr_storage_ss_family=yes
ac_cv_member_struct_sockaddr_un_sun_path=yes
ac_cv_member_struct_stat_st_atim_tv_nsec=yes
ac_cv_member_struct_stat_st_blksize=yes
ac_cv_member_struct_stat_st_ctim_tv_nsec=yes
ac_cv_member_struct_stat_st_mtim_tv_nsec=yes
ac_cv_member_struct_stat_st_rdev=yes
ac_cv_member_struct_statfs_f_frsize=yes
ac_cv_member_struct_statfs_f_namelen=yes
ac_cv_member_struct_statfs_f_type=yes
ac_cv_member_struct_sysinfo_mem_unit=yes
ac_cv_member_struct_termio_c_line=yes
ac_cv_member_struct_termios_c_line=yes
ac_cv_member_struct_tm_tm_gmtoff=yes
ac_cv_member_struct_tm_tm_zone=yes
ac_cv_member_struct_utmp_ut_exit=yes
ac_cv_member_struct_utmp_ut_exit_e_exit=yes
ac_cv_member_struct_utmp_ut_exit_e_termination=yes
ac_cv_member_struct_utmp_ut_id=yes
ac_cv_member_struct_utmp_ut_name=yes
ac_cv_member_struct_utmp_ut_pid=yes
ac_cv_member_struct_utmp_ut_type=yes
ac_cv_member_struct_utmp_ut_user=yes
ac_cv_member_struct_utmpx_ut_exit=yes
ac_cv_member_struct_utmpx_ut_exit_e_exit=yes
ac_cv_member_struct_utmpx_ut_exit_e_termination=yes
ac_cv_member_struct_utmpx_ut_id=yes
ac_cv_member_struct_utmpx_ut_name=yes
ac_cv_member_struct_utmpx_ut_pid=yes
ac_cv_member_struct_utmpx_ut_type=yes
ac_cv_member_struct_utmpx_ut_user=yes
ac_cv_module_Locale__gettext=yes
ac_cv_mvwdelch_is_expression=yes
ac_cv_no_strict_aliasing_ok=yes
ac_cv_null_dereference=yes
ac_cv_objext=o
ac_cv_path_BASH_SHELL=/bin/bash
ac_cv_path_CTYPESGEN=none
ac_cv_path_DOT=/usr/bin/dot
ac_cv_path_DOXYGEN=/usr/bin/doxygen
ac_cv_path_EGREP='/bin/grep -E'
ac_cv_path_EXPR=/usr/bin/expr
ac_cv_path_FAKEROOT_PATH=/usr/bin/fakeroot
ac_cv_path_FGREP='/bin/grep -F'
ac_cv_path_GLIB_COMPILE_RESOURCES=/usr/bin/glib-compile-resources
ac_cv_path_GMSGFMT=/usr/bin/msgfmt
ac_cv_path_GREP=/bin/grep
ac_cv_path_GTK_UPDATE_ICON_CACHE=/usr/bin/gtk-update-icon-cache
ac_cv_path_GZIP_BIN=/bin/gzip
ac_cv_path_INSTALL_INFO=/usr/bin/install-info
ac_cv_path_LDCONFIG=/sbin/ldconfig
ac_cv_path_MAKEINFO=/usr/bin/makeinfo
ac_cv_path_MSGFMT=/usr/bin/msgfmt
ac_cv_path_MSGMERGE=/usr/bin/msgmerge
ac_cv_path_MV=/bin/mv
ac_cv_path_NROFF=/usr/bin/nroff
ac_cv_path_PERL=/usr/bin/perl
ac_cv_path_PKG_CONFIG=/usr/bin/x86_64-linux-gnu-pkg-config
ac_cv_path_RDOC=/usr/bin/rdoc
ac_cv_path_RUBY=/usr/bin/ruby
ac_cv_path_SED=/bin/sed
ac_cv_path_SHELL_PATH=/bin/bash
ac_cv_path_STUNNEL=/usr/bin/stunnel
ac_cv_path_TAR=/bin/tar
ac_cv_path_TESTS_SHELL=/bin/bash
ac_cv_path_TIC_PATH=/usr/bin/tic
ac_cv_path_TRANG=none
ac_cv_path_WGET=/usr/bin/wget
ac_cv_path_XGETTEXT=/usr/bin/xgettext
ac_cv_path_XMLLINT=/usr/bin/xmllint
ac_cv_path_XSLTPROC=/usr/bin/xsltproc
ac_cv_path_XSUBPP=/usr/bin/xsubpp
ac_cv_path_ac_pt_LIBGCRYPT_CONFIG=/usr/bin/libgcrypt-config
ac_cv_path_ac_pt_PKGCONFIG=/usr/bin/pkg-config
ac_cv_path_ac_pt_PKG_CONFIG=/usr/bin/pkg-config
ac_cv_path_ac_pt_XML_CONFIG=/usr/bin/xml2-config
ac_cv_path_ax_enable_builddir_sed=sed
ac_cv_path_install=/usr/bin/install
ac_cv_path_lt_DD=/bin/dd
ac_cv_path_mkdir='/bin/mkdir -p'
ac_cv_path_shell=/bin/bash
ac_cv_path_vi_cv_path_perl=/usr/bin/perl
ac_cv_path_vi_cv_path_plain_lua=/usr/bin/lua
ac_cv_path_vi_cv_path_ruby=/usr/bin/ruby
ac_cv_path_vi_cv_path_tcl=/usr/bin/tclsh
ac_cv_perl_flock_implemented=yes
ac_cv_posix_semaphores_enabled=yes
ac_cv_prog_ACLOCAL=aclocal
ac_cv_prog_AR_FOR_TARGET=xiar
ac_cv_prog_AS=x86_64-linux-gnu-as
ac_cv_prog_AS_FOR_TARGET=as
ac_cv_prog_AUTOCONF=autoconf
ac_cv_prog_AUTOHEADER=autoheader
ac_cv_prog_AWK=gawk
ac_cv_prog_BISON=/usr/bin/bison
ac_cv_prog_BUILD_CC=icc
ac_cv_prog_CC=icc
ac_cv_prog_CC_FOR_TARGET=icc
ac_cv_prog_CPP='icc -E'
ac_cv_prog_CXX=icpc
ac_cv_prog_CXXCPP='icpc -E'
ac_cv_prog_CXX_FOR_TARGET=icpc
ac_cv_prog_DOCBOOK_TO_MAN=docbook2x-man
ac_cv_prog_DOXYGEN=/usr/bin/doxygen
ac_cv_prog_EXPECT=/usr/bin/expect
ac_cv_prog_FLEX=/usr/bin/flex
ac_cv_prog_GCC_FOR_TARGET=gcc
ac_cv_prog_GFORTRAN_FOR_TARGET=gfortran
ac_cv_prog_HAVE_BISON=yes
ac_cv_prog_HAVE_BUNZIP2=yes
ac_cv_prog_HAVE_DOT=YES
ac_cv_prog_HAVE_FLEX=yes
ac_cv_prog_HAVE_GAWK=yes
ac_cv_prog_HAVE_JAVAC_IN_PATH=yes
ac_cv_prog_HAVE_JAVA_IN_PATH=yes
ac_cv_prog_INTLBISON=bison
ac_cv_prog_JAR=jar
ac_cv_prog_LD=xild
ac_cv_prog_LD_FOR_TARGET=xild
ac_cv_prog_LEX=/usr/bin/lex
ac_cv_prog_LIBTOOL=/usr/bin/libtool
ac_cv_prog_LN=ln
ac_cv_prog_MAKE=/usr/bin/make
ac_cv_prog_MAKEINFO=/usr/bin/makeinfo
ac_cv_prog_MAKE_LOWER_TAGS=yes
ac_cv_prog_MAKE_UPPER_TAGS=yes
ac_cv_prog_MSGFMT=/usr/bin/msgfmt
ac_cv_prog_NM_FOR_TARGET=nm
ac_cv_prog_OBJCOPY=/usr/bin/x86_64-linux-gnu-objcopy
ac_cv_prog_OBJCOPY_FOR_TARGET=objcopy
ac_cv_prog_OBJDUMP=/usr/bin/x86_64-linux-gnu-objdump
ac_cv_prog_OBJDUMP_FOR_TARGET=objdump
ac_cv_prog_PATCH=/usr/bin/patch
ac_cv_prog_PCRECONF=/usr/bin/pcre-config
ac_cv_prog_PERL=/usr/bin/perl
ac_cv_prog_PROVE=/usr/bin/prove
ac_cv_prog_RANLIB_FOR_TARGET=ranlib
ac_cv_prog_READELF=/usr/bin/x86_64-linux-gnu-readelf
ac_cv_prog_READELF_FOR_TARGET=readelf
ac_cv_prog_RUNTEST=/usr/bin/runtest
ac_cv_prog_SED=/bin/sed
ac_cv_prog_TAR=/usr/bin/tar
ac_cv_prog_TEX=/usr/bin/tex
ac_cv_prog_TRUE=/bin/true
ac_cv_prog_YACC='bison -y'
ac_cv_prog_YODL=yodl
ac_cv_prog_ac_ct_AR=xiar
ac_cv_prog_ac_ct_CC=icc
ac_cv_prog_ac_ct_CC_FOR_BUILD=icc
ac_cv_prog_ac_ct_CXX=icpc
ac_cv_prog_ac_ct_DLLTOOL=dlltool
ac_cv_prog_ac_ct_LD=xild
ac_cv_prog_ac_ct_LIBTOOL=/usr/bin/libtool
ac_cv_prog_ac_ct_MANIFEST_TOOL=mt
ac_cv_prog_ac_ct_NM=nm
ac_cv_prog_ac_ct_OBJDUMP=x86_64-linux-gnu-objdump
ac_cv_prog_ac_ct_PKG_CONFIG=/usr/bin/pkg-config
ac_cv_prog_ac_ct_RANLIB=/usr/bin/x86_64-linux-gnu-ranlib
ac_cv_prog_ac_ct_READELF=readelf
ac_cv_prog_ac_ct_STRIP=x86_64-linux-gnu-strip
ac_cv_prog_cc_c89=
ac_cv_prog_cc_g=yes
ac_cv_prog_cc_icc_c_o=yes
ac_cv_prog_cc_stdc=
ac_cv_prog_cf_ldd_prog=/usr/bin/ldd
ac_cv_prog_cxx_g=yes
ac_cv_prog_egrep='grep -E'
ac_cv_prog_fc_g=yes
ac_cv_prog_gnatmake_exists=yes
ac_cv_prog_gprconfig_exists=yes
ac_cv_prog_lex_is_flex=yes
ac_cv_prog_lex_root=lex.yy
ac_cv_prog_lex_yytext_pointer=no
ac_cv_prog_make_make_case=yes
ac_cv_prog_make_make_set=yes
ac_cv_pthread=yes
ac_cv_pthread_system_supported=yes
ac_cv_rshift_extends_sign=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_search_BZ2_bzdopen=-lbz2
ac_cv_search___gmpz_init=-lgmp
ac_cv_search_acl_get_file=-lacl
ac_cv_search_attr_copy_file=-lattr
ac_cv_search_forkpty=-lutil
ac_cv_search_gzdirect=-lz
ac_cv_search_lzma_auto_decoder=-llzma
ac_cv_search_psl_builtin=-lpsl
ac_cv_search_sem_init=-lpthread
ac_cv_search_setfilecon=-lselinux
ac_cv_search_timer_settime=-lrt
ac_cv_search_utempter_add_record=-lutempter
ac_cv_search_uuid_generate=-luuid
ac_cv_sizeof__Bool=1
ac_cv_sizeof_char=1
ac_cv_sizeof_char_p=8
ac_cv_sizeof_curl_off_t=8
ac_cv_sizeof_double=8
ac_cv_sizeof_float=4
ac_cv_sizeof_fpos_t=16
ac_cv_sizeof_int=4
ac_cv_sizeof_intmax_t=8
ac_cv_sizeof_long=8
ac_cv_sizeof_long_double=16
ac_cv_sizeof_long_long_int=8
ac_cv_sizeof_off_t=8
ac_cv_sizeof_pid_t=4
ac_cv_sizeof_pthread_key_t=4
ac_cv_sizeof_pthread_t=8
ac_cv_sizeof_short=2
ac_cv_sizeof_signed_char=1
ac_cv_sizeof_size_t=8
ac_cv_sizeof_time_t=8
ac_cv_sizeof_uintptr_t=8
ac_cv_sizeof_unsigned_int=4
ac_cv_sizeof_unsigned_long=8
ac_cv_sizeof_void_p=8
ac_cv_sizeof_wchar_t=4
ac_cv_stack_usage=yes
ac_cv_stat_tv_nsec=yes
ac_cv_struct_addrinfo=yes
ac_cv_struct_option_getopt_h=yes
ac_cv_struct_sockaddr_alg=yes
ac_cv_struct_sockaddr_storage=yes
ac_cv_struct_st_mtim_nsec=st_mtim.tv_nsec
ac_cv_struct_tm=time.h
ac_cv_struct_tm_isdst=yes
ac_cv_struct_tm_zone=yes
ac_cv_symbol_versioning=yes
ac_cv_sys_file_offset_bits=no
ac_cv_sys_interpreter=yes
ac_cv_sys_largefile_CC=no
ac_cv_sys_long_file_names=yes
ac_cv_sys_posix_termios=yes
ac_cv_sys_stack_overflow_works=yes
ac_cv_sys_tiocgwinsz_in_sys_ioctl_h=yes
ac_cv_tanh_preserves_zero_sign=yes
ac_cv_target=x86_64-pc-linux-gnu
ac_cv_target_alias=x86_64-linux-gnu
ac_cv_tls=yes
ac_cv_type__Bool=yes
ac_cv_type___fsword_t=yes
ac_cv_type_ares_addr_node=yes
ac_cv_type_bool=yes
ac_cv_type_cpu_set_t=yes
ac_cv_type_dev_t=yes
ac_cv_type_double=yes
ac_cv_type_error_t=yes
ac_cv_type_float=yes
ac_cv_type_getgroups=gid_t
ac_cv_type_gid_t=yes
ac_cv_type_iconv_t=yes
ac_cv_type_id_t=yes
ac_cv_type_in_addr_t=yes
ac_cv_type_ino_t=yes
ac_cv_type_int=yes
ac_cv_type_intptr_t=yes
ac_cv_type_loff_t=yes
ac_cv_type_long=yes
ac_cv_type_long_double=yes
ac_cv_type_long_double_wider=yes
ac_cv_type_long_long=yes
ac_cv_type_long_long_int=yes
ac_cv_type_max_align_t=yes
ac_cv_type_mbstate_t=yes
ac_cv_type_mode_t=yes
ac_cv_type_nlink_t=yes
ac_cv_type_off_t=yes
ac_cv_type_pid_t=yes
ac_cv_type_posix_spawn_file_actions_t=yes
ac_cv_type_posix_spawnattr_t=yes
ac_cv_type_pthread_rwlock_t=yes
ac_cv_type_pthread_spinlock_t=yes
ac_cv_type_pthread_t=yes
ac_cv_type_ptrdiff_t=yes
ac_cv_type_rlim_t=yes
ac_cv_type_sa_family_t=yes
ac_cv_type_short=yes
ac_cv_type_sig_atomic_t=yes
ac_cv_type_sig_t=yes
ac_cv_type_sighandler_t=yes
ac_cv_type_signal=void
ac_cv_type_signed_char=yes
ac_cv_type_sigset_t=yes
ac_cv_type_size_t=yes
ac_cv_type_socklen_t=yes
ac_cv_type_ssize_t=yes
ac_cv_type_stack_t=yes
ac_cv_type_struct_addrinfo=yes
ac_cv_type_struct_sockaddr_storage=yes
ac_cv_type_struct_timespec=yes
ac_cv_type_struct_tms=yes
ac_cv_type_struct_user_regs_struct=yes
ac_cv_type_struct_utsname=yes
ac_cv_type_time_t=yes
ac_cv_type_u_int=yes
ac_cv_type_u_long=yes
ac_cv_type_uid_t=yes
ac_cv_type_uintmax_t=yes
ac_cv_type_uintptr_t=yes
ac_cv_type_unsigned_long_long=yes
ac_cv_type_unsigned_long_long_int=yes
ac_cv_type_useconds_t=yes
ac_cv_type_volatile_sig_atomic_t=yes
ac_cv_type_wchar_t=yes
ac_cv_typeof_struct_stat_st_atim_is_struct_timespec=yes
ac_cv_unsupported_fs_chars=
ac_cv_var_daylight=yes
ac_cv_var_ospeed=tinfo
ac_cv_var_tzname=yes
ac_cv_visibility=yes
ac_cv_wchar_t_signed=yes
ac_cv_window_has_flags=yes
ac_cv_working_alloca_h=yes
ac_cv_working_tzset=yes
ac_cv_zdefs=yes
ac_cv_zrelro=yes
acl_cv_libdirstems=lib,lib
acl_cv_libext=a
acl_cv_path_LD='xild -m elf_x86_64'
acl_cv_prog_gnu_ld=yes
acl_cv_rpath=done
acl_cv_shlibext=so
acl_cv_wl=-Wl,
acx_cv_header_stdint=stdint.h
acx_cv_prog_LN=ln
am_cv_CCAS_dependencies_compiler_type=gcc3
am_cv_CC_dependencies_compiler_type=gcc3
am_cv_CXX_dependencies_compiler_type=gcc3
am_cv_ar_interface=ar
am_cv_autoconf_installed=yes
am_cv_autoconf_version=yes
am_cv_autoconf_works=yes
am_cv_func_iconv=yes
am_cv_func_working_getline=yes
am_cv_langinfo_codeset=yes
am_cv_make_support_nested_variables=yes
am_cv_pathless_PYTHON=python3
am_cv_prog_cc_c_o=yes
am_cv_prog_ln=ln
am_cv_prog_tar_pax=gnutar
am_cv_prog_tar_ustar=gnutar
am_cv_python_platform=linux
am_cv_python_version=3.7
am_cv_val_LC_MESSAGES=yes
ax_cv_PTHREAD_JOINABLE_ATTR=PTHREAD_CREATE_JOINABLE
ax_cv_PTHREAD_PRIO_INHERIT=yes
ax_cv_c_compiler_vendor=gnu
ax_cv_check_cflags___Wall=yes
ax_cv_check_vscript_complex_wildcards=yes
ax_cv_check_vscript_flag=--version-script
ax_cv_cxx_gcc_abi_demangle=yes
ax_cv_cxx_have_isfinite=yes
ax_cv_cxx_have_sstream=yes
ax_cv_cxx_namespaces=yes
ax_cv_gcc_archflag=unknown
ax_cv_have_tls=yes
bison_cv_c_supports_posixly_correct=yes
bison_cv_cxx_supports_posixly_correct=yes
bison_cv_cxx_works=yes
bu_cv_decl_getopt_unistd_h=yes
bu_cv_decl_time_t_time_h=yes
bu_cv_decl_time_t_types_h=yes
bu_cv_header_utime_h=yes
cc_cv_attribute_unused=yes
cc_cv_attribute_visibility=yes
fu_cv_sys_stat_statvfs=yes
gas_cv_assert_ok=yes
gas_cv_decl_getopt_unistd_h=yes
gas_cv_have_sys_stat_type_member_st_mtim_tv_nsec=yes
gas_cv_have_sys_stat_type_member_st_mtim_tv_sec=yes
gas_cv_have_time_type_member_tm_gmtoff=yes
gcc_cv_as_cfi_pseudo_op=yes
gcc_cv_header_string=yes
gcc_cv_tool_prefix=/usr
gdbm_cv__thread=__thread
gl_cv___builtin_expect=yes
gl_cv_acl_ACL_FIRST_ENTRY=yes
gl_cv_c___inline=yes
gl_cv_c_inline_effective=yes
gl_cv_cc_nomfi_supported=yes
gl_cv_cc_uninitialized_supported=yes
gl_cv_cc_vis_werror=yes
gl_cv_cc_visibility=yes
gl_cv_compound_literals=yes
gl_cv_decl_HOST_NAME_MAX=yes
gl_cv_decl_ioctl_in_sys_ioctl_h=yes
gl_cv_decl_null_works=yes
gl_cv_decl_readlink_works=yes
gl_cv_decl_readlinkat_works=yes
gl_cv_fs_space=yes
gl_cv_func___fpending=yes
gl_cv_func_btowc_nul=yes
gl_cv_func_chown_ctime_works=yes
gl_cv_func_chown_follows_symlink=yes
gl_cv_func_chown_slash_works=yes
gl_cv_func_dup_works=yes
gl_cv_func_fchownat_empty_filename_works=yes
gl_cv_func_fchownat_nofollow_works=yes
gl_cv_func_fcntl_f_dupfd_works=yes
gl_cv_func_fdopen_works=yes
gl_cv_func_fdopendir_works=yes
gl_cv_func_fnmatch_gnu=yes
gl_cv_func_fnmatch_posix=yes
gl_cv_func_fopen_slash=yes
gl_cv_func_fprintf_posix=yes
gl_cv_func_frexp_no_libm=yes
gl_cv_func_frexp_works=yes
gl_cv_func_frexpl_no_libm=yes
gl_cv_func_frexpl_works=yes
gl_cv_func_fseeko=yes
gl_cv_func_fstatat_zero_flag=yes
gl_cv_func_ftello=yes
gl_cv_func_ftello_works=yes
gl_cv_func_futimens_works=yes
gl_cv_func_gai_strerror_posix_signature=yes
gl_cv_func_getaddrinfo=yes
gl_cv_func_getcwd_null=yes
gl_cv_func_getcwd_path_max=yes
gl_cv_func_getcwd_posix_signature=yes
gl_cv_func_getdtablesize_works=yes
gl_cv_func_getgroups_works=yes
gl_cv_func_getlogin_r_works=yes
gl_cv_func_getopt_gnu=yes
gl_cv_func_getopt_long_gnu=yes
gl_cv_func_getopt_posix=yes
gl_cv_func_getpagesize=yes
gl_cv_func_getpass_good=yes
gl_cv_func_gettimeofday_posix_signature=yes
gl_cv_func_ioctl_posix_signature=yes
gl_cv_func_isnand_no_libm=yes
gl_cv_func_isnanf_no_libm=yes
gl_cv_func_isnanf_works=yes
gl_cv_func_isnanl_no_libm=yes
gl_cv_func_isnanl_works=yes
gl_cv_func_iswcntrl_works=yes
gl_cv_func_itold_works=yes
gl_cv_func_ldexp_no_libm=yes
gl_cv_func_ldexpl_no_libm=yes
gl_cv_func_ldexpl_works=yes
gl_cv_func_link_works=yes
gl_cv_func_linkat_nofollow=yes
gl_cv_func_linkat_slash=yes
gl_cv_func_lseek_pipe=yes
gl_cv_func_lstat_dereferences_slashed_symlink=yes
gl_cv_func_malloc_posix=yes
gl_cv_func_mbrtowc_empty_input=yes
gl_cv_func_mbsrtowcs_works='guessing yes'
gl_cv_func_memchr_works=yes
gl_cv_func_mkdir_trailing_dot_works=yes
gl_cv_func_mkdir_trailing_slash_works=yes
gl_cv_func_mkfifo=yes
gl_cv_func_mkfifo_works=yes
gl_cv_func_mknod_works=yes
gl_cv_func_nl_langinfo_yesexpr_works=yes
gl_cv_func_open_slash=yes
gl_cv_func_posix_spawn_file_actions_addclose_works=yes
gl_cv_func_posix_spawn_file_actions_addopen_works=yes
gl_cv_func_posix_spawn_works=yes
gl_cv_func_printf_attribute_flavor=system
gl_cv_func_printf_directive_a=yes
gl_cv_func_printf_directive_f=yes
gl_cv_func_printf_directive_ls=yes
gl_cv_func_printf_directive_n=yes
gl_cv_func_printf_enomem=yes
gl_cv_func_printf_flag_grouping=yes
gl_cv_func_printf_flag_leftadjust=yes
gl_cv_func_printf_flag_zero=yes
gl_cv_func_printf_infinite=yes
gl_cv_func_printf_infinite_long_double=yes
gl_cv_func_printf_long_double=yes
gl_cv_func_printf_positions=yes
gl_cv_func_printf_precision=yes
gl_cv_func_pthread_sigmask_in_libc_works=yes
gl_cv_func_pthread_sigmask_return_works=yes
gl_cv_func_pthread_sigmask_unblock_works='guessing yes'
gl_cv_func_re_compile_pattern_working=yes
gl_cv_func_readlink_works=yes
gl_cv_func_realpath_works=yes
gl_cv_func_remove_dir_works=yes
gl_cv_func_rename_dest_works=yes
gl_cv_func_rename_link_works=yes
gl_cv_func_rename_slash_dst_works=yes
gl_cv_func_rename_slash_src_works=yes
gl_cv_func_rmdir_works=yes
gl_cv_func_select_detects_ebadf=yes
gl_cv_func_setenv_works=yes
gl_cv_func_signbit=yes
gl_cv_func_signbit_gcc=yes
gl_cv_func_sigprocmask=1
gl_cv_func_sleep_works=yes
gl_cv_func_snprintf_directive_n=yes
gl_cv_func_snprintf_posix=yes
gl_cv_func_snprintf_usable=yes
gl_cv_func_spawnattr_setschedparam=yes
gl_cv_func_spawnattr_setschedpolicy=yes
gl_cv_func_stat_dir_slash=yes
gl_cv_func_stat_file_slash=yes
gl_cv_func_stpncpy=yes
gl_cv_func_strcasestr_linear=yes
gl_cv_func_strcasestr_works_always=yes
gl_cv_func_strchrnul_works=yes
gl_cv_func_strerror_r_posix_signature=yes
gl_cv_func_strncat_works=yes
gl_cv_func_strndup_works=yes
gl_cv_func_strstr_linear=yes
gl_cv_func_strstr_works_always=yes
gl_cv_func_strtod_l=yes
gl_cv_func_strtod_works=yes
gl_cv_func_strtoimax=yes
gl_cv_func_strtok_r_works=yes
gl_cv_func_svid_putenv=yes
gl_cv_func_symlink_works=yes
gl_cv_func_symlinkat_works=yes
gl_cv_func_tcgetattr=yes
gl_cv_func_tcsetattr=yes
gl_cv_func_ungetc_works=yes
gl_cv_func_unlink_busy_text=yes
gl_cv_func_unlink_honors_slashes=yes
gl_cv_func_unlink_parent_fails='guessing yes'
gl_cv_func_unsetenv_works=yes
gl_cv_func_usleep_works=yes
gl_cv_func_utimensat_works=yes
gl_cv_func_va_copy=yes
gl_cv_func_vfprintf_posix=yes
gl_cv_func_vsnprintf_posix=yes
gl_cv_func_vsnprintf_usable=yes
gl_cv_func_wcrtomb_retval='guessing yes'
gl_cv_func_wctob_works='guessing yes'
gl_cv_func_wcwidth_works=yes
gl_cv_func_working_acl_get_file=yes
gl_cv_func_working_getdelim=yes
gl_cv_func_working_mkstemp=yes
gl_cv_func_working_mktime=yes
gl_cv_func_working_strerror=yes
gl_cv_func_working_strsignal=yes
gl_cv_func_working_utimes=yes
gl_cv_getxattr_with_posix_acls=yes
gl_cv_glob_lists_symlinks=yes
gl_cv_have_arbitrary_file_name_length_limit=yes
gl_cv_have_clock_gettime_macro=yes
gl_cv_have_include_next=yes
gl_cv_have_proc_uptime=yes
gl_cv_have_raw_decl__Exit=yes
gl_cv_have_raw_decl_accept=yes
gl_cv_have_raw_decl_alphasort=yes
gl_cv_have_raw_decl_atoll=yes
gl_cv_have_raw_decl_bind=yes
gl_cv_have_raw_decl_btowc=yes
gl_cv_have_raw_decl_canonicalize_file_name=yes
gl_cv_have_raw_decl_chdir=yes
gl_cv_have_raw_decl_chown=yes
gl_cv_have_raw_decl_closedir=yes
gl_cv_have_raw_decl_connect=yes
gl_cv_have_raw_decl_dirfd=yes
gl_cv_have_raw_decl_dprintf=yes
gl_cv_have_raw_decl_dup=yes
gl_cv_have_raw_decl_duplocale=yes
gl_cv_have_raw_decl_endusershell=yes
gl_cv_have_raw_decl_environ=yes
gl_cv_have_raw_decl_euidaccess=yes
gl_cv_have_raw_decl_faccessat=yes
gl_cv_have_raw_decl_fchdir=yes
gl_cv_have_raw_decl_fchmodat=yes
gl_cv_have_raw_decl_fchownat=yes
gl_cv_have_raw_decl_fcntl=yes
gl_cv_have_raw_decl_fdatasync=yes
gl_cv_have_raw_decl_fdopendir=yes
gl_cv_have_raw_decl_ffs=yes
gl_cv_have_raw_decl_ffsl=yes
gl_cv_have_raw_decl_ffsll=yes
gl_cv_have_raw_decl_fseeko=yes
gl_cv_have_raw_decl_fstat=yes
gl_cv_have_raw_decl_fstatat=yes
gl_cv_have_raw_decl_fsync=yes
gl_cv_have_raw_decl_ftello=yes
gl_cv_have_raw_decl_ftruncate=yes
gl_cv_have_raw_decl_futimens=yes
gl_cv_have_raw_decl_getcwd=yes
gl_cv_have_raw_decl_getdelim=yes
gl_cv_have_raw_decl_getdomainname=yes
gl_cv_have_raw_decl_getdtablesize=yes
gl_cv_have_raw_decl_getgroups=yes
gl_cv_have_raw_decl_gethostname=yes
gl_cv_have_raw_decl_getline=yes
gl_cv_have_raw_decl_getloadavg=yes
gl_cv_have_raw_decl_getlogin=yes
gl_cv_have_raw_decl_getlogin_r=yes
gl_cv_have_raw_decl_getpagesize=yes
gl_cv_have_raw_decl_getpeername=yes
gl_cv_have_raw_decl_getrusage=yes
gl_cv_have_raw_decl_getsockname=yes
gl_cv_have_raw_decl_getsockopt=yes
gl_cv_have_raw_decl_getsubopt=yes
gl_cv_have_raw_decl_gettimeofday=yes
gl_cv_have_raw_decl_getusershell=yes
gl_cv_have_raw_decl_grantpt=yes
gl_cv_have_raw_decl_group_member=yes
gl_cv_have_raw_decl_imaxabs=yes
gl_cv_have_raw_decl_imaxdiv=yes
gl_cv_have_raw_decl_inet_ntop=yes
gl_cv_have_raw_decl_inet_pton=yes
gl_cv_have_raw_decl_initstate=yes
gl_cv_have_raw_decl_initstate_r=yes
gl_cv_have_raw_decl_ioctl=yes
gl_cv_have_raw_decl_isatty=yes
gl_cv_have_raw_decl_isblank=yes
gl_cv_have_raw_decl_iswctype=yes
gl_cv_have_raw_decl_lchmod=yes
gl_cv_have_raw_decl_lchown=yes
gl_cv_have_raw_decl_link=yes
gl_cv_have_raw_decl_linkat=yes
gl_cv_have_raw_decl_listen=yes
gl_cv_have_raw_decl_lseek=yes
gl_cv_have_raw_decl_lstat=yes
gl_cv_have_raw_decl_mbrlen=yes
gl_cv_have_raw_decl_mbrtowc=yes
gl_cv_have_raw_decl_mbsinit=yes
gl_cv_have_raw_decl_mbsnrtowcs=yes
gl_cv_have_raw_decl_mbsrtowcs=yes
gl_cv_have_raw_decl_memmem=yes
gl_cv_have_raw_decl_mempcpy=yes
gl_cv_have_raw_decl_memrchr=yes
gl_cv_have_raw_decl_mkdirat=yes
gl_cv_have_raw_decl_mkdtemp=yes
gl_cv_have_raw_decl_mkfifo=yes
gl_cv_have_raw_decl_mkfifoat=yes
gl_cv_have_raw_decl_mknod=yes
gl_cv_have_raw_decl_mknodat=yes
gl_cv_have_raw_decl_mkostemp=yes
gl_cv_have_raw_decl_mkostemps=yes
gl_cv_have_raw_decl_mkstemp=yes
gl_cv_have_raw_decl_mkstemps=yes
gl_cv_have_raw_decl_nl_langinfo=yes
gl_cv_have_raw_decl_openat=yes
gl_cv_have_raw_decl_opendir=yes
gl_cv_have_raw_decl_pclose=yes
gl_cv_have_raw_decl_pipe=yes
gl_cv_have_raw_decl_popen=yes
gl_cv_have_raw_decl_posix_openpt=yes
gl_cv_have_raw_decl_pread=yes
gl_cv_have_raw_decl_pselect=yes
gl_cv_have_raw_decl_pthread_sigmask=yes
gl_cv_have_raw_decl_ptsname=yes
gl_cv_have_raw_decl_ptsname_r=yes
gl_cv_have_raw_decl_pwrite=yes
gl_cv_have_raw_decl_qsort_r=yes
gl_cv_have_raw_decl_random=yes
gl_cv_have_raw_decl_random_r=yes
gl_cv_have_raw_decl_rawmemchr=yes
gl_cv_have_raw_decl_readdir=yes
gl_cv_have_raw_decl_readlink=yes
gl_cv_have_raw_decl_readlinkat=yes
gl_cv_have_raw_decl_reallocarray=yes
gl_cv_have_raw_decl_realpath=yes
gl_cv_have_raw_decl_recv=yes
gl_cv_have_raw_decl_recvfrom=yes
gl_cv_have_raw_decl_renameat=yes
gl_cv_have_raw_decl_rewinddir=yes
gl_cv_have_raw_decl_rmdir=yes
gl_cv_have_raw_decl_rpmatch=yes
gl_cv_have_raw_decl_scandir=yes
gl_cv_have_raw_decl_secure_getenv=yes
gl_cv_have_raw_decl_select=yes
gl_cv_have_raw_decl_send=yes
gl_cv_have_raw_decl_sendto=yes
gl_cv_have_raw_decl_setenv=yes
gl_cv_have_raw_decl_sethostname=yes
gl_cv_have_raw_decl_setlocale=yes
gl_cv_have_raw_decl_setsockopt=yes
gl_cv_have_raw_decl_setstate=yes
gl_cv_have_raw_decl_setstate_r=yes
gl_cv_have_raw_decl_setusershell=yes
gl_cv_have_raw_decl_shutdown=yes
gl_cv_have_raw_decl_sigaction=yes
gl_cv_have_raw_decl_sigaddset=yes
gl_cv_have_raw_decl_sigdelset=yes
gl_cv_have_raw_decl_sigemptyset=yes
gl_cv_have_raw_decl_sigfillset=yes
gl_cv_have_raw_decl_sigismember=yes
gl_cv_have_raw_decl_sigpending=yes
gl_cv_have_raw_decl_sigprocmask=yes
gl_cv_have_raw_decl_sleep=yes
gl_cv_have_raw_decl_snprintf=yes
gl_cv_have_raw_decl_socket=yes
gl_cv_have_raw_decl_srandom=yes
gl_cv_have_raw_decl_srandom_r=yes
gl_cv_have_raw_decl_stat=yes
gl_cv_have_raw_decl_stpcpy=yes
gl_cv_have_raw_decl_stpncpy=yes
gl_cv_have_raw_decl_strcasecmp=yes
gl_cv_have_raw_decl_strcasestr=yes
gl_cv_have_raw_decl_strchrnul=yes
gl_cv_have_raw_decl_strdup=yes
gl_cv_have_raw_decl_strerror_r=yes
gl_cv_have_raw_decl_strncasecmp=yes
gl_cv_have_raw_decl_strncat=yes
gl_cv_have_raw_decl_strndup=yes
gl_cv_have_raw_decl_strnlen=yes
gl_cv_have_raw_decl_strpbrk=yes
gl_cv_have_raw_decl_strsep=yes
gl_cv_have_raw_decl_strsignal=yes
gl_cv_have_raw_decl_strtod=yes
gl_cv_have_raw_decl_strtoimax=yes
gl_cv_have_raw_decl_strtok_r=yes
gl_cv_have_raw_decl_strtoll=yes
gl_cv_have_raw_decl_strtoull=yes
gl_cv_have_raw_decl_strtoumax=yes
gl_cv_have_raw_decl_strverscmp=yes
gl_cv_have_raw_decl_symlink=yes
gl_cv_have_raw_decl_symlinkat=yes
gl_cv_have_raw_decl_tmpfile=yes
gl_cv_have_raw_decl_towctrans=yes
gl_cv_have_raw_decl_truncate=yes
gl_cv_have_raw_decl_ttyname_r=yes
gl_cv_have_raw_decl_unlink=yes
gl_cv_have_raw_decl_unlinkat=yes
gl_cv_have_raw_decl_unlockpt=yes
gl_cv_have_raw_decl_unsetenv=yes
gl_cv_have_raw_decl_usleep=yes
gl_cv_have_raw_decl_utime=yes
gl_cv_have_raw_decl_utimensat=yes
gl_cv_have_raw_decl_vdprintf=yes
gl_cv_have_raw_decl_vsnprintf=yes
gl_cv_have_raw_decl_waitpid=yes
gl_cv_have_raw_decl_wcpcpy=yes
gl_cv_have_raw_decl_wcpncpy=yes
gl_cv_have_raw_decl_wcrtomb=yes
gl_cv_have_raw_decl_wcscasecmp=yes
gl_cv_have_raw_decl_wcscat=yes
gl_cv_have_raw_decl_wcschr=yes
gl_cv_have_raw_decl_wcscmp=yes
gl_cv_have_raw_decl_wcscoll=yes
gl_cv_have_raw_decl_wcscpy=yes
gl_cv_have_raw_decl_wcscspn=yes
gl_cv_have_raw_decl_wcsdup=yes
gl_cv_have_raw_decl_wcsftime=yes
gl_cv_have_raw_decl_wcslen=yes
gl_cv_have_raw_decl_wcsncasecmp=yes
gl_cv_have_raw_decl_wcsncat=yes
gl_cv_have_raw_decl_wcsncmp=yes
gl_cv_have_raw_decl_wcsncpy=yes
gl_cv_have_raw_decl_wcsnlen=yes
gl_cv_have_raw_decl_wcsnrtombs=yes
gl_cv_have_raw_decl_wcspbrk=yes
gl_cv_have_raw_decl_wcsrchr=yes
gl_cv_have_raw_decl_wcsrtombs=yes
gl_cv_have_raw_decl_wcsspn=yes
gl_cv_have_raw_decl_wcsstr=yes
gl_cv_have_raw_decl_wcstok=yes
gl_cv_have_raw_decl_wcswidth=yes
gl_cv_have_raw_decl_wcsxfrm=yes
gl_cv_have_raw_decl_wctob=yes
gl_cv_have_raw_decl_wctrans=yes
gl_cv_have_raw_decl_wctype=yes
gl_cv_have_raw_decl_wcwidth=yes
gl_cv_have_raw_decl_wmemchr=yes
gl_cv_have_raw_decl_wmemcmp=yes
gl_cv_have_raw_decl_wmemcpy=yes
gl_cv_have_raw_decl_wmemmove=yes
gl_cv_have_raw_decl_wmemset=yes
gl_cv_have_weak=yes
gl_cv_header_errno_h_complete=yes
gl_cv_header_inttypes_h=yes
gl_cv_header_langinfo_altmon=yes
gl_cv_header_langinfo_codeset=yes
gl_cv_header_langinfo_era=yes
gl_cv_header_langinfo_t_fmt_ampm=yes
gl_cv_header_langinfo_yesexpr=yes
gl_cv_header_limits_width=yes
gl_cv_header_linux_if_alg_salg=yes
gl_cv_header_locale_has_locale_t=yes
gl_cv_header_math_huge_val_works=yes
gl_cv_header_math_nan_works=yes
gl_cv_header_netinet_in_h_selfcontained=yes
gl_cv_header_signal_h_SIGPIPE=yes
gl_cv_header_stdint_h=yes
gl_cv_header_stdint_width=yes
gl_cv_header_sys_select_h_selfcontained=yes
gl_cv_header_sys_socket_h_selfcontained=yes
gl_cv_header_sys_socket_h_shut=yes
gl_cv_header_wchar_h_correct_inline=yes
gl_cv_header_working_fcntl_h=yes
gl_cv_header_working_stdalign_h=yes
gl_cv_header_working_stdint_h=yes
gl_cv_header_working_stdnoreturn_h=yes
gl_cv_host_cpu_c_abi=x86_64
gl_cv_host_operating_system=GNU/Linux
gl_cv_lib_sigsegv=yes
gl_cv_linker_have_as_needed=yes
gl_cv_linker_have_push_state=yes
gl_cv_list_mounted_fs=yes
gl_cv_macro_O_CLOEXEC=yes
gl_cv_minmax_in_sys_param_h=yes
gl_cv_next_arpa_inet_h='<arpa/inet.h>'
gl_cv_next_ctype_h='<ctype.h>'
gl_cv_next_dirent_h='<dirent.h>'
gl_cv_next_fcntl_h='<fcntl.h>'
gl_cv_next_fnmatch_h='<fnmatch.h>'
gl_cv_next_getopt_h='<getopt.h>'
gl_cv_next_glob_h='<glob.h>'
gl_cv_next_iconv_h='<iconv.h>'
gl_cv_next_inttypes_h='<inttypes.h>'
gl_cv_next_langinfo_h='<langinfo.h>'
gl_cv_next_limits_h='<limits.h>'
gl_cv_next_locale_h='<locale.h>'
gl_cv_next_math_h='<math.h>'
gl_cv_next_netdb_h='<netdb.h>'
gl_cv_next_pthread_h='<pthread.h>'
gl_cv_next_selinux_selinux_h='<selinux/selinux.h>'
gl_cv_next_spawn_h='<spawn.h>'
gl_cv_next_stdint_h='<stdint.h>'
gl_cv_next_stdio_h='<stdio.h>'
gl_cv_next_stdlib_h='<stdlib.h>'
gl_cv_next_string_h='<string.h>'
gl_cv_next_strings_h='<strings.h>'
gl_cv_next_sys_file_h='<sys/file.h>'
gl_cv_next_sys_ioctl_h='<sys/ioctl.h>'
gl_cv_next_sys_resource_h='<sys/resource.h>'
gl_cv_next_sys_select_h='<sys/select.h>'
gl_cv_next_sys_socket_h='<sys/socket.h>'
gl_cv_next_sys_stat_h='<sys/stat.h>'
gl_cv_next_sys_time_h='<sys/time.h>'
gl_cv_next_sys_times_h='<sys/times.h>'
gl_cv_next_sys_types_h='<sys/types.h>'
gl_cv_next_sys_uio_h='<sys/uio.h>'
gl_cv_next_sys_utsname_h='<sys/utsname.h>'
gl_cv_next_sys_wait_h='<sys/wait.h>'
gl_cv_next_sysexits_h='<sysexits.h>'
gl_cv_next_termios_h='<termios.h>'
gl_cv_next_time_h='<time.h>'
gl_cv_next_unistd_h='<unistd.h>'
gl_cv_next_utime_h='<utime.h>'
gl_cv_next_wchar_h='<wchar.h>'
gl_cv_next_wctype_h='<wctype.h>'
gl_cv_pipes_are_fifos='yes (1)'
gl_cv_posix_shell=/bin/bash
gl_cv_prog_c_ignore_unused_libraries=-Wl,--as-needed
gl_cv_promoted_mode_t=mode_t
gl_cv_rpl_alloca=yes
gl_cv_sigaltstack_low_base=yes
gl_cv_size_max=yes
gl_cv_struct_dirent_d_ino=yes
gl_cv_struct_dirent_d_type=yes
gl_cv_sys_struct_lconv_ok=yes
gl_cv_sys_struct_timespec_in_time_h=yes
gl_cv_sys_struct_timeval=yes
gl_cv_sys_struct_timeval_tv_sec=yes
gl_cv_sys_struct_utimbuf=yes
gl_cv_sys_tiocgwinsz_needs_sys_ioctl_h=yes
gl_cv_time_r_posix=yes
gl_cv_time_t_is_signed=yes
gl_cv_type_max_align_t=yes
gl_cv_type_sigset_t=yes
gl_cv_type_wctrans_t=yes
gl_cv_type_wctype_t=yes
gl_cv_var_stdin_large_offset=yes
gnulib_cv_have_boot_time=yes
gold_cv_c_random_seed=yes
gold_cv_c_thread=yes
gold_cv_c_threadprivate=yes
gold_cv_hash_off_t=yes
gold_cv_lib_glibc_ifunc=both
gold_cv_lib_mremap_maymove=yes
gold_cv_lib_static=yes
gold_cv_merge_constants=yes
gold_cv_stat_st_mtim=yes
gold_cv_template_attribute=yes
gold_cv_unordered_map_rehash=yes
gprof_cv_decl_getopt_unistd_h=yes
gt_cv_c_intmax_t=yes
gt_cv_c_wchar_t=yes
gt_cv_c_wint_t=yes
gt_cv_func_printf_posix=yes
gt_cv_func_unsetenv_ret=int
gt_cv_header_inttypes_h=yes
gt_cv_int_divbyzero_sigfpe=yes
gt_cv_locale_fr=none
gt_cv_locale_ja=none
gt_cv_locale_zh_CN=none
gt_cv_ssize_t=yes
gt_cv_val_LC_MESSAGES=yes
gt_cv_var_environ_declaration=yes
jm_ac_cv_header_inttypes_h=yes
jm_ac_cv_header_stdint_h=yes
ld_cv_decl_getopt_unistd_h=yes
ld_cv_string_concatenation=yes
libc_cv_as_noexecstack=yes
libc_cv_asm_mpx=yes
libc_cv_asm_set_directive=yes
libc_cv_builtin_trap=yes
libc_cv_cc_loop_to_function=yes
libc_cv_cc_nofma=-ffp-contract=off
libc_cv_cc_submachine=
libc_cv_compiler_ok=yes
libc_cv_ehdr_start=yes
libc_cv_fno_toplevel_reorder=yes
libc_cv_fpie=yes
libc_cv_gcc_builtin_memset=yes
libc_cv_gcc_builtin_redirection=yes
libc_cv_gcc_incompatible_alias=yes
libc_cv_gcc_indirect_function=yes
libc_cv_has_glob_dat=yes
libc_cv_hashstyle=yes
libc_cv_ld_gnu_indirect_function=yes
libc_cv_localstatedir=/var
libc_cv_output_format=elf64-x86-64
libc_cv_prog_as_gnu=yes
libc_cv_prog_ld_gnu=yes
libc_cv_protected_data=yes
libc_cv_rootsbindir=/sbin
libc_cv_rtlddir=/lib64
libc_cv_slibdir=/lib64
libc_cv_ssp=yes
libc_cv_ssp_all=yes
libc_cv_ssp_strong=yes
libc_cv_sysconfdir=/etc
libc_cv_z_combreloc=yes
libc_cv_z_execstack=yes
libffi_cv_as_ascii_pseudo_op=yes
libffi_cv_as_string_pseudo_op=yes
libffi_cv_hidden_visibility_attribute=yes
libffi_cv_ro_eh_frame=yes
libiberty_cv_var_sys_errlist=yes
libiberty_cv_var_sys_nerr=yes
libiberty_cv_var_sys_siglist=yes
libltdl_cv_lib_dl_dlopen=yes
libltdl_cv_preloaded_symbols=yes
libltdl_cv_shlibext=.so
libltdl_cv_shrext=.so
lt_cv_ar_at_file=@
lt_cv_dlopen=dlopen
lt_cv_dlopen_libs=
lt_cv_dlopen_self=yes
lt_cv_dlopen_self_static=yes
lt_cv_file_magic_cmd=/usr/bin/file
lt_cv_ld_reload_flag=-r
lt_cv_module_path_var=LD_LIBRARY_PATH
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD='xild -m elf_x86_64'
lt_cv_path_LDCXX='xild -m elf_x86_64'
lt_cv_path_NM='/usr/bin/x86_64-linux-gnu-nm -B'
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_c_o_CXX=yes
lt_cv_prog_compiler_c_o_FC=yes
lt_cv_prog_compiler_c_o_RC=yes
lt_cv_prog_compiler_pic=-fpic
lt_cv_prog_compiler_pic_CXX=-fpic
lt_cv_prog_compiler_pic_FC=-fpic
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_pic_works_CXX=yes
lt_cv_prog_compiler_pic_works_FC=yes
lt_cv_prog_compiler_rtti_exceptions=yes
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_compiler_static_works_CXX=yes
lt_cv_prog_gnu_ld=yes
lt_cv_prog_gnu_ldcxx=yes
lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
lt_cv_shlibpath_overrides_runpath=yes
lt_cv_sys_argz_works=yes
lt_cv_sys_dlopen_deplibs=yes
lt_cv_sys_max_cmd_len=1572864
lv_cv_gcc_pragma_push_works=yes
pcre_cv_have_pcre_compile=yes
py_cv_lib_readline=yes
samba_cv_HAVE_POSIX_ACLS=yes
scanf_cv_alloc_modifier=ms
su_cv_func_ut_host_in_utmp=yes
su_cv_sys_c_line_in_termios=yes
utils_cv_func_setpriority=yes
utils_cv_localtime_cache=yes
utrace_cv_CC_m32=-m32
utrace_cv_cc_biarch=no
utrace_cv_host64=yes

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /dev/shm/libelf/elfutils-0.175/config/missing aclocal-1.16'
ADD_STACK_USAGE_WARNING_FALSE='#'
ADD_STACK_USAGE_WARNING_TRUE=''
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='1'
AM_V='$(V)'
AR='xiar'
AUTOCONF='${SHELL} /dev/shm/libelf/elfutils-0.175/config/missing autoconf'
AUTOHEADER='${SHELL} /dev/shm/libelf/elfutils-0.175/config/missing autoheader'
AUTOMAKE='${SHELL} /dev/shm/libelf/elfutils-0.175/config/missing automake-1.16'
AWK='gawk'
BIARCH_FALSE=''
BIARCH_TRUE='#'
BUILD_STATIC_FALSE=''
BUILD_STATIC_TRUE='#'
BZ2_LIB='-lbz2 '
BZLIB_FALSE='#'
BZLIB_TRUE=''
CC='icc'
CCDEPMODE='depmode=gcc3'
CC_BIARCH='icc -m32'
CFLAGS='-D_FORTIFY_SOURCE=2 -g -O2 -fdebug-prefix-map=/dev/shm/libelf/elfutils-0.175=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -O3'
CPP='icc -E'
CPPFLAGS='-Wdate-time -D_FORTIFY_SOURCE=2'
CYGPATH_W='echo'
DEBUGPRED='0'
DEFS='-DHAVE_CONFIG_H'
DEMANGLE_FALSE='#'
DEMANGLE_TRUE=''
DEPDIR='.deps'
ECHO_C=''
ECHO_N='-n'
ECHO_T='	'
EGREP='/bin/grep -E'
EXEEXT=''
FATAL_TEXTREL_FALSE='#'
FATAL_TEXTREL_TRUE=''
GCOV_FALSE=''
GCOV_TRUE='#'
GETTEXT_MACRO_VERSION='0.18'
GMSGFMT='/usr/bin/msgfmt'
GMSGFMT_015='/usr/bin/msgfmt'
GPROF_FALSE=''
GPROF_TRUE='#'
GREP='/bin/grep'
HAVE_BISON='yes'
HAVE_BUNZIP2='yes'
HAVE_DUPLICATED_COND_WARNING_FALSE='#'
HAVE_DUPLICATED_COND_WARNING_TRUE=''
HAVE_FLEX='yes'
HAVE_GAWK='yes'
HAVE_IMPLICIT_FALLTHROUGH_WARNING_FALSE='#'
HAVE_IMPLICIT_FALLTHROUGH_WARNING_TRUE=''
HAVE_LIBASM_FALSE='#'
HAVE_LIBASM_TRUE=''
HAVE_NULL_DEREFERENCE_WARNING_FALSE='#'
HAVE_NULL_DEREFERENCE_WARNING_TRUE=''
HAVE_VALGRIND=''
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LDFLAGS='-Wl,-z,relro -Wl,--as-needed,--gc-sections,--relax'
LEX='/usr/bin/lex'
LEXLIB=''
LEX_OUTPUT_ROOT='lex.yy'
LIBEBL_SUBDIR='elfutils'
LIBLZMA='liblzma'
LIBOBJS=''
LIBS=''
LTLIBOBJS=''
LZMA_FALSE='#'
LZMA_TRUE=''
MAINT=''
MAINTAINER_MODE_FALSE='#'
MAINTAINER_MODE_TRUE=''
MAKEINFO='${SHELL} /dev/shm/libelf/elfutils-0.175/config/missing makeinfo'
MKDIR_P='/bin/mkdir -p'
MODVERSION='Build for elfutils 175 x86_64-pc-linux-gnu'
MSGFMT='/usr/bin/msgfmt'
MSGFMT_015='/usr/bin/msgfmt'
MSGMERGE='/usr/bin/msgmerge'
NM='nm'
OBJEXT='o'
PACKAGE='elfutils'
PACKAGE_BUGREPORT='https://sourceware.org/bugzilla'
PACKAGE_NAME='elfutils'
PACKAGE_STRING='elfutils 0.175'
PACKAGE_TARNAME='elfutils'
PACKAGE_URL='http://elfutils.org/'
PACKAGE_VERSION='0.175'
PATH_SEPARATOR=':'
RANLIB='/usr/bin/x86_64-linux-gnu-ranlib'
READELF='/usr/bin/x86_64-linux-gnu-readelf'
SANE_LOGICAL_OP_WARNING_FALSE='#'
SANE_LOGICAL_OP_WARNING_TRUE=''
SET_MAKE=''
SHELL='/bin/bash'
STANDALONE_FALSE=''
STANDALONE_TRUE='#'
STRIP='/usr/bin/x86_64-linux-gnu-strip'
SYMBOL_VERSIONING_FALSE='#'
SYMBOL_VERSIONING_TRUE=''
TESTS_RPATH_FALSE=''
TESTS_RPATH_TRUE='#'
USE_LOCKS_FALSE=''
USE_LOCKS_TRUE='#'
USE_NLS='yes'
USE_VALGRIND_FALSE=''
USE_VALGRIND_TRUE='#'
VERSION='0.175'
XGETTEXT='/usr/bin/xgettext'
XGETTEXT_015='/usr/bin/xgettext'
XGETTEXT_EXTRA_OPTIONS=''
YACC='bison -y'
YFLAGS=''
ZLIB_FALSE='#'
ZLIB_TRUE=''
ac_ct_AR=''
ac_ct_CC=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE='#'
am__fastdepCC_TRUE=''
am__include='include'
am__isrc=''
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
argp_LDADD=''
bindir='${exec_prefix}/bin'
build='x86_64-pc-linux-gnu'
build_alias='x86_64-linux-gnu'
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='pc'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dso_LDFLAGS='-shared -Wl,-z,defs -Wl,-z,relro'
dvidir='${docdir}'
eu_version='175'
exec_prefix='${prefix}'
fpic_CFLAGS='-fPIC'
fpie_CFLAGS='-fPIE'
host='x86_64-pc-linux-gnu'
host_alias='x86_64-linux-gnu'
host_cpu='x86_64'
host_os='linux-gnu'
host_vendor='pc'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /dev/shm/libelf/elfutils-0.175/config/install-sh'
libdir='/usr/lib/x86_64-linux-gnu'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/usr'
program_transform_name='s&^&eu-&'
psdir='${docdir}'
runstatedir='${localstatedir}/run'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias='x86_64-linux-gnu'
zip_LIBS='-llzma -lbz2 '

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "elfutils"
#define PACKAGE_TARNAME "elfutils"
#define PACKAGE_VERSION "0.175"
#define PACKAGE_STRING "elfutils 0.175"
#define PACKAGE_BUGREPORT "https://sourceware.org/bugzilla"
#define PACKAGE_URL "http://elfutils.org/"
#define PACKAGE "elfutils"
#define VERSION "0.175"
#define DEFAULT_AR_DETERMINISTIC false
#define HAVE_VISIBILITY 1
#define HAVE_GCC_STRUCT 1
#define CHECK_UNDEFINED 0
#define LIBEBL_SUBDIR "elfutils"
#define USE_ZLIB 1
#define USE_BZLIB 1
#define USE_LZMA 1
#define HAVE_DECL_MEMRCHR 1
#define HAVE_DECL_RAWMEMCHR 1
#define HAVE_DECL_POWEROF2 1
#define HAVE_DECL_MEMPCPY 1
#define HAVE_PROCESS_VM_READV 1
#define USE_DEMANGLE 1
#define HAVE_FALLTHROUGH 1
#define MODVERSION "Build for elfutils 175 x86_64-pc-linux-gnu"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1
#define SIZEOF_LONG 8
#define HAVE_SYS_USER_REGS 1

configure: exit 0
